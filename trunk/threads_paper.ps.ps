%!PS-Adobe-2.0
%%Title: Threads paper (Times)
%%Creator: PrintMonitor
%%CreationDate: Thursday, February 11, 1993
%%Pages: (atend)
%%BoundingBox: ? ? ? ?
%%PageBoundingBox: 30 31 582 761
%%For: Andrew
%%DocumentProcSets: "(AppleDict md)" 71 0
%% © Copyright Apple Computer, Inc. 1989-92 All Rights Reserved.
%%EndComments
%%BeginProcSet: "(AppleDict md)" 71 0
userdict/LW{save statusdict/product get(LaserWriter)anchorsearch
exch pop{dup length 0 eq{pop 1}{( Plus)eq{2}{3}ifelse}ifelse}{0}ifelse exch restore}bind put
userdict/patchOK known not{save LW dup 1 ne exch 2 ne and false<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>{eexec}stopped{dup type/stringtype eq{pop}if}if and exch restore userdict/patchOK 3 -1 roll put} if
userdict/downloadOK known not{userdict/downloadOK{ vmstatus exch sub exch pop 120000 gt patchOK and}bind put}if
userdict/type42known known not{userdict/type42known systemdict/resourcestatus known{42/FontType resourcestatus{pop pop true}{false}ifelse }{false}ifelse put}if
type42known not downloadOK and {userdict begin /*charpath /charpath load def/charpathflag false def/charpath{userdict/charpathflag true put userdict/*charpath get exec userdict/charpathflag false put}bind def end}if
userdict/checkload known not{userdict/checkload{{pop exec} {save 3 dict begin/mystring 6050 string def
exch/endstring exch def{currentfile mystring readline not{stop}if endstring eq{exit}if}loop end restore pop}ifelse}bind put}if
userdict/LW+{LW 2 eq}bind put
userdict/ok known not{userdict/ok{systemdict/statusdict known dup{LW 0 gt and}if}bind put}if
systemdict/currentpacking known{currentpacking true setpacking}if
/md 270 dict def md begin
/av 71 def
/T true def/F false def/mtx matrix def/s75 75 string def/sa8 8 string def/sb8 8 string def
/sc8 8 string def/sd8 8 string def/s1 ( ) def/pxs 1 def/pys 1 def
/ns false def
1 0 mtx defaultmatrix dtransform exch atan/pa exch def/nlw .24 def/ppr [-32 -29.52 762 582.48] def
/pgr [0 0 0 0] def
/pgs 1 def/por true def/xb 500 array def/so true def/tso true def/fillflag false def/pnm 1 def/fmv true def
/sfl false def/ma 0 def/invertflag false def/dbinvertflag false def/xflip false def/yflip false def/noflips true def/scaleby96 false def/fNote true def/fBitStretch true def
/4colors false def/fg (Rvd\001\001\000\000\177) def
/bdf{bind def}bind def
/xdf{exch def}bdf
/xl{neg exch neg translate}bdf
/fp{pnsh 0 ne pnsv 0 ne and}bdf
/nop{}bdf/lnop[/nop load]cvx bdf
/vrb[
{fp{fg 6 get 0 ne{gsave stroke grestore}{gsave 1 setlinewidth pnsh pnsv scale stroke grestore}ifelse}if newpath}bind
/eofill load
dup
/newpath load
2 index
dup
{clip newpath}bind
{}bind
dup
2 copy
]def
/sgd systemdict/setpagedevice known{{2 dict begin/PreRenderingEnhance exch def/Policies 1 dict dup/PreRenderingEnhance 1 put def currentdict end setpagedevice}}{{pop}}ifelse bdf
/svsc systemdict/currentcolorscreen known{{currentcolorscreen/dkspf xdf/dkrot xdf/dkfreq xdf/dyspf xdf/dyrot xdf/dyfreq xdf/dmspf xdf/dmrot xdf/dmfreq xdf
/dcspf xdf/dcrot xdf/dcfreq xdf}}{{currentscreen/spf xdf/rot xdf/freq xdf}}ifelse bdf
/doop{vrb exch get exec}bdf
/psu{/udf xdf/tso xdf /fNote xdf/fBitStretch xdf/scaleby96 xdf/yflip xdf/xflip xdf
/invertflag xdf/dbinvertflag invertflag statusdict begin version cvr 47.0 ge product (LaserWriter) eq not and end invertflag and {not}if def
xflip yflip or{/noflips false def}if
/pgs xdf 2 index .72 mul exch div/pys xdf div .72 mul/pxs xdf ppr astore pop pgr astore pop/por xdf sn and/so xdf}bdf
/tab{userdict /11x17 known{userdict begin /11x17 load exec end}{statusdict /setpage known{statusdict begin 792 1224 1 setpage end}{statusdict /setpageparams known{statusdict begin 792 1224 0 1 setpageparams end}if}ifelse}ifelse}bdf
/a3Size{userdict /a3 known{userdict begin /a3 load exec end}{statusdict /setpageparams known{statusdict begin 842 1191 0 1 setpageparams end}if}ifelse}bdf
/txpose{fNote{smalls}{bigs}ifelse pgs get exec pxs pys scale ppr aload pop por{noflips{pop exch neg exch translate pop 1 -1 scale}if
xflip yflip and{pop exch neg exch translate 180 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg translate}if 
xflip yflip not and{pop exch neg exch translate pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0 translate}if yflip xflip not and{ppr 1 get neg ppr 0 get neg translate}if}
{noflips{translate pop pop 270 rotate 1 -1 scale}if xflip yflip and{translate pop pop 90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg translate}if
xflip yflip not and{translate pop pop 90 rotate ppr 3 get ppr 1 get neg sub neg 0 translate}if yflip xflip not and{translate pop pop 270 rotate ppr 2 get ppr 0 get neg sub neg 0 exch translate}if}ifelse
statusdict begin/waittimeout where{pop waittimeout 300 lt{statusdict/waittimeout 300 put}if}if end 
scaleby96{ppr aload pop 4 -1 roll add 2 div 3 1 roll add 2 div 2 copy translate .96 dup scale neg exch neg exch translate}if}bdf
/fr{4 copy pgr aload pop 3 -1 roll add 3 1 roll exch add 6 2 roll 3 -1 roll
sub 3 1 roll exch sub 3 -1 roll exch div 3 1 roll div exch scale pop pop xl}bdf
/obl{{0.212557 mul}{pop 0}ifelse}bdf
/sfd{ps fg 5 -1 roll get mul 100 div 0 ps 5 -1 roll obl ps neg 0 0 6a astore makefont setfont}bdf
/fnt{findfont sfd}bdf
/bt{sa 3 1 roll 3 index and put}bdf
/sa(\000\000\000\000\000\000\000\000\000\000)def
/fs{0 1 bt 1 2 bt 2 4 bt 3 8 bt 4 16 bt 5 32 bt 6 64 bt 7 128 bt sa exch 8 exch put}bdf
/mx1 matrix def
/mx2 matrix def
/mx3 matrix def
/bu{currentpoint 4colors{currentcmykcolor}{currentrgbcolor}ifelse currentlinewidth currentlinecap currentlinejoin 
currentdash exch aload length fg 5 sfl{1}{0}ifelse put pnsv pnsh 
2t aload pop 3a aload pop mx2 aload pop mx1 aload pop mtx currentmatrix aload pop
mx3 aload pop ps pm restore/ps xdf mx3 astore pop}bdf
/bn{/pm save def mx3 setmatrix newpath 0 0 moveto ct dup 39 get 0 exch getinterval cvx exec mtx astore setmatrix mx1 astore pop mx2 astore pop 3a 
astore pop 2t astore pop/pnsh xdf/pnsv xdf gw
/sfl fg 5 get 0 ne def array astore exch setdash setlinejoin setlinecap 
setlinewidth 4colors{mysetcmykcolor}{setrgbcolor}ifelse moveto}bdf
/fc{save vmstatus exch sub 50000 lt
{(%%[|0|]%%)=print flush}if pop restore}bdf
/tc{32768 div add 3 1 roll 32768 div add 2t astore pop}bdf
/3a [0 0 0] def
/2t 2 array def
/tp{3a astore pop}bdf
/tt{mx2 currentmatrix pop currentpoint 2 copy 2t aload pop qa 2 copy translate 3a aload pop exch dup 0 eq
{pop}{1 eq{-1 1}{1 -1}ifelse scale}ifelse rotate pop neg exch neg exch translate moveto}bdf
/te{mx2 setmatrix}bdf
/th{3 -1 roll div 3 1 roll exch div 2 copy mx1 scale pop scale/sfl true def}bdf
/tu{1 1 mx1 itransform scale/sfl false def}bdf
/ts{1 1 mx1 transform scale/sfl true def}bdf
/fz{/ps xdf}bdf
/dv{dup 0 ne{div}{pop}ifelse}bdf
/pop4{pop pop pop pop}bdf
/it{sfl{mx1 itransform}if}bdf
/gm{exch it moveto}bdf/rm{it rmoveto}bdf
/lm{currentpoint sfl{mx1 transform}if exch pop sub 0 exch it rmoveto}bdf
/fm{statusdict/manualfeed known}bdf
/se{statusdict exch/manualfeed exch put}bdf
/mf{dup/ma exch def 0 gt{fm se/t1 5 st ok ma 1 gt and{/t2 0 st/t3 0 st
statusdict/manualfeedtimeout 3600 put
}if}if}bdf
/jn{/statusdict where exch pop{statusdict exch /jobname exch put}if}bdf
/pen{pnm mul/pnsh xdf pnm mul/pnsv xdf pnsh setlinewidth}bdf
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/dh{fg 6 1 put array astore dup {1 pxs div mul exch}forall astore exch pop exch pop exch setdash}bdf
/ih[currentdash]def
/rh{fg 6 0 put ih aload pop setdash}bdf
/dl{gsave nlw pys div setlinewidth 0 setgray}bdf
/dlin{exch currentpoint currentlinewidth 2 div dup
translate newpath moveto lineto currentpoint stroke grestore moveto}bdf
/lin{fg 6 get 0 ne{exch lineto currentpoint 0 doop moveto}
{exch currentpoint/pnlv xdf/pnlh xdf gsave newpath/@1 xdf/@2 xdf fp{pnlh @2 lt{pnlv @1 ge
{pnlh pnlv moveto @2 @1 lineto pnsh 0 rlineto
0 pnsv rlineto pnlh pnsh add pnlv pnsv add lineto pnsh neg 0 rlineto}
{pnlh pnlv moveto pnsh 0 rlineto @2 pnsh add @1 lineto 0 pnsv rlineto
pnsh neg 0 rlineto pnlh pnlv pnsv add lineto}ifelse}{pnlv @1 gt
{@2 @1 moveto pnsh 0 rlineto pnlh pnsh add pnlv lineto 0 pnsv rlineto
pnsh neg 0 rlineto @2 @1 pnsv add lineto}{pnlh pnlv moveto pnsh 0 rlineto
0 pnsv rlineto @2 pnsh add @1 pnsv add lineto pnsh neg 0 rlineto
0 pnsv neg rlineto}ifelse}ifelse
closepath fill}if @2 @1 grestore moveto}ifelse}bdf
/gw{/pnm fg 3 get fg 4 get div def}bdf
/lw{fg exch 4 exch put fg exch 3 exch put gw pnsv pnsh pen}bdf
/barc{/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf
/@6 xdf/@7 xdf/@8 xdf gsave
@5 @7 add 2 div @6 @8 add 2 div translate newpath 0 0 moveto
@5 @7 sub @6 @8 sub mtx currentmatrix pop scale @1{newpath}if
0 0 0.5 @4 @3 arc @4 @3 sub abs 360 ge{closepath}if
mtx setmatrix @2 doop grestore}bdf
/ar{dup 0 eq barc}bdf
/ov{0 exch 360 exch true barc}bdf
/rc{dup/@t xdf 0 eq{4 copy 3 -1 roll eq 3 1 roll eq and{pnsv 2 div sub exch pnsh 2 div sub exch 4 2 roll pnsv 2 div add exch pnsh 2 div add exch
/@t 1 def}if}if currentpoint 6 2 roll newpath 4 copy 4 2 roll exch moveto 6 -1 roll lineto lineto lineto closepath @t doop moveto}bdf
/mup{dup pnsh 2 div le exch pnsv 2 div le or}bdf
/rr{/@1 xdf 2. div/@2 xdf 2. div/@3 xdf
/@4 xdf/@5 xdf/@6 xdf/@7 xdf
@7 @5 eq @6 @4 eq @2 mup or or{@7 @6 @5 @4 @1 rc}
{@4 @6 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse
@5 @7 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse
@1 0 eq{/@2 @2 pnsh 2 div 2 copy gt{sub def}{0 pop4}ifelse}if
currentpoint newpath
@4 @6 add 2. div @7 moveto
@4 @7 @4 @5 @2 arcto pop4
@4 @5 @6 @5 @2 arcto pop4
@6 @5 @6 @7 @2 arcto pop4
@6 @7 @4 @7 @2 arcto pop4
closepath @1 doop moveto}ifelse}bdf
/pr{gsave newpath/pl{exch moveto/pl{exch lineto}def}def}bdf
/pl{exch lineto}bdf
/ep{dup 0 eq{{moveto}{exch lin}{}{(%%[|1|]%%)= flush}pathforall
pop grestore}{doop grestore}ifelse currentpoint newpath moveto}bdf
/gr{64. div setgray}bdf
/savescreen{ns not{/ns true def systemdict/currentcolorscreen known{currentcolorscreen/pkspf xdf/pkrot xdf/pkfreq xdf/pyspf xdf/pyrot xdf/pyfreq xdf/pmspf xdf/pmrot xdf/pmfreq xdf
/pcspf xdf/pcrot xdf/pcfreq xdf}{currentscreen/sspf xdf/srot xdf/sfreq xdf}ifelse}if}bdf
/restorescreen{/ns false def systemdict/setcolorscreen known{pcfreq pcrot/pcspf load pmfreq pmrot/pmspf load pyfreq pyrot/pyspf load
pkfreq pkrot/pkspf load setcolorscreen}{sfreq srot/sspf load setscreen}ifelse}bdf
/pat{savescreen sa8 
copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}setscreen exch not{gr}{pop}ifelse}bdf
/sg{restorescreen gr}bdf
/cpat{savescreen 10 2 roll 7 -1 roll sa8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}8 -1 roll sb8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sb8
exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}9 -1 roll sc8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sc8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}10 -1 roll sd8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sd8
exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}psuedo1 dsc 4{4 -1 roll 1 exch 64 div sub}repeat mysetcmykcolor pop pop}bdf
systemdict/setcolorscreen known{/psuedo1 lnop bdf/dsc/setcolorscreen load def}{/psuedo1{16{pop}repeat sa8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}}bdf
/bwsc{setscreen dup gr 0 exch 0 exch 64 exch 64 exch 64 exch}bdf/dsc/bwsc load def
}ifelse
systemdict/setcmykcolor known{/mysetcmykcolor /setcmykcolor load def}{/mysetcmykcolor{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse
/dc{transform round .5 sub exch round .5 sub exch itransform}bdf
/sn{userdict/smooth4 known}bdf
/x8{3 bitshift}bdf
/x4{2 bitshift}bdf
/d4{-2 bitshift}bdf
/d8{-3 bitshift}bdf
/rb{15 add -4 bitshift 1 bitshift}bdf
/db{/@7 save def/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf/@6 @5 @3 4 add mul def
dc translate scale/xdbit 1 1 idtransform abs/ydbit exch def abs def{0 0 1 ydbit add 1 10 rc clip}if
@1 0 eq @1 4 eq or{currentrgbcolor 1 setgray ydbit 0 1 ydbit add 1 2 rc setrgbcolor}if
@1 3 eq @1 7 eq or{1 setgray}{currentrgbcolor 2 index eq exch 2 index eq and exch pop{0 setgray}if}ifelse/@9 @1 0 eq @1 1 eq @1 3 eq or or dbinvertflag xor def/@13 @6 def
@2 fBitStretch or{/@10 @4 x4 def/@11 @3 x4 def/@12 @10 rb def/@13 @12 @11 mul def/@15 1 1 dtransform abs/calcY 1 index def round cvi/@14 exch def
abs/calcX 1 index def round cvi scaleby96 not{1 add}if def/@16 @15 rb def/@17 @16 @14 mul def}if
sn @13 60000 lt and @2 fBitStretch or and{mtx currentmatrix dup 1 get exch 2 get 0. eq exch 0. eq and @17 60000 lt and fBitStretch and{@16 3 bitshift @14 @9 [calcX 0 0 calcY 0 0]{@17 string @13 string
currentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4
@10 @11 @12 dup string 5 index @15 @14 @16 dup string stretch}imagemask}{@12 x8 @11 @9 [@10 0 0 @11 0 0]{@13 string
currentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4}imagemask}ifelse}{@5 3 bitshift @3 4 add @9 [@4 0 0 @3 0 2]{currentfile @6 string readhexstring pop}imagemask}ifelse
@7 restore}bdf
systemdict/setcmykcolor known{/psuedo lnop bdf/di/colorimage load def}{/routines[{.3 mul add 1}bind{.59 mul add 2}bind{.11 mul add round cvi str exch i exch put/i i 1 add def 0 0}bind]def
/psuedo{/i 0 def 0 exch 0 exch{exch routines exch get exec}forall pop pop str}bdf/bwi{pop pop image}bdf/di/bwi load def}ifelse
/cdb{/@7 save def/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf
systemdict/setcmykcolor known not{dc}if translate scale /@6 xdf
/@18 @5 dup 60000 ge{pop 60000}if string def @6 not{/str @18 0 @18 length 3 idiv getinterval def}if @4 @3 8 [@4 0 0 @3 0 0]@6{{currentfile @18 readhexstring pop}image}{{currentfile @18 readhexstring pop psuedo}false 3 di}ifelse @7 restore}bdf
/wd 16 dict def
/mfont 14 dict def
/mdf{mfont wcheck not{/mfont 14 dict def}if mfont begin xdf end}bdf
/cf{{1 index/FID ne{def}{pop pop}ifelse}forall}bdf/rf{/@1 exch def/@2 exch def
FontDirectory @2 known{cleartomark pop}{findfont dup begin dup length @1 add dict begin
cf{/Encoding macvec def}{Encoding dup length array copy/Encoding exch def
counttomark 2 idiv{Encoding 3 1 roll put}repeat}ifelse
pop
exec currentdict end end @2 exch definefont pop}ifelse}bdf
/bmbc{exch begin wd begin
/cr xdf
save
CharTable cr 6 mul 6 getinterval{}forall
/bitheight xdf/bitwidth xdf
.96 div/width xdf
Gkernmax add/XOffset xdf Gdescent add/YOffset xdf/rowbytes xdf
rowbytes 255 eq{0 0 0 0 0 0 setcachedevice}
{Gnormsize dup scale
width 0 XOffset YOffset bitwidth XOffset add bitheight YOffset add
setcachedevice
rowbytes 0 ne{
XOffset YOffset translate newpath 0 0 moveto
bitwidth bitheight scale
sn{
/xSmt bitwidth x4 def
/ySmt bitheight x4 def
/rSmt xSmt rb def
rSmt x8 ySmt true
[xSmt 0 0 ySmt neg 0 ySmt]
{rSmt ySmt mul string CharData cr get
1 index bitwidth bitheight rowbytes rSmt tso smooth4}
}{rowbytes 3 bitshift bitheight 4 add true
[bitwidth 0 0 bitheight neg 0 bitheight 2 add]
{CharData cr get}
}ifelse
imagemask
}if
}ifelse
restore
end end
}bdf
/bb{.96 exch div/Gnormsize mdf 2 index
/Gkernmax mdf 1 index/Gdescent mdf
3 index div 4 1 roll
2 index div 1. 5 2 roll
exch div 4 1 roll
4 array astore/FontBBox mdf
}bdf
/cdf{mfont/CharData get 3 1 roll put}bdf
/bf{
mfont begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/Encoding macvec def
/MFontType 0 def
/BuildChar/bmbc load def
end
mfont definefont pop
}bdf
/wi LW 1 eq{{gsave 0 0 0 0 0 0 0 0 moveto lineto lineto lineto closepath clip stringwidth grestore}bind}{/stringwidth load}ifelse def
/aps{0 get 124 eq}bdf
/xc{s75 cvs dup}bdf
/xp{put cvn}bdf
/scs{xc 3 67 put dup 0 95 xp}bdf
/sos{xc 3 79 xp}bdf
/sbs{xc 1 66 xp}bdf
/sis{xc 2 73 xp}bdf
/sob{xc 2 79 xp}bdf
/sss{xc 4 83 xp}bdf
/dd{exch 1 index add 3 1 roll add exch}bdf
/smc{moveto dup show}bdf
/ndf2{udf{dup /FontType get 0 eq{/FDepVector get{dup /FontType get 0 eq{ndf2}{dup /df2 known{begin df2 0 null put end
}{pop}ifelse}ifelse}forall}{/df2 known{dup begin df2 0 null put end}if}ifelse}{pop}ifelse}bdf
/kwn{FontDirectory 1 index known{findfont dup ndf2 exch pop}}bdf
/gl{1 currentgray sub setgray}bdf
/newmm{dup /FontType get 0 eq{dup maxlength dict begin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall currentdict end
dup /FDepVector 2 copy get[exch 6 index exch 6 index exch{newmm 3 1 roll}forall pop pop] put dup
}{/mfont 10 dict def mfont begin/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def/Encoding macvec def/df 1 index def/df2 1 array def/FontBBox [0 0 1 1] def/StyleCode 2 index def
/mbc{bcarray StyleCode get}def/BuildChar{exch begin	wd begin/cr exch def/cs s1 dup 0 cr put def df /MFontType known not{
df2 0 get null eq{df dup length 2 add dict begin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/StrokeWidth 1 0 FontMatrix idtransform pop dup nlw mul pys div ps div exch 0.012 mul 2 copy le{exch}if pop def/PaintType 2 def currentdict end
/q exch definefont df2 exch 0 exch put}if}if mbc exec end end}def end mfont}ifelse
3 index exch definefont exch pop}bdf
/mb{dup sbs kwn{0 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/mo{dup sos kwn{2 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/ms{dup sss kwn{4 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/ou{dup sos kwn{mfont/df2 known{mfont begin df2 0 null put end}if 3 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/su{dup sss kwn{mfont/df2 known{mfont begin df2 0 null put end}if 5 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/ao{/fmv true def ou}bdf/as{/fmv true def su}bdf
/vo{/fmv false def ou}bdf/vs{/fmv false def su}bdf
/c{currentrgbcolor dup 4 1 roll eq 3 1 roll eq and/gray xdf}bdf
/bcarray[{/da .03 def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da moveto show}bind dup{/da 1 ps div def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da smc c gray{gl}{1 setgray}ifelse da 2. div dup moveto show}bind
{df setfont gsave cs wi grestore setcharwidth c gray{gl}{currentrgbcolor 1 setgray}ifelse cs 0 0 smc df2 0 get setfont
gray{gl}{4 1 roll setrgbcolor}ifelse 0 0 moveto show}bind
{/da 1 ps div def/ds .05 def/da2 da 2. div def df setfont gsave cs wi 1 index 0 ne{exch ds add da2 add exch}if grestore setcharwidth
cs ds da2 add .01 add 0 smc 0 ds da2 sub translate 0 0 smc da 0 smc da da smc 0 da smc c gray{gl}{1 setgray}ifelse da 2. div dup moveto show}bind
{/da .05 def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth c cs da .01 add 0 smc 0 da translate
gray{gl}{currentrgbcolor 1 setgray 4 -1 roll}ifelse 0 0 smc gray{gl}{4 1 roll setrgbcolor}ifelse df2 0 get setfont 0 0 moveto show}bind]def
/st{1000 mul usertime add dup 2147483647 gt{2147483647 sub}if def}bdf
/the{usertime sub dup 0 lt exch -2147483648 gt and}bdf
/6a 6 array def
/2a 2 array def
/3q 3 array def
/qs{3 -1 roll sub exch 3 -1 roll sub exch}bdf
/qa{3 -1 roll add exch 3 -1 roll add exch}bdf
/qm{3 -1 roll 1 index mul 3 1 roll mul}bdf
/qn{6a exch get mul}bdf
/qA .166667 def/qB .833333 def/qC .5 def
/qx{6a astore pop
qA 0 qn qB 2 qn add   qA 1 qn qB 3 qn add
qB 2 qn qA 4 qn add   qB 3 qn qA 5 qn add
qC 2 qn qC 4 qn add   qC 3 qn qC 5 qn add}bdf
/qp{6 copy 12 -2 roll pop pop}bdf
/qc{exch qp qx curveto}bdf
/qi{{exch 4 copy 2a astore aload pop qa .5 qm newpath moveto}{exch 2 copy 6 -2 roll 2 qm qs 4 2 roll}ifelse}bdf
/qq{{qc 2a aload pop qx curveto}{exch 4 copy qs qa qx curveto}ifelse}bdf
/pt{currentpoint newpath moveto}bdf
/qf{/fillflag true def}bdf
/ec{dup 4 and 0 ne{closepath}if 1 and 0 ne{0 doop}if grestore currentpoint newpath moveto/fillflag false def}bdf
/eu{currentpoint fp{0 ep}{grestore newpath}ifelse moveto/fillflag false def}bdf
/bp{currentpoint newpath 2 copy moveto}bdf
/ef{gsave fillflag{gsave eofill grestore}if}bdf
/sm{0 exch{@1 eq{1 add}if}forall}bdf
/lshow{4 1 roll exch/@1 exch def{1 index wi pop sub 1 index sm dv 0 @1 4 -1 roll widthshow}{1 index wi pop sub
1 index dup sm 10 mul exch length 1 sub add dv dup 10. mul 0 @1 4 -1 roll 0 6 -1 roll awidthshow}ifelse}bdf
/setTxMode{sa 9 2 index put exch not{3 eq{1}{0}ifelse setgray}{pop}ifelse}bdf
/SwToSym{{}mark false/Symbol/|______Symbol 0 rf 0 sa 6 get 0 ne{pop 1}{sa 7 get 0 eq{pop 2}if}ifelse
sa 1 get 0 ne/|______Symbol
sa 4 get 0 ne{vs}{sa 3 get 0 ne{vo}{fnt}ifelse}ifelse}bdf
/mc{0 3 1 roll transform neg exch pop}bdf
/ul{dup 0 ne sa 2 get 0 ne and{gsave 0 0
/UnderlinePosition kif{mc}{ps -10 div}ifelse/UnderlineThickness kif{mc}{ps 15 div}ifelse
abs setlinewidth neg rmoveto
sa 4 get 0 ne{gsave currentlinewidth 2. div dup rmoveto currentpoint newpath moveto
2 copy rlineto stroke grestore}if
sa 3 get sa 4 get or 0 ne{gsave currentrgbcolor dup 4 1 roll eq 3 1 roll eq and{gl}{1 setgray}ifelse 2 copy rlineto stroke grestore rlineto strokepath nlw pys div setlinewidth}{rlineto}ifelse
stroke grestore}{pop}ifelse}bdf
/sgt{2 copy known{get true}{pop pop false}ifelse}bdf
/kif{currentfont dup/FontMatrix get exch/FontInfo sgt{true}{currentfont/df sgt
{dup/FontInfo sgt{3 1 roll/FontMatrix get mtx concatmatrix exch true}{pop pop pop false}
ifelse}{pop pop false}ifelse}ifelse{3 -1 roll sgt{exch true}{pop false}ifelse}{false}ifelse}bdf
/blank/Times-Roman findfont/CharStrings get/space get def
/macvec 256 array def
/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI
/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/US
macvec 0 32 getinterval astore pop
macvec 32/Times-Roman findfont/Encoding get
32 96 getinterval putinterval macvec dup 39/quotesingle put 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
macvec 128 128 getinterval astore pop
{}mark true/Courier/|______Courier 0 rf
{/Metrics 21 dict begin/zero 600 def/one 600 def/two 600 def/three 600 def/four 600 def/five 600 def/six 600 def/seven 600 def/eight 600 def
/nine 600 def/comma 600 def/period 600 def/dollar 600 def/numbersign 600 def/percent 600 def/plus 600 def/hyphen 600 def/E 600 def/parenleft 600 def/parenright 600 def/space 600 def
currentdict end def currentdict/UniqueID known{/UniqueID 16#800000 def}if/FontBBox FontBBox 4 array astore def}mark true/Helvetica/|______Seattle 1 rf
/oldsettransfer/settransfer load def
/concatprocs{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx}def
/settransfer{currenttransfer concatprocs oldsettransfer}def
/PaintBlack{{1 exch sub}settransfer gsave newpath clippath 1 setgray fill grestore}def
/od{(Rvd\001\001\000\000\177) fg copy pop txpose
1 0 mtx defaultmatrix dtransform exch atan/pa exch def
newpath clippath mark
{transform{itransform moveto}}{transform{itransform lineto}}
{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform
{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}
{{closepath}}pathforall newpath counttomark array astore/gc xdf pop ct 39 0 put
10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if
statusdict/processcolors known{statusdict begin processcolors end 4 eq{/4colors true def}if}if}bdf
/cd{}bdf
/op{/sfl false def systemdict/currentcolorscreen known{dcfreq dcrot/dcspf load dmfreq dmrot/dmspf load dyfreq dyrot/dyspf load
dkfreq dkrot/dkspf load setcolorscreen}{freq rot/spf load setscreen}ifelse savescreen
/ns false def/pm save def}bdf
/cp{not{userdict/#copies 0 put}if ma 0 gt{{t1 the{exit}if}loop}if{/copypage load exec}{/showpage load exec}ifelse pm restore}bdf
/px{0 3 1 roll tp tt}bdf
/psb{/us save def}bdf
/pse{us restore}bdf
/ct 40 string def
/nc{currentpoint initclip newpath gc{dup type dup/arraytype eq exch/packedarraytype eq or{exec}if}
forall clip newpath moveto}def
/kp{ct 0 2 index length 2 index 39 2 index put getinterval copy cvx exec mx3 currentmatrix pop}bdf
end
LW 1 eq userdict/a4small known not and{/a4small
[[300 72 div 0 0 -300 72 div -120 3381]
280 3255
{statusdict/jobstate (printing) put 0 setblink
margins
exch 196 add exch 304 add 8 div round cvi frametoroket
statusdict/jobstate (busy) put
1 setblink}
/framedevice load
60 45{dup mul exch dup mul add 1.0 exch sub}/setscreen load
{}/settransfer load/initgraphics load/erasepage load]cvx
statusdict begin bind end readonly def}if
md begin/bigs[lnop userdict/letter known{/letter load}{lnop}ifelse userdict/legal known{/legal load}{lnop}ifelse userdict/a4 known{/a4 load}{lnop}ifelse userdict/b5 known{/b5 load}{lnop}ifelse 
lnop lnop lnop /tab load/a3Size load]def
/smalls[lnop userdict/lettersmall known{/lettersmall load}{userdict/note known{/note load}{lnop}ifelse}ifelse
userdict/legal known{/legal load}{lnop}ifelse userdict/a4small known{/a4small load}{lnop}ifelse 
userdict/b5 known{/b5 load}{userdict/note known{/note load}{lnop}ifelse}ifelse lnop lnop lnop /tab load/a3Size load]def end
systemdict/currentpacking known{setpacking}if
{currentfile eexec} ( %endeexec) ok userdict/stretch known not and checkload

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec

{currentfile eexec} ( %endeexec) ok userdict/smooth4 known not and checkload
F94E00EE41A71C59E5CAEED1EDBCF23D1DBA1EE99B9BB356492923BD8B1BA83A87CEB0E07377A31FD6241E814681118E17DC7CACE570399506E6E441B871B6043831BD03EFC11DBBD8001EE2FF8CFBD485065D455A2E15AC36F1A84AD8789FA6461199C7CD14CB9FD64D4B06452B7FC0A8FC263F70F1CCB893295D4DE70ADAB771C0F84396FA98C60B11DA02ABA157298DF0A23621853BEF167443A985ADC09BEFFD51CB4D29179E2B34609EF38A49DA61F4BFC256A3DE0732D7D29754A194857B9C9E9971227AA1DD0611FBB10E44E5FF66C062D9C24ED3290529330BC317825E876929582DB0E39B9FC5EFD20CC1D4F94920EB9C534D0DA90DE70D25BC7287319CF28602B3F46633C242CAFC8905E960317E3C2FA20AB8DB06ADBAF292FC7BA2CA14EE65DF28B99CC11666B70AD33E8E1D57D63D4B89ECC615AE5747C1CA752C833D8D6DE54CD4A0350B44310555CE3BD2C615ADD27B634CDB350AF3A432CE78AACD2909A5B586F666CD87919A36DB1CBE86B3CE281DFD01CD7E1B8A18A4B415CECBFF79A5C4390A15EA77D14D6BE12BAB5A8268C3F286D0590060647CABED674443CD258F11415E866AB330A251691B61F2422A61AFE59B6B4FBDCF85ED9BA0F8E483C034089E6877FF5923698D3A0DC0EED6B9CFD32DF0839BC4EA5F6D1FCB6DD0920391E57E84745131D02D100179F4E0A68EC0A5FF6680A6F463D038B04AF63FFA13D743B995A26A743C26D387209023C91DE43DF047A16F328AC9DDC08573B38BE9EA341EA16C78EC32F3A1B36B90D95A50610F4D050EC1C33497F3F3A81A1B4C8BEF0BA84EE2FAA32DC112DAC490AF53E1749C4A0D866CAF7B893E52383B0D38065C333FB122B700D7246F7EE87D942AE3DB5C1DD77E9E76C80CC5AD63D28DFED0E229CE604673F78CD47F258FDF5BF3A3EAEC5C9BC8E482D8DBA9D268A35DA8C095A690679ED2123E8B8F5E4826FA3B199EAA5D482D4B6AA86572E387CECEB7149C8947F41D6339328A748A17F8C4AD3B0555F1E409450BA0C564F1F488BB5096EB003568D4D5EF6489897E27409547D0EE4487D30184793B0F27BD265A64BDB3EA6761569DA955620C612E718677B77D6D81B999C6298877AFE0D1D6F6F358377A8BD2402F669C64B972B3A065EF7DD4BDEFFFE17E63DB8898FA6E69166B710AAD6BA2EA9AF61E4B8C8701638D4D6E4DFFFC192AEF6BC027095C4C72D748979675BA29FAF61E75343E14E61034602E5A79CD2519796ED6A9CC4EDEA46A9B59D4A807E786B5EE46F25B0360BC8E7C12D723122CDEEF247C9776F4C99C8EBED6828AA19744B5ADF0D07D95D98B3072372388D41B0FAB1CCE2775170679575ECDCA13B22A17FE9C6605C3445F58F1A829512DAB6C528F83580C8AA53C35D605F626F5AD0B7FC1EA87D69A835E3F53A1F450FB0AF42A5772F89D92A50D10F15BDBDA409F50C0B8AB93FE8A16D029DD8BB5C480D1466735ED4D9CAF637E5ECD6C2ECB6BF3B3EFBEE7AB936D2C568E3009D156B87CACB1FB3A48A70BC91B2EC35CC9147FFB1A524E2B2F2E4E2C1B12F1C1C63768BB95CD62FEC01CBA79B9FA282DD4DF49990F27FF8EE4E2DDE2F0ACD83BC9D4BE0090192C7A799967EC4DC2D63C0835E22D4C4B366D7FDCF3A05A4B53DF780F986EF25C79B665D5C00EFF7F17C0BB6D544F9D83A7FDAC47D9C5683A656011374253C918FF6EA64749DD971B2300DD5320033E01EC591F6318CCE94CE2B81C04322EC52B624E50643B52391CCD2AB56396A2AD8E2D3CA61B80D9D4CC363B2DF7863526958CDF3497E36648406C317E58EC563E7C26149A2A3C643ADFB39A8DD92974C6D2A2A9D7B71CDF3FEBBF32BB02E7B45CF53AAEAD5E963A4AA4AF9A149A08A4EC303D5F2369977E93F54897EEAD31B06C5845D63F49D65F8E5573962241A57CCD717CE6CA8C784A11192943616EA059B51BC38429E18D0121FCBB6FBD5D909B0D89E616C66DEF6A0F165A7030BD911A1B120468329CBB006C8D37720E531CF31E878CB4AAAC137633675C3D546F5162487AB35F470C042BDEB945E0F2532BF92AA6FD53434440221ECD3533A7AA89900CB19EFE2CD872DF8B7969AF0D3B72BF31DC5DD69CA6460966F61AB17CB507964098DBA3AF122EEC3128A9BAFE1034493F372B36BD1351205E9043A67C544402D8BCE24358C8A5CE33867A00794CF7097D59C88279A11EE9C854E7E7AAE881F9828C569D208F5F33375F59E9A3818CFA38AAD0CBFBA32F9F44A8BB79DE4C40E3886457C16DA4A27953AA1E99472E35F2323F0BAA5E37DC28CBA46FEFB73B190016055ADD4D27615D748499A0E1C4B8C7EC339C1C4D95A813A85918A8D01EEB485DDCDCEA6EA3F2C2A9D85C139CD90CCB352634F9AFE836BCAC0C274E352BA2071B5269D5DE4CCDE3FF990CBA974980C7332AE1545A9C60D5D1459D3AE95C1AC065733AF14FADB440A110DD539563B8D850CD0704C52F3F7CCCB53630D776560CBD22D8FF08F5B354487A171AEC15F5F54DE9CAB668BCAC573E788D92762EF63E76087005F4AC2D02E0CAC173C11BE62ACE5DC4D3374F2F9746C9981E125FF9AB8CAE76D13039E2C54DFD708E028A619EA1ED78E6B46F06DF0D0B74BBEDD8C190C7C0CEBDE8F7A4888CC36575313478DD2CFE392E9BB7B2416955D44B7024A3BA43FBF37293B386D64746D7748895411D243FAEC50638F2AA33337D7FA018ADDAC5835A0DDFAE99AD6299DFB4CA6872C59853E3AC12FC9E3D26629C5B49CF844C87B3C4BFBE3074E3A1CE6984758C20C661084381CD6B4582D84F19C0000B5FC0DCB42B567E396031601C095D7016283EBE5F13CD8A3A374A74DDBBABD36081149F8BC242085F2F7297CC97FD3B8BAD206D8AC9707A39ECCC7963B522E08DA391A1EF12DD4D746DBDDDCC0834F88160CF189A9645567CEC2F023A571AF0DFD15DB85B744C28C000DF53B05F8F210841F6E87A04F20C777B7C0BE6182BE2E90226E5301A12532A745F2FAAA81637CF11B78CD2B99A4D18B862D6C5DBD31793FB16A2D9AAD376D4484D75AA833D0068B1D34DB74E3302480854E3B5484D8A47E39A89A2FA927BC3641EA7F8E004FDE4C2F08D40D99F1ACB47CAF6887629BF6DFE12968D297596D28CE0CF148B12E7DCB49FB94F5ADBD214C3A6CE1E249831BA9EB8A189F2CE1ABE39A7B537253E369A508A2AF2ADB9463F9B56BBBFF31D535FF997F537C6675C196E7ECBD493F652FA7CC6D9C1CA3379BFDB5AF7513C6E834054494296B91A6EE800114363D5D5D0759F41B4DECB653B9DE3E94583579EF549ED5F3FAFB12661ABC0C57A332406517ED3454EDED34B386C60F78DC976266E0EAF54FC245FB0E3EFC8016236436B599C1C97A8C5E0AC8F7836161873C71F01ED9CC25C236420F41FD8277993D3959205912FA0927B59E3DAE7377D82079447D6E41EE5AEC0DFFF79AF8F4ED47F17EE708FEA45877860D56F8CBCE65A061E8E1CA4A5FBAF0E13429A7F0ADB6F178FA449F46CC539BBC0107E3A53B1C362A04B20E6D721E7E6E1E4976A11DDC98C7614D22B53DFBB6DAE533AC9BE882021A735C30DAA4A44AED09F49A390E8CFF59BD9C30667AF21B03EC5CEBD5C2C3AA2769E8D714191A48E7DDF50B13D1560E82EFB65FCE601AE9E8C351FBA1DED80B7351314E7F9F9A784BFE3759B7E322A84E7B51F9DC5F5D9C8050CD79B27C0A4B0DD68A3C27A948AD6858E35B960D2DEA838C479CAEA83B1A912174ACB2100E55E7A14892D7A9B3711FF0B20065C1995B49E1F23464A92DD140642E3A7B1973849E64D1A3CF60000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec

%%EndProcSet

%%EndProlog
%%BeginDocumentSetup
md begin
F sgd
svsc

F T 0 0 730 552 -31 -30 761 582 100 72 72 1 F F F F F T F F psu
(Andrew; document: Threads paper \(Times\))jn
0 mf
od
%%EndDocumentSetup
%%Page: ? 1
op
0 0 730 552 fr
0 0 xl
1 1 pen
0 0 gm
(nc 0 0 730 552 6 rc)kp
64 gr
-31 -30 -30 -29 4 rc
31 30 xl
psb
0 setgray

1 -1 scale

144 -624 translate

/wp$xorig 144 def

/wp$yorig 168 def

/wp$y 27 def

/wp$x 99 def

/wp$page 1 def

/wp$fpage (1) def

/wp$date (2/11/93) def

/wp$time (10:30 AM) def

/wp$box { newpath 0 0 moveto wp$x 0 rlineto 0 wp$y rlineto wp$x neg 0 rlineto closepath } def

wp$box clip newpath

/logo {gsave % create a 1-by-1 digital logo

  /Helvetica-Bold findfont

  .6 .75 matrix defaultmatrix scale makefont setfont

  /box {gsave % paint a character white on gray box

    newpath

    0.2 setgray

    0 0 moveto

    .425 0 lineto

    .425 1 lineto

    0 1 lineto

    closepath

    fill

    word exch 1 getinterval

    1 setgray

    dup stringwidth pop .425 exch sub 2 div .225 moveto

    show

    grestore} def

  /boxstr {gsave

    /word exch def

    word length 2 div 1 exch div 1 scale

    0 1 word length 1 sub {box .5 0 translate} for

    grestore} def

  (digital) boxstr

  grestore} def

wp$x wp$y scale

logo

pse
-31 -30 xl
623 114 gm
(nc 0 0 730 552 6 rc)kp
F 1 setTxMode
1 fs
bu fc
{}mark T /Times-Bold /|______Times-Bold 0 rf
bn
12 fz
bu fc
2 F /|______Times-Bold fnt
bn
3.11218 0. 32 0.31121 0.(Systems Research Center)awidthshow
637 114 gm
0 fs
bu fc
{}mark T /Times-Roman /|______Times-Roman 0 rf
bn
bu fc
2 F /|______Times-Roman fnt
bn
-0.14460 0.(130 Lytton Avenue)ashow
651 114 gm
-0.08871 0.(Palo Alto, California 94301)ashow
93 264 gm
1 fs
18 fz
bu fc
2 F /|______Times-Bold fnt
bn
5.99990 0.(35)ashow
154 112 gm
0 gr
154 439 lin
207 122 gm
F 1 setTxMode
8.57009 0. 32 0.85700 0.(An Introduction to Programming)awidthshow
227 216 gm
8.33831 0. 32 0.83383 0.(with Threads)awidthshow
268 112 gm
0 gr
268 439 lin
317 203 gm
F 1 setTxMode
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
3.72543 0. 32 0.37254 0.(by Andrew D. Birrell)awidthshow
436 112 gm
0 gr
436 439 lin
450 230 gm
F 1 setTxMode
12 fz
bu fc
2 F /|______Times-Bold fnt
bn
3.03878 0. 32 0.30387 0.(January 6, 1989)awidthshow
455 112 gm
0 gr
455 439 lin
F T cp
%%Page: ? 2
op
31 30 761 582 fr
F F cp
%%Page: ? 3
op
31 30 761 582 fr
0 0 xl
1 1 pen
683 124 gm
(nc 31 30 761 582 6 rc)kp
683 487 lin
124 126 gm
F 1 setTxMode
0 fs
bu fc
{}mark T /Helvetica /|______Helvetica 0 rf
bn
18 fz
bu fc
2 F /|______Helvetica fnt
bn
-0.04879 0.(An Introduction to Programming with Threads)ashow
156 126 gm
10 fz
bu fc
2 F /|______Helvetica fnt
bn
-0.06185 0.(Andrew D. Birrell)ashow
185 124 gm
0 gr
185 487 lin
206 126 gm
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.10839 0. 32 0.11083 0.(This paper provides an introduction to writing concurrent programs with \322threads\323. A threads)awidthshow
216 126 gm
2.73605 0. 32 0.27360 0.(facility allows you to write programs with multiple simultaneous points of execution,)awidthshow
226 126 gm
3.99856 0. 32 0.39985 0.(synchronizing through shared memory. The paper describes the basic thread and)awidthshow
236 126 gm
1.34078 0. 32 0.13407 0.(synchronization primitives, then for each primitive provides a tutorial on how to use it. The)awidthshow
246 126 gm
1.40045 0. 32 0.14004 0.(tutorial sections provide advice on the best ways to use the primitives, give warnings about)awidthshow
256 126 gm
1.35589 0. 32 0.13558 0.(what can go wrong and offer hints about how to avoid these pitfalls. The paper is aimed at)awidthshow
266 126 gm
2.42721 0. 32 0.24272 0.(experienced programmers who want to acquire practical expertise in writing concurrent)awidthshow
276 126 gm
0.34564 0.(programs.)ashow
294 126 gm
2.13928 0. 32 0.21392 0.(CR categories and Subject Descriptors: D.1.4 [)awidthshow
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
4.20440 0. 32 0.42044 0.(Programming Techniques)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
2.94265 0. 32 0.29426 0.(]: Concurrent)awidthshow
304 126 gm
3.08044 0. 32 0.30804 0.(Programming; D.3.3 [)awidthshow
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
4.88769 0. 32 0.48876 0.(Programming Languages)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
3.35189 0. 32 0.33518 0.(]: Language Constructs\321)awidthshow
2 fs
bu fc
{}mark T /Times-Italic /|______Times-Italic 0 rf
bn
bu fc
2 F /|______Times-Italic fnt
bn
0.71473 0.(Concurrent)ashow
314 126 gm
2.40142 0. 32 0.24014 0.(programming structures)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.90576 0. 32 0.09057 0.(; D.4.1 [)awidthshow
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
2.35931 0. 32 0.23593 0.(Operating Systems)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.84936 0. 32 0.18493 0.(]: Process Management)awidthshow
332 126 gm
0.60623 0. 32 0.06062 0.(General Terms: Design, Languages, Performance)awidthshow
350 126 gm
0.88485 0. 32 0.08848 0.(Additional Key Words and Phrases: Threads, Concurrency, Multi-processing, Synchronization)awidthshow
364 124 gm
0 gr
364 487 lin
439 126 gm
F 1 setTxMode
10 fz
bu fc
2 F /|______Helvetica fnt
bn
(CONTENTS)show
457 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.43865 0.(Introduction......................................................................................................)ashow
457 174 gm
( )show
457 481 gm
(1)show
469 126 gm
-0.13758 0.(Why use concurrency?)ashow
469 216 gm
0.50573 0.(........................................................................................)ashow
469 215 gm
( )show
469 481 gm
(2)show
481 126 gm
-0.07398 0.(The design of a thread facility)ashow
481 246 gm
0.50648 0.(..............................................................................)ashow
481 244 gm
( )show
481 481 gm
(3)show
493 126 gm
-0.07913 0.(Using a Mutex: accessing shared data)ashow
493 276 gm
0.50746 0.(....................................................................)ashow
493 274 gm
( )show
493 481 gm
(7)show
505 126 gm
1.12365 0. 32 0.11236 0.(Using a Condition variable: scheduling shared resources..........................................)awidthshow
505 348 gm
( )show
505 476 gm
(14)show
517 126 gm
0.19515 0. 32 0.01951 0.(Using Fork: working in parallel)awidthshow
517 255 gm
0.50694 0.(.........................................................................)ashow
517 254 gm
( )show
517 476 gm
(22)show
529 126 gm
0.04943 0. 32 0.00494 0.(Using Alert: diverting the flow of control)awidthshow
529 294 gm
0.50846 0.(............................................................)ashow
529 292 gm
( )show
529 476 gm
(27)show
541 126 gm
-0.15158 0.(Additional techniques)ashow
541 213 gm
0.50581 0.(.......................................................................................)ashow
541 211 gm
( )show
541 476 gm
(28)show
553 126 gm
-0.06021 0.(Building your program)ashow
553 219 gm
0.50595 0.(.....................................................................................)ashow
553 217 gm
( )show
553 476 gm
(30)show
565 126 gm
-0.08026 0.(Concluding remarks)ashow
565 207 gm
0.50567 0.(.........................................................................................)ashow
565 206 gm
( )show
565 476 gm
(31)show
577 126 gm
0.43775 0.(References......................................................................................................)ashow
577 168 gm
( )show
577 476 gm
(31)show
589 126 gm
-0.11163 0.(Appendix: other thread designs)ashow
589 249 gm
0.50674 0.(...........................................................................)ashow
589 248 gm
( )show
589 476 gm
(33)show
F T cp
%%Page: ? 4
op
31 30 761 582 fr
0 0 xl
1 1 pen
478 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
1 fs
10 fz
bu fc
2 F /|______Times-Bold fnt
bn
currentfont SwToSym
3.61602 0. 32 0.36160 0.(\323)awidthshow
setfont
3.61602 0. 32 0.36160 0.( Digital Equipment Corporation 1989)awidthshow
502 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.20681 0. 32 0.12068 0.(This work may not be copied or reproduced in whole or in part for any commercial)awidthshow
514 126 gm
0.81176 0. 32 0.08117 0.(purpose. Permission to copy in whole or in part without payment of fee is granted for)awidthshow
526 126 gm
-0.02908 0.(non-profit educational and research purposes provided that all such whole or partial copies)ashow
538 126 gm
1.68350 0. 32 0.16835 0.(include the following: a notice that such copying is by permission of the Systems)awidthshow
550 126 gm
2.54669 0. 32 0.25466 0.(Research Center of Digital Equipment Corporation in Palo Alto, California; an)awidthshow
562 126 gm
2.05932 0. 32 0.20593 0.(acknowledgement of the authors and individual contributors to the work; and all)awidthshow
574 126 gm
0.95169 0. 32 0.09516 0.(applicable portions of the copyright notice. Copying, reproducing, or republishing for)awidthshow
586 126 gm
0.72586 0. 32 0.07258 0.(any other purpose shall require a license with payment of fee to the Systems Research)awidthshow
598 126 gm
-0.02079 0.(Center. All rights reserved.)ashow
F T cp
%%Page: ? 5
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 247 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.35519 0. 32 0.23551 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
{}mark T /Helvetica-Bold /|______Helvetica-Bold 0 rf
bn
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.41755 0.(\312\312\312\312\3121)ashow
118 126 gm
10 fz
bu fc
2 F /|______Helvetica fnt
bn
-0.24049 0.(INTRODUCTION)ashow
136 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.01812 0.(Many experimental operating systems, and some commercial ones, have recently included)ashow
148 126 gm
1.39465 0. 32 0.13946 0.(support for concurrent programming. The most popular mechanism for this is some)awidthshow
160 126 gm
0.23010 0. 32 0.02301 0.(provision for allowing multiple lightweight \322threads\323 within a single address space, used)awidthshow
172 126 gm
0.18478 0. 32 0.01847 0.(from within a single program.)awidthshow
0 -3 rm
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
(1)show
184 144 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
2.62588 0. 32 0.26258 0.(Programming with threads introduces new difficulties even for experienced)awidthshow
196 126 gm
0.58212 0. 32 0.05821 0.(programmers. Concurrent programming has techniques and pitfalls that do not occur in)awidthshow
208 126 gm
0.19577 0. 32 0.01957 0.(sequential programming. Many of the techniques are obvious, but some are obvious only)awidthshow
220 126 gm
0.32501 0. 32 0.03250 0.(with hindsight. Some of the pitfalls are comfortable \(for example, deadlock is a pleasant)awidthshow
232 126 gm
0.31127 0. 32 0.03112 0.(sort of bug\321your program stops with all the evidence intact\), but some take the form of)awidthshow
244 126 gm
-0.05380 0.(insidious performance penalties.)ashow
256 144 gm
1.85867 0. 32 0.18586 0.(The purpose of this paper is to give you an introduction to the programming)awidthshow
268 126 gm
0.26184 0. 32 0.02618 0.(techniques that work well with threads, and to warn you about techniques or interactions)awidthshow
280 126 gm
-0.04641 0.(that work out badly. It should provide the experienced sequential programmer with enough)ashow
292 126 gm
1.21490 0. 32 0.12149 0.(hints to be able to build a substantial multi-threaded program that works\321correctly,)awidthshow
304 126 gm
0.14465 0. 32 0.01446 0.(efficiently, and with a minimum of surprises.)awidthshow
316 144 gm
-0.01034 0.(A \322thread\323 is a straightforward concept: a single sequential flow of control. In a high-)ashow
328 126 gm
-0.03315 0.(level language you normally program a thread using procedures, where the procedure calls)ashow
340 126 gm
0.90286 0. 32 0.09028 0.(follow the traditional stack discipline. Within a single thread, there is at any instant a)awidthshow
352 126 gm
-0.00100 0.(single point of execution. The programmer need learn nothing new to use a single thread.)ashow
364 144 gm
0.69961 0. 32 0.06996 0.(Having \322multiple threads\323 in a program means that at any instant the program has)awidthshow
376 126 gm
0.10330 0. 32 0.01033 0.(multiple points of execution, one in each of its threads. The programmer can mostly view)awidthshow
388 126 gm
0.36972 0. 32 0.03697 0.(the threads as executing simultaneously, as if the computer were endowed with as many)awidthshow
400 126 gm
0.16815 0. 32 0.01681 0.(processors as there are threads. The programmer is required to decide when and where to)awidthshow
412 126 gm
0.94558 0. 32 0.09455 0.(create multiple threads, or to accept such decisions made for him by implementers of)awidthshow
424 126 gm
2.07275 0. 32 0.20727 0.(existing library packages or runtime systems. Additionally, the programmer must)awidthshow
436 126 gm
1.87179 0. 32 0.18717 0.(occasionally be aware that the computer might not in fact execute all his threads)awidthshow
448 126 gm
0.06809 0.(simultaneously.)ashow
460 144 gm
-0.02085 0.(Having the threads execute within a \322single address space\323 means that the computer\325s)ashow
472 126 gm
0.32318 0. 32 0.03231 0.(addressing hardware is configured so as to permit the threads to read and write the same)awidthshow
484 126 gm
0.45166 0. 32 0.04516 0.(memory locations. In a high-level language, this usually corresponds to the fact that the)awidthshow
496 126 gm
0.26382 0. 32 0.02638 0.(off-stack \(global\) variables are shared among all the threads of the program. Each thread)awidthshow
508 126 gm
0.06851 0. 32 0.00685 0.(executes on a separate call stack with its own separate local variables. The programmer is)awidthshow
520 126 gm
0.13946 0. 32 0.01394 0.(responsible for using the synchronization mechanisms of the thread facility to ensure that)awidthshow
532 126 gm
-0.03355 0.(the shared memory is accessed in a manner that will give the correct answer.)ashow
544 144 gm
-0.00073 0.(Thread facilities are always advertised as being \322lightweight\323. This means that thread)ashow
556 126 gm
0.27389 0. 32 0.02738 0.(creation, existence, destruction and synchronization primitives are cheap enough that the)awidthshow
568 126 gm
-0.02384 0.(programmer will use them for all his concurrency needs.)ashow
580 144 gm
0.57281 0. 32 0.05728 0.(Please be aware that I am presenting you with a selective, biased and idiosyncratic)awidthshow
592 126 gm
-0.02348 0.(collection of techniques. Selective, because an exhaustive survey would be premature, and)ashow
604 126 gm
0.42312 0. 32 0.04231 0.(would be too exhausting to serve as an introduction\321I will be discussing only the most)awidthshow
616 126 gm
1.03927 0. 32 0.10392 0.(important thread primitives, omitting features such as per-thread context information.)awidthshow
628 126 gm
1.82022 0. 32 0.18202 0.(Biased, because I present examples, problems and solutions in the context of one)awidthshow
-4096 -4096 gm
0 gr
-4095 -4095 lin
6 25 lw
648 126 gm
648 269 lin
25 6 lw
1 1 lw
659 126 gm
F 1 setTxMode
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.36199 0.(1)ashow
0 3 rm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.14395 0. 32 0.11439 0.( Throughout this paper I use the word \322process\323 only when I mean a single flow of control)awidthshow
672 126 gm
1.52053 0. 32 0.15205 0.(associated one-to-one with an address space, since this now seems to be the most common)awidthshow
682 126 gm
0.42251 0. 32 0.04225 0.(usage of that word.)awidthshow
F T cp
%%Page: ? 6
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.34796 0.(2\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.37945 0. 32 0.23794 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.34652 0. 32 0.03465 0.(particular set of choices of how to design a threads facility\321the choices we made in the)awidthshow
130 126 gm
0.92300 0. 32 0.09230 0.(Topaz system at Digital\325s Systems Research Center \(SRC\). Idiosyncratic, because the)awidthshow
142 126 gm
1.21932 0. 32 0.12193 0.(techniques presented here derive from my personal experience of programming with)awidthshow
154 126 gm
0.45898 0. 32 0.04589 0.(threads over the last ten years\321I have not attempted to represent colleagues who might)awidthshow
166 126 gm
0.20385 0. 32 0.02038 0.(have different opinions about which programming techniques are \322good\323 or \322important\323.)awidthshow
178 126 gm
0.50720 0. 32 0.05072 0.(Nevertheless, I believe that an understanding of the ideas presented here will serve as a)awidthshow
190 126 gm
-0.03659 0.(sound basis for programming with concurrent threads.)ashow
202 144 gm
0.79406 0. 32 0.07940 0.(Throughout the paper I use examples written in Modula-2+ [12]. These should be)awidthshow
214 126 gm
0.07369 0. 32 0.00736 0.(readily understandable by anyone familiar with the Algol and Pascal family of languages.)awidthshow
226 126 gm
0.43014 0. 32 0.04301 0.(The examples are intended to illustrate points about concurrency and synchronization\321)awidthshow
238 126 gm
0.06637 0. 32 0.00663 0.(don\325t try to use these actual algorithms in real programs.)awidthshow
250 144 gm
0.61798 0. 32 0.06179 0.(Threads are not a tool for automatic parallel decomposition, where a compiler will)awidthshow
262 126 gm
0.23254 0. 32 0.02325 0.(take a visibly sequential program and generate object code to utilize multiple processors.)awidthshow
274 126 gm
0.04730 0. 32 0.00473 0.(That is an entirely different art, not one that I will discuss here.)awidthshow
310 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.25653 0.(WHY USE CONCURRENCY?)ashow
328 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.60470 0. 32 0.06047 0.(Life would be simpler if you didn\325t need to use concurrency. But there are a variety of)awidthshow
340 126 gm
0.55862 0. 32 0.05586 0.(forces pushing towards its use. The most recent is the advent of multi-processors. With)awidthshow
352 126 gm
-0.01679 0.(these machines, there really are multiple simultaneous points of execution, and threads are)ashow
364 126 gm
0.04425 0. 32 0.00442 0.(an attractive tool for allowing a program to take advantage of the available hardware. The)awidthshow
376 126 gm
0.70388 0. 32 0.07038 0.(alternative, with most conventional operating systems, is to configure your program as)awidthshow
388 126 gm
-0.03533 0.(multiple separate processes, running in separate address spaces. This tends to be expensive)ashow
400 126 gm
0.20507 0. 32 0.02050 0.(to set up, and the costs of communicating between address spaces are often high, even in)awidthshow
412 126 gm
1.16577 0. 32 0.11657 0.(the presence of shared segments. By using a lightweight multi-threading facility, the)awidthshow
424 126 gm
1.32583 0. 32 0.13258 0.(programmer can utilize the processors cheaply. This seems to work well in systems)awidthshow
436 126 gm
0.09002 0. 32 0.00900 0.(having up to about 10 processors, rather than 1000 processors.)awidthshow
448 144 gm
1.07421 0. 32 0.10742 0.(A second area where threads are useful is in driving slow devices such as disks,)awidthshow
460 126 gm
1.01440 0. 32 0.10144 0.(networks, terminals and printers. In these cases an efficient program should be doing)awidthshow
472 126 gm
0.02792 0. 32 0.00279 0.(some other useful work while waiting for the device to produce its next event \(such as the)awidthshow
484 126 gm
0.17822 0. 32 0.01782 0.(completion of a disk transfer or the receipt of a packet from the network\). As we will see)awidthshow
496 126 gm
0.01785 0. 32 0.00178 0.(later, this can be programmed quite easily with threads by adopting an attitude that device)awidthshow
508 126 gm
0.75759 0. 32 0.07575 0.(requests are all sequential \(i.e. they suspend execution of the invoking thread until the)awidthshow
520 126 gm
-0.04512 0.(request completes\), and that the program meanwhile does other work in other threads.)ashow
532 144 gm
0.87707 0. 32 0.08770 0.(A third source of concurrency is human users. Humans are actually quite good at)awidthshow
544 126 gm
0.22018 0. 32 0.02201 0.(doing two or three things at a time, and seem to get offended if their computer cannot do)awidthshow
556 126 gm
2.11791 0. 32 0.21179 0.(as much. Again, threads are a convenient way of programming this. The typical)awidthshow
568 126 gm
0.18310 0. 32 0.01831 0.(arrangement of a modern window system is that each time the user invokes an action \(by)awidthshow
580 126 gm
0.67245 0. 32 0.06724 0.(clicking a button with the mouse, for example\), a separate thread is used to implement)awidthshow
592 126 gm
0.91812 0. 32 0.09181 0.(the action. If the user invokes multiple actions, multiple threads will perform them in)awidthshow
604 126 gm
0.15945 0. 32 0.01594 0.(parallel. \(Note that the implementation of the window system probably also uses a thread)awidthshow
616 126 gm
0.07858 0. 32 0.00785 0.(to watch the mouse actions themselves, since the mouse is an example of a slow device.\))awidthshow
628 144 gm
0.42709 0. 32 0.04270 0.(A final source of concurrency appears when building a distributed system. Here we)awidthshow
640 126 gm
1.00280 0. 32 0.10028 0.(frequently encounter shared network servers \(such as a file server or a spooling print)awidthshow
652 126 gm
1.26052 0. 32 0.12605 0.(server\), where the server is willing to service requests from multiple clients. Use of)awidthshow
664 126 gm
1.53793 0. 32 0.15379 0.(multiple threads allows the server to handle clients\325 requests in parallel, instead of)awidthshow
676 126 gm
-0.02952 0.(artificially serializing them \(or creating one server process per client, at great expense\).)ashow
F T cp
%%Page: ? 7
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 247 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.35519 0. 32 0.23551 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.41755 0.(\312\312\312\312\3123)ashow
118 144 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.21850 0. 32 0.02185 0.(Sometimes you can deliberately add concurrency to your program in order to reduce)awidthshow
130 126 gm
0.07202 0. 32 0.00720 0.(the latency of operations \(the elapsed time between calling a procedure and the procedure)awidthshow
142 126 gm
0.05432 0. 32 0.00543 0.(returning\). Often, some of the work incurred by a procedure can be deferred, since it does)awidthshow
154 126 gm
0.01785 0. 32 0.00178 0.(not affect the result of the procedure. For example, when you add or remove something in)awidthshow
166 126 gm
0.50765 0. 32 0.05076 0.(a balanced tree you could happily return to the caller before re-balancing the tree. With)awidthshow
178 126 gm
-0.02772 0.(threads you can achieve this easily: do the re-balancing in a separate thread. If the separate)ashow
190 126 gm
0.20263 0. 32 0.02026 0.(thread is scheduled at a lower priority, then the work can be done at a time when you are)awidthshow
202 126 gm
0.51193 0. 32 0.05119 0.(less busy \(for example, when waiting for user input\). Adding threads to defer work is a)awidthshow
214 126 gm
1.59347 0. 32 0.15934 0.(powerful technique, even on a uni-processor. Even if the same total work is done,)awidthshow
226 126 gm
-0.03611 0.(reducing latency can improve the responsiveness of your program.)ashow
262 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.22596 0.(THE DESIGN OF A THREAD FACILITY)ashow
280 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.30212 0. 32 0.03021 0.(We can\325t discuss how to program with threads until we agree on the primitives provided)awidthshow
292 126 gm
0.23101 0. 32 0.02310 0.(by a multi-threading facility. The various systems that support threads offer quite similar)awidthshow
304 126 gm
0.96908 0. 32 0.09690 0.(facilities, but there is a lot of diversity in the details. In general, there are four major)awidthshow
316 126 gm
-0.00799 0.(mechanisms: thread creation, mutual exclusion, waiting for events, and some arrangement)ashow
328 126 gm
0.26168 0. 32 0.02616 0.(for getting a thread out of an unwanted long-term wait. The discussions in the rest of the)awidthshow
340 126 gm
0.35614 0. 32 0.03561 0.(paper are organized around the particular primitives provided by the SRC thread facility)awidthshow
352 126 gm
2.24334 0. 32 0.22433 0.([4], and I describe here their detailed semantics. In the appendix I describe the)awidthshow
364 126 gm
0.03143 0. 32 0.00314 0.(corresponding parts of the thread facilities provided by some other systems, and how they)awidthshow
376 126 gm
0.29159 0. 32 0.02915 0.(relate to the SRC facilities.)awidthshow
404 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.33641 0.(Thread creation)ashow
422 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.27648 0. 32 0.02764 0.(A thread is created by calling \322Fork\323, giving it a procedure and an argument record. The)awidthshow
434 126 gm
-0.04023 0.(effect of \322Fork\323 is to create a new thread, and start that thread executing asynchronously at)ashow
446 126 gm
1.15966 0. 32 0.11596 0.(an invocation of the given procedure with the given arguments. When the procedure)awidthshow
458 126 gm
0.05264 0. 32 0.00526 0.(returns, the thread dies. Usually, \322Fork\323 returns to its caller a handle on the newly created)awidthshow
470 126 gm
-0.07429 0.(thread. The handle can be presented to a \322Join\323 procedure. \322Join\323 waits for the given thread)ashow
482 126 gm
0.00640 0. 32 0.00064 0.(to terminate, and returns the result of the given thread\325s initial procedure. The SRC thread)awidthshow
494 126 gm
-0.01797 0.(creation facilities are as follows.)ashow
0 -3 rm
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
(2)show
518 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30953 0.(TYPE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.26411 0.( Thread;)ashow
530 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20999 0.(TYPE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15272 0.( Forkee = )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22195 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12425 0.(\()ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22399 0.(REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10711 0.(\): )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22399 0.(REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
542 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15736 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10467 0.( Fork\(proc: Forkee; arg: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15882 0.(REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11677 0.(\): Thread;)ashow
554 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22703 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14891 0.( Join\(thread: Thread\): )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22912 0.(REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
578 144 gm
1.31332 0. 32 0.13133 0.(As a simple example of their use, the following program fragment executes the)awidthshow
590 126 gm
0.03097 0. 32 0.00309 0.(procedure calls \322a\(x\)\323 and \322b\(y\)\323 in parallel, and assigns the result of calling \322a\(x\)\323 to the)awidthshow
602 126 gm
-0.17308 0.(variable \322q\323.)ashow
-4096 -4096 gm
0 gr
-4095 -4095 lin
6 25 lw
668 126 gm
668 269 lin
25 6 lw
1 1 lw
679 126 gm
F 1 setTxMode
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.17156 0.(2)ashow
0 3 rm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.50262 0. 32 0.05026 0.(The type )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.20013 0.(REFANY)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.70236 0. 32 0.07023 0.( means a dynamically typed pointer to garbage-collected storage.)awidthshow
F T cp
%%Page: ? 8
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.34796 0.(4\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.37945 0. 32 0.23794 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 180 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.17179 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11299 0.( t: Thread;)ashow
130 180 gm
0.23223 0. 32 0.02322 0.(t := Fork\(a, x\);)awidthshow
142 180 gm
0.05111 0. 32 0.00511 0.(p := b\(y\);)awidthshow
154 180 gm
-0.02478 0.(q := Join\(t\);)ashow
178 144 gm
-0.01071 0.(In practice, \322Join\323 is not called very much at SRC, and some other thread facilities do)ashow
190 126 gm
0.35507 0. 32 0.03550 0.(not provide \322Join\323 as a primitive. Most forked threads are permanent d\276mon threads, or)awidthshow
202 126 gm
0.14907 0. 32 0.01490 0.(have no results, or communicate their results by some synchronization arrangement other)awidthshow
214 126 gm
0.23757 0. 32 0.02375 0.(than \322Join\323. If a thread\325s initial procedure has returned and there is no subsequent call of)awidthshow
226 126 gm
-0.06126 0.(\322Join\323, the thread quietly evaporates.)ashow
254 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.34179 0. 32 0.03417 0.(Mutual exclusion)awidthshow
272 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
-0.00773 0.(The simplest way that threads interact is through access to shared memory. In a high-level)ashow
284 126 gm
-0.00144 0.(language, this is usually expressed as access to global variables. Since threads are running)ashow
296 126 gm
0.89248 0. 32 0.08924 0.(in parallel, the programmer must explicitly arrange to avoid errors arising when more)awidthshow
308 126 gm
0.82550 0. 32 0.08255 0.(than one thread is accessing the shared variables. The simplest tool for doing this is a)awidthshow
320 126 gm
0.25634 0. 32 0.02563 0.(primitive that offers mutual exclusion \(sometimes called critical sections\), specifying for)awidthshow
332 126 gm
0.15625 0. 32 0.01562 0.(a particular region of code that only one thread can execute there at any time. In the SRC)awidthshow
344 126 gm
-0.04560 0.(design, this is achieved with the data type \322Mutex\323 and the language\325s \322)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06970 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04769 0.(\323 construct.)ashow
368 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09182 0.(TYPE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08540 0.( Mutex;)ashow
380 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.07998 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.14511 0. 32 0.01451 0.( mutex )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.08486 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.14633 0. 32 0.01463 0.( ... statements ... )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.08050 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
404 144 gm
0.51483 0. 32 0.05148 0.(A mutex has two states: locked and unlocked, initially unlocked. The )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.20220 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.56716 0. 32 0.05671 0.( clause)awidthshow
416 126 gm
1.31805 0. 32 0.13180 0.(locks the mutex, then executes the contained statements, then unlocks the mutex. A)awidthshow
428 126 gm
0.80261 0. 32 0.08026 0.(thread executing inside the )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.30397 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.67642 0. 32 0.06764 0.( clause is said to \322hold\323 the mutex. If another thread)awidthshow
440 126 gm
0.16479 0. 32 0.01647 0.(attempts to lock the mutex when it is already locked, the second thread blocks \(enqueued)awidthshow
452 126 gm
0.23330 0. 32 0.02333 0.(on the mutex\) until the mutex is unlocked.)awidthshow
464 144 gm
0.61004 0. 32 0.06100 0.(The programmer can achieve mutual exclusion on a set of variables by associating)awidthshow
476 126 gm
0.47805 0. 32 0.04780 0.(them with a mutex, and accessing the variables only from a thread that holds the mutex)awidthshow
488 126 gm
0.06729 0. 32 0.00672 0.(\(i.e., from a thread executing inside a )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.02990 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.06546 0. 32 0.00654 0.( clause that has locked the mutex\). This is the)awidthshow
500 126 gm
0.54183 0. 32 0.05418 0.(basis of the notion of )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.20222 0.(monitors)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.65124 0. 32 0.06512 0.(, first described by Tony Hoare [9]. For example, in the)awidthshow
512 126 gm
1.16180 0. 32 0.11618 0.(following fragment the mutex \322m\323 is associated with the global variable \322head\323; the)awidthshow
524 126 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.10726 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.28839 0. 32 0.02883 0.( clause provides mutual exclusion for adding the local variable \322newElement\323 to a)awidthshow
536 126 gm
-0.06449 0.(linked list whose head is \322head\323.)ashow
560 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02626 0.(TYPE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01675 0.( List = )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02568 0.(REF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02841 0.(RECORD)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01608 0.( ch: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02919 0.(CHAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01646 0.(; next: List )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02877 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
572 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08406 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06243 0.( m: Thread.Mutex;)ashow
584 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09750 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06297 0.( head: List;)ashow
608 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
620 198 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14405 0.(newElement^.next := head;)ashow
632 198 gm
-0.11398 0.(head := newElement;)ashow
644 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
668 144 gm
0.82153 0. 32 0.08215 0.(The simplest sort of mutex is a global variable \(as in the fragment above\); in this)awidthshow
680 126 gm
-0.00953 0.(case at most one thread is executing inside the )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01495 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.00952 0.( clause at any instant.)ashow
F T cp
%%Page: ? 9
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 247 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.35519 0. 32 0.23551 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.41755 0.(\312\312\312\312\3125)ashow
118 144 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01336 0.(But a mutex might instead be part of a data structure \(for example a field of a record\).)ashow
130 126 gm
0.07278 0. 32 0.00727 0.(In that case, the variables it protects would also be part of the data structure \(for example,)awidthshow
142 126 gm
0.43136 0. 32 0.04313 0.(the remaining fields of the same record\). To express this, the )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.18641 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.50537 0. 32 0.05053 0.( clause would begin)awidthshow
154 126 gm
0.88150 0. 32 0.08815 0.(with an expression selecting the mutex field of the record, and the correct description)awidthshow
166 126 gm
0.51177 0. 32 0.05117 0.(would be that at most one thread can execute with the mutex held. This latter feature is)awidthshow
178 126 gm
-0.05410 0.(typically used to arrange that at most one thread can access the fields of a particular record,)ashow
190 126 gm
-0.01953 0.(but multiple threads can access different records in parallel. We will examine this usage in)ashow
202 126 gm
-0.00189 0.(more detail in a later section.)ashow
230 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.09535 0.(Condition variables)ashow
248 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.21850 0. 32 0.02185 0.(You can view a mutex as a simple kind of resource scheduling mechanism. The resource)awidthshow
260 126 gm
-0.06761 0.(being scheduled is the shared memory accessed inside the )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10083 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06805 0.( clause, and the scheduling)ashow
272 126 gm
2.04101 0. 32 0.20410 0.(policy is one thread at a time. But often the programmer needs to express more)awidthshow
284 126 gm
0.08270 0. 32 0.00827 0.(complicated scheduling policies. This requires use of a mechanism that allows a thread to)awidthshow
296 126 gm
0.97488 0. 32 0.09748 0.(block until some event happens. In the SRC design, this is achieved with a condition)awidthshow
308 126 gm
-0.08749 0.(variable.)ashow
332 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06462 0.(TYPE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05203 0.( Condition;)ashow
344 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03419 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02490 0.( Wait\(m: Mutex; c: Condition\);)ashow
356 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07220 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05044 0.( Signal\(c: Condition\);)ashow
368 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19673 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14015 0.( Broadcast\(c: Condition\);)ashow
392 144 gm
0.36087 0. 32 0.03608 0.(A condition variable is always associated with a particular mutex, and with the data)awidthshow
404 126 gm
0.17349 0. 32 0.01734 0.(protected by that mutex. In general a monitor consists of some data, a mutex, and zero or)awidthshow
416 126 gm
0.88317 0. 32 0.08831 0.(more condition variables. Notice that a particular condition variable is always used in)awidthshow
428 126 gm
0.43975 0. 32 0.04397 0.(conjunction with the )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.13598 0.(same)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.43609 0. 32 0.04360 0.( mutex and its data. The \322Wait\323 operation atomically unlocks)awidthshow
440 126 gm
1.04278 0. 32 0.10427 0.(the mutex and blocks the thread \(enqueued on the condition variable\))awidthshow
0 -3 rm
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.25286 0.(3)ashow
0 3 rm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.10107 0. 32 0.11010 0.(. The \322Signal\323)awidthshow
452 126 gm
-0.01414 0.(operation does nothing unless there is a thread blocked on the condition variable, in which)ashow
464 126 gm
1.35101 0. 32 0.13510 0.(case it awakens at least one such blocked thread \(but possibly more than one\). The)awidthshow
476 126 gm
0.79925 0. 32 0.07992 0.(\322Broadcast\323 operation is like \322Signal\323, except that it awakens all the threads currently)awidthshow
488 126 gm
0.09643 0. 32 0.00964 0.(blocked on the condition variable. When a thread is awoken inside \322Wait\323 after blocking,)awidthshow
500 126 gm
0.40145 0. 32 0.04014 0.(it re-locks the mutex, then returns. Note that the mutex might not be available, in which)awidthshow
512 126 gm
0.17333 0. 32 0.01733 0.(case the thread will block on the mutex until it is available.)awidthshow
524 144 gm
0.42602 0. 32 0.04260 0.(The mutex associated with a condition variable protects the shared data that is used)awidthshow
536 126 gm
1.60766 0. 32 0.16076 0.(for the scheduling decision. If a thread wants the resource, it locks the mutex and)awidthshow
548 126 gm
0.86013 0. 32 0.08601 0.(examines the shared data. If the resource is available, the thread continues. If not, the)awidthshow
560 126 gm
0.52566 0. 32 0.05256 0.(thread unlocks the mutex and blocks, by calling \322Wait\323. Later, when some other thread)awidthshow
572 126 gm
-0.05297 0.(makes the resource available it awakens the first thread by calling \322Signal\323 or \322Broadcast\323.)ashow
584 126 gm
0.58258 0. 32 0.05825 0.(For example, the following fragment allows a thread to block until a linked list \(whose)awidthshow
596 126 gm
0.09140 0. 32 0.00914 0.(head is \322head\323\) is not empty, then remove the top element of the list.)awidthshow
620 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04627 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03330 0.( nonEmpty: Thread.Condition;)ashow
-4096 -4096 gm
0 gr
-4095 -4095 lin
6 25 lw
658 126 gm
658 269 lin
25 6 lw
1 1 lw
669 126 gm
F 1 setTxMode
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.20910 0.(3)ashow
0 3 rm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.79986 0. 32 0.07998 0.(This atomicity guarantee avoids the problem known in the literature as the \322wake-up waiting\323)awidthshow
682 126 gm
0.80612 0. 32 0.08061 0.(race [13].)awidthshow
F T cp
%%Page: ? 10
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.34796 0.(6\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.37945 0. 32 0.23794 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 180 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
130 198 gm
-0.15434 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10656 0.( head = )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13304 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06655 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17300 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11915 0.( Thread.Wait\(m, nonEmpty\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16412 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
142 198 gm
-0.06509 0.(topElement := head;)ashow
154 198 gm
-0.24205 0.(head := head^.next;)ashow
166 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
190 144 gm
-0.07684 0.(And the following fragment could be used by a thread adding an element to \322head\323.)ashow
214 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
226 198 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14405 0.(newElement^.next := head;)ashow
238 198 gm
-0.11398 0.(head := newElement;)ashow
250 198 gm
-0.06373 0.(Thread.Signal\(nonEmpty\);)ashow
262 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
290 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.02362 0.(Alerts)ashow
308 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.66741 0. 32 0.06674 0.(The final aspect of the SRC thread facility is a mechanism for interrupting a particular)awidthshow
320 126 gm
0.14526 0. 32 0.01452 0.(thread, causing it to back out of some long-term wait or computation.)awidthshow
344 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.27653 0.(EXCEPTION)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21943 0.( Alerted;)ashow
356 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21105 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14379 0.( Alert\(t: Thread\);)ashow
368 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03854 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02780 0.( AlertWait\(m: Mutex, c: Condition\);)ashow
380 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21406 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13424 0.( TestAlert\(\): )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22114 0.(BOOLEAN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
404 144 gm
0.39901 0. 32 0.03990 0.(The state of a thread includes a boolean known as \322alert-pending\323, initially false. A)awidthshow
416 126 gm
0.31494 0. 32 0.03149 0.(call of \322AlertWait\323 behaves the same as \322Wait\323, except that if the thread\325s alert-pending)awidthshow
428 126 gm
0.11550 0. 32 0.01155 0.(boolean is true, then instead of blocking on c it sets alert-pending to false, re-locks m and)awidthshow
440 126 gm
2.38647 0. 32 0.23864 0.(raises the exception \322Alerted\323. \(Don\325t worry about the semantics of Modula-2+)awidthshow
452 126 gm
0.26382 0. 32 0.02638 0.(exceptions\321think of them as a form of non-ignorable return code.\) If you call \322Alert\(t\)\323)awidthshow
464 126 gm
0.40740 0. 32 0.04074 0.(when t is currently blocked on a condition variable inside a call of \322AlertWait\323 then t is)awidthshow
476 126 gm
0.86914 0. 32 0.08691 0.(awoken, t re-locks the mutex m and then it raises the exception \322Alerted\323. If you call)awidthshow
488 126 gm
0.25955 0. 32 0.02595 0.(\322Alert\(t\)\323 when t is not blocked in a call of \322AlertWait\323, all that happens is that its alert-)awidthshow
500 126 gm
-0.01336 0.(pending boolean is set to true. The call \322TestAlert\323 atomically tests and clears the thread\325s)ashow
512 126 gm
-0.09341 0.(alert-pending boolean.)ashow
524 144 gm
1.93237 0. 32 0.19323 0.(For example, consider a \322GetChar\323 routine, which blocks until a character is)awidthshow
536 126 gm
0.56793 0. 32 0.05679 0.(available on an interactive keyboard input stream. It seems attractive that if some other)awidthshow
548 126 gm
0.09048 0. 32 0.00904 0.(thread of the computation decides the input is no longer interesting \(for example, the user)awidthshow
560 126 gm
0.49606 0. 32 0.04960 0.(clicked )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.17073 0.(CANCEL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.42556 0. 32 0.04255 0.( with his mouse\), then the thread should return from \322GetChar\323. If you)awidthshow
572 126 gm
-0.01751 0.(happen to know the condition variable where \322GetChar\323 blocks waiting for characters you)ashow
584 126 gm
0.03738 0. 32 0.00373 0.(could just signal it, but often that condition variable is hidden under one or more layers of)awidthshow
596 126 gm
0.41305 0. 32 0.04130 0.(abstraction. In this situation, the thread interpreting the )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.15617 0.(CANCEL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.38314 0. 32 0.03831 0.( request can achieve its)awidthshow
608 126 gm
0.56808 0. 32 0.05680 0.(goal by calling \322Thread.Alert\(t\)\323, where \322t\323 is the thread calling \322GetChar\323. For this to)awidthshow
620 126 gm
0.13565 0. 32 0.01356 0.(work, \322GetChar\323 must contain something like the following fragment.)awidthshow
F T cp
%%Page: ? 11
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 247 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.35519 0. 32 0.23551 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.41755 0.(\312\312\312\312\3127)ashow
118 180 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.49885 0.(TRY)ashow
130 198 gm
-0.10401 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07688 0.( empty )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11659 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07923 0.( Thread.AlertWait\(m, nonEmpty\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11061 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
142 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21585 0.(RETURN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17280 0.( NextChar\(\))ashow
154 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.39921 0.(EXCEPT)ashow
166 198 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16250 0.(Thread.Alerted: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.23608 0.(RETURN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19549 0.( EndOfFile)ashow
178 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
202 144 gm
-0.03768 0.(Alerts are complicated, and their use produces complicated programs. We will discuss)ashow
214 126 gm
0.03219 0. 32 0.00321 0.(them in more detail later.)awidthshow
250 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.17794 0.(USING A MUTEX: ACCESSING SHARED DATA)ashow
268 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.14007 0. 32 0.01400 0.(The basic rule for using mutual exclusion is straightforward: in a multi-threaded program)awidthshow
280 126 gm
0.81420 0. 32 0.08142 0.(all shared mutable data must be protected by associating it with some mutex, and you)awidthshow
292 126 gm
0.28442 0. 32 0.02844 0.(must access the data only from a thread that is holding the associated mutex \(i.e., from a)awidthshow
304 126 gm
-0.04010 0.(thread executing within a )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06149 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04089 0.( clause that locked the mutex\).)ashow
332 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.35057 0.(Unprotected data)ashow
350 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.50155 0. 32 0.05015 0.(The simplest bug related to mutexes occurs when you fail to protect some mutable data)awidthshow
362 126 gm
0.19699 0. 32 0.01969 0.(and then you access it without the benefits of synchronization. For example, consider the)awidthshow
374 126 gm
0.28717 0. 32 0.02871 0.(following code fragment. The global variable \322table\323 represents a table that can be filled)awidthshow
386 126 gm
0.65490 0. 32 0.06549 0.(with )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.29064 0.(REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.74066 0. 32 0.07406 0.( values by calling \322Insert\323. The procedure works by inserting a non-)awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.36309 0.(NIL)ashow
398 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.51574 0. 32 0.05157 0.(argument at index \322i\323 of \322table\323, then incrementing \322i\323. The table is initially empty \(all)awidthshow
410 126 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19616 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22880 0.(\).)ashow
434 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10957 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05885 0.( table: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10900 0.(ARRAY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06343 0.( [0..999] )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09564 0.(OF REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
446 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.05783 0. 32 0.00578 0.(VAR )awidthshow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.08239 0. 32 0.00823 0.(i: [0..1000];)awidthshow
470 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.23324 0.(PROCEDURE )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14515 0.(Insert\(r: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25100 0.(REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25547 0.(\);)ashow
482 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
494 198 gm
-0.12631 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09999 0.( r # )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18603 0.(NIL THEN)ashow
506 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(1\321)show
506 216 gm
-0.03010 0.(table[i] := r;)ashow
518 126 gm
(2\321)show
518 216 gm
0.57403 0. 32 0.05740 0.(i := i+1;)awidthshow
530 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
542 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20288 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13183 0.( Insert;)ashow
566 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09294 0.(FOR)ashow
2 fs
10 fz
bu fc
2 F /|______Times-Italic fnt
bn
( )show
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
-0.05392 0.(i := 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09555 0.(TO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06372 0.( 999 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08094 0.(DO )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05613 0.(table[i] := )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08131 0.(NIL END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
578 180 gm
0.39443 0. 32 0.03944 0.(i := 0;)awidthshow
602 144 gm
1.13983 0. 32 0.11398 0.(Now consider what might happen if thread A calls \322Insert\(x\)\323 concurrently with)awidthshow
614 126 gm
-0.01016 0.(thread B calling \322Insert\(y\)\323. If the order of execution happens to be that thread A executes)ashow
626 126 gm
0.76080 0. 32 0.07608 0.(\(1\), then thread B executes \(1\), then thread A executes \(2\) then thread B executes \(2\),)awidthshow
638 126 gm
0.82351 0. 32 0.08235 0.(confusion will result. Instead of the intended effect \(that \322x\323 and \322y\323 are inserted into)awidthshow
650 126 gm
0.14877 0. 32 0.01487 0.(\322table\323, at separate indexes\), the final state would be that \322y\323 is correctly in the table, but)awidthshow
662 126 gm
0.82077 0. 32 0.08207 0.(\322x\323 has been lost. Further, since \(2\) has been executed twice, an empty \()awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.28773 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.71685 0. 32 0.07168 0.(\) slot has)awidthshow
F T cp
%%Page: ? 12
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.34796 0.(8\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.37945 0. 32 0.23794 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02610 0.(been left orphaned in the table. Such errors would be prevented by enclosing \(1\) and \(2\) in)ashow
130 126 gm
(a )show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01354 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.00881 0.( clause, as follows.)ashow
154 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.23324 0.(PROCEDURE )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14515 0.(Insert\(r: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25100 0.(REFANY)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25547 0.(\);)ashow
166 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
178 198 gm
-0.12631 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09999 0.( r # )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18603 0.(NIL THEN)ashow
190 216 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
202 234 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03010 0.(table[i] := r;)ashow
214 234 gm
0.57403 0. 32 0.05740 0.(i := i+1;)awidthshow
226 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
238 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
250 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20288 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13183 0.( Insert;)ashow
274 144 gm
0.69015 0. 32 0.06901 0.(The )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.32788 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.82534 0. 32 0.08253 0.( clause enforces serialization of the threads\325 actions, so that one thread)awidthshow
286 126 gm
-0.03247 0.(executes the statements inside the )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05064 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03324 0.( clause, then the other thread executes them.)ashow
298 144 gm
0.31066 0. 32 0.03106 0.(The effects of unsynchronized access to mutable data can be bizarre, since they will)awidthshow
310 126 gm
2.58880 0. 32 0.25888 0.(depend on the precise timing relationship between your threads. Also, in most)awidthshow
322 126 gm
0.81344 0. 32 0.08134 0.(environments the timing relationship is non-deterministic \(because of real-time effects)awidthshow
334 126 gm
0.06439 0. 32 0.00643 0.(like page faults, or the use of real-time timer facilities, or because of actual asynchrony in)awidthshow
346 126 gm
0.04623 0. 32 0.00462 0.(a multi-processor system\).)awidthshow
358 144 gm
0.70434 0. 32 0.07043 0.(It would be a good idea for your language system to give you some help here, for)awidthshow
370 126 gm
1.53366 0. 32 0.15336 0.(example by syntax that prevents you accessing variables until you have locked the)awidthshow
382 126 gm
1.83792 0. 32 0.18379 0.(appropriate mutex. But most languages don\325t offer this yet. Meanwhile, you need)awidthshow
394 126 gm
0.58258 0. 32 0.05825 0.(programmer discipline and careful use of searching and browsing tools. Such problems)awidthshow
406 126 gm
0.93536 0. 32 0.09353 0.(will arise less often if you use very simple, coarse grain, locking. For example, use a)awidthshow
418 126 gm
0.66314 0. 32 0.06631 0.(single mutex to protect all the global state of an entire module. Unfortunately, this can)awidthshow
430 126 gm
0.01739 0. 32 0.00173 0.(cause other problems, described below. So the best advice is to make your use of mutexes)awidthshow
442 126 gm
1.50817 0. 32 0.15081 0.(be as simple as possible, but no simpler. If you are tempted to use more elaborate)awidthshow
454 126 gm
1.30889 0. 32 0.13088 0.(arrangements, be entirely sure that the benefits are worth the risks, not just that the)awidthshow
466 126 gm
(program looks nicer.)show
494 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.23344 0.(Invariants)ashow
512 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.04904 0. 32 0.10490 0.(When the data protected by a mutex is at all complicated, many programmers find it)awidthshow
524 126 gm
0.68588 0. 32 0.06858 0.(convenient to think of the mutex as protecting the )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.19567 0.(invariant)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.66680 0. 32 0.06668 0.( of the associated data. An)awidthshow
536 126 gm
0.21820 0. 32 0.02182 0.(invariant is a boolean function of the data that is true whenever the mutex is not held. So)awidthshow
548 126 gm
1.09222 0. 32 0.10922 0.(any thread that locks the mutex knows that it starts out with the invariant true. Each)awidthshow
560 126 gm
1.12594 0. 32 0.11259 0.(thread has the responsibility to restore the invariant before releasing the mutex. This)awidthshow
572 126 gm
(includes restoring the invariant before calling \322Wait\323, since that unlocks the mutex.)show
584 144 gm
0.42022 0. 32 0.04202 0.(For example, in the code fragment above \(for inserting an element into a table\), the)awidthshow
596 126 gm
0.98526 0. 32 0.09852 0.(invariant is that \322i\323 is the index of the first )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.42459 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.28540 0. 32 0.12854 0.( element in \322table\323, and all elements)awidthshow
608 126 gm
0.17089 0. 32 0.01708 0.(beyond index \322i\323 are )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.06091 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.18966 0. 32 0.01896 0.(. Note that the variables mentioned in the invariant are accessed)awidthshow
620 126 gm
2.06359 0. 32 0.20635 0.(only with this mutex held. Note also that the invariant is not true after the first)awidthshow
632 126 gm
0.09582 0. 32 0.00958 0.(assignment statement but before the second one\321it is only guaranteed when the mutex is)awidthshow
644 126 gm
0.08468 0. 32 0.00846 0.(not being held.)awidthshow
656 144 gm
0.78521 0. 32 0.07852 0.(Frequently the invariants are simple enough that you barely think about them, but)awidthshow
668 126 gm
0.56076 0. 32 0.05607 0.(often your program will benefit from writing them down explicitly. And if they are too)awidthshow
680 126 gm
0.58166 0. 32 0.05816 0.(complicated to write down, you\325re probably doing something wrong. You might find it)awidthshow
F T cp
%%Page: ? 13
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 247 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.35519 0. 32 0.23551 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29821 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.41755 0.(\312\312\312\312\3129)ashow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.17562 0. 32 0.01756 0.(best to write down your invariants informally, as in the previous paragraph, or you might)awidthshow
130 126 gm
0.11810 0. 32 0.01181 0.(prefer to use some formal specification language such as Larch [7], the language we used)awidthshow
142 126 gm
0.03570 0. 32 0.00357 0.(to specify the SRC threads facility [4]. It is also generally a good idea to make it clear \(by)awidthshow
154 126 gm
0.07339 0. 32 0.00733 0.(writing it down in the program\) which mutex protects which data items.)awidthshow
182 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.09503 0.(Cheating)ashow
200 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.10162 0. 32 0.01016 0.(The rule that you must use a mutex to protect every access to global variables is based on)awidthshow
212 126 gm
-0.03092 0.(a concurrency model where the actions of the threads are arbitrarily interleaved. If the data)ashow
224 126 gm
0.50811 0. 32 0.05081 0.(being protected by a mutex is particularly simple \(for example just one integer, or even)awidthshow
236 126 gm
1.46636 0. 32 0.14663 0.(just one boolean\), programmers are often tempted to skip using the mutex, since it)awidthshow
248 126 gm
0.27572 0. 32 0.02757 0.(introduces significant overhead and they \322know\323 that the variables will be accessed with)awidthshow
260 126 gm
0.39276 0. 32 0.03927 0.(atomic instructions and that instructions are not interleaved. Before you succumb to this)awidthshow
272 126 gm
0.82855 0. 32 0.08285 0.(temptation, you must carefully consider the hardware where your program will run. If)awidthshow
284 126 gm
0.59326 0. 32 0.05932 0.(your single integer variable is word aligned, and if you are running on a uni-processor,)awidthshow
296 126 gm
1.50451 0. 32 0.15045 0.(and if your compiler generates the obvious instruction sequences and doesn\325t slave)awidthshow
308 126 gm
2.34024 0. 32 0.23402 0.(variables into registers, then you will probably get the correct answer. In other)awidthshow
320 126 gm
0.33737 0. 32 0.03373 0.(circumstances you might not get the correct answer; or worse, you might usually get the)awidthshow
332 126 gm
0.96801 0. 32 0.09680 0.(correct answer but very occasionally get the wrong answer. For machine independent)awidthshow
344 126 gm
1.14074 0. 32 0.11407 0.(correct code, you absolutely must use a synchronization technique approved by your)awidthshow
356 126 gm
-0.02388 0.(programming language.)ashow
0 -3 rm
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
(4)show
368 144 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.80688 0. 32 0.08068 0.(One cheating technique I have found helpful is to use unsynchronized access as a)awidthshow
380 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.20681 0.(hint)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.71395 0. 32 0.07139 0.(. In this context by \322hint\323 I mean a cheap way of getting information that is either)awidthshow
392 126 gm
0.01922 0. 32 0.00192 0.(correct or causes you to invoke a more expensive, correct, way of getting the information.)awidthshow
404 126 gm
0.55862 0. 32 0.05586 0.(For example, if you want to call an initialization procedure exactly once you might use)awidthshow
416 126 gm
(code like the following.)show
440 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11740 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07339 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15223 0.(NOT )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12229 0.(initDone )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.23475 0.(THEN)ashow
452 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
464 216 gm
-0.11740 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07339 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15223 0.(NOT )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12229 0.(initDone )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.23475 0.(THEN)ashow
476 234 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08068 0.(Initialize\(\);)ashow
488 234 gm
-0.03700 0.(initDone := )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05386 0.(TRUE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
500 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
512 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
524 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
548 144 gm
0.55740 0. 32 0.05574 0.(This code is correct if you can assume that \322initDone\323 is initialized to )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.22120 0.(FALSE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.53619 0. 32 0.05361 0.(, that)awidthshow
560 126 gm
0.66848 0. 32 0.06684 0.(reading it without a mutex will not cause a runtime error, and that reading it without a)awidthshow
572 126 gm
0.60058 0. 32 0.06005 0.(mutex when its value is )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.25218 0.(FALSE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.52139 0. 32 0.05213 0.( will give you the value )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.25218 0.(FALSE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.58486 0. 32 0.05848 0.(. It doesn't matter if you)awidthshow
584 126 gm
0.34149 0. 32 0.03414 0.(occasionally might get )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.10699 0.(FALSE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.20446 0. 32 0.02044 0.( instead of )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.11427 0.(TRUE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.24124 0. 32 0.02412 0.(, since that will just cause you to lock the)awidthshow
596 126 gm
0.21621 0. 32 0.02162 0.(mutex and get the correct value. But I repeat: you should only do this after verifying that)awidthshow
608 126 gm
-0.00257 0.(your programming language guarantees the validity of these assumptions.)ashow
-4096 -4096 gm
0 gr
-4095 -4095 lin
6 25 lw
648 126 gm
648 269 lin
25 6 lw
1 1 lw
659 126 gm
F 1 setTxMode
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.43609 0.(4)ashow
0 3 rm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.36001 0. 32 0.13600 0.( There is indeed a strong argument that there should be a way for the programmer to take)awidthshow
672 126 gm
0.77636 0. 32 0.07763 0.(advantage of the atomicity of instructions, and so avoid the cost of a )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.29978 0.(LOCK)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.92117 0. 32 0.09211 0.( clause. However, it)awidthshow
682 126 gm
0.55145 0. 32 0.05514 0.(seems to be difficult to define such a feature in an efficient but machine-independent fashion.)awidthshow
F T cp
%%Page: ? 14
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(10\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
2 fs
10 fz
bu fc
2 F /|______Times-Italic fnt
bn
0.43716 0. 32 0.04371 0.(Deadlocks involving only mutexes)awidthshow
136 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.43365 0. 32 0.04336 0.(The simplest cases of deadlock occur when a thread tries to lock a mutex that it already)awidthshow
148 126 gm
0.37551 0. 32 0.03755 0.(holds \(although some systems explicitly allow a thread to continue unhindered if it does)awidthshow
160 126 gm
1.51382 0. 32 0.15138 0.(this\). There are numerous more elaborate cases of deadlock involving mutexes, for)awidthshow
172 126 gm
-0.09291 0.(example:)ashow
196 180 gm
-0.01307 0.(Thread A locks mutex M1;)ashow
208 180 gm
-0.01829 0.(thread B locks mutex M2;)ashow
220 180 gm
0.12298 0. 32 0.01229 0.(thread A blocks trying to lock M2;)awidthshow
232 180 gm
0.10467 0. 32 0.01046 0.(thread B blocks trying to lock M1.)awidthshow
256 144 gm
0.26824 0. 32 0.02682 0.(The most effective rule for avoiding such deadlocks is to apply a partial order to the)awidthshow
268 126 gm
1.17721 0. 32 0.11772 0.(acquisition of mutexes in your program. In other words, arrange that for any pair of)awidthshow
280 126 gm
0.70938 0. 32 0.07093 0.(mutexes { M1, M2 }, each thread that needs to hold M1 and M2 simultaneously locks)awidthshow
292 126 gm
0.46493 0. 32 0.04649 0.(M1 and M2 in the same order \(for example, M1 is always locked before M2\). This rule)awidthshow
304 126 gm
0.50689 0. 32 0.05068 0.(completely avoids deadlocks involving only mutexes \(though as we will see later, there)awidthshow
316 126 gm
-0.05461 0.(are other potential deadlocks when your program uses condition variables\).)ashow
328 144 gm
0.50521 0. 32 0.05052 0.(There is a technique that sometimes makes it easier to achieve this partial order. In)awidthshow
340 126 gm
0.74081 0. 32 0.07408 0.(the example above, thread A probably wasn\325t trying to modify exactly the same set of)awidthshow
352 126 gm
0.15151 0. 32 0.01515 0.(data as thread B. Frequently, if you examine the algorithm carefully you can partition the)awidthshow
364 126 gm
1.19583 0. 32 0.11958 0.(data into smaller pieces protected by separate mutexes. For example, when thread B)awidthshow
376 126 gm
0.17181 0. 32 0.01718 0.(wanted to lock M1, it might actually be wanting access to data disjoint from the data that)awidthshow
388 126 gm
0.06088 0. 32 0.00608 0.(thread A was accessing under M1. In such a case you might protect this disjoint data with)awidthshow
400 126 gm
0.17227 0. 32 0.01722 0.(a separate mutex, M3, and avoid the deadlock. Note that this is just a technique to enable)awidthshow
412 126 gm
0.34317 0. 32 0.03431 0.(you to have a partial order on the mutexes \( M1 before M2 before M3, in this example\).)awidthshow
424 126 gm
0.97915 0. 32 0.09791 0.(But remember that the more you pursue this hint, the more complicated your locking)awidthshow
436 126 gm
0.03128 0. 32 0.00312 0.(becomes, and the more likely you are to have some unsynchronized access to shared data.)awidthshow
448 126 gm
0.07125 0. 32 0.00712 0.(Having your program deadlock is almost always a preferable risk to having your program)awidthshow
460 126 gm
-0.01396 0.(give the wrong answer.)ashow
488 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.06025 0.(Poor performance through lock conflicts)ashow
506 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.22872 0. 32 0.02287 0.(Assuming that you have arranged your program to have enough mutexes that all the data)awidthshow
518 126 gm
0.12680 0. 32 0.01268 0.(is protected, and a fine enough granularity that it does not deadlock, the remaining mutex)awidthshow
530 126 gm
-0.01939 0.(problems to worry about are all performance problems.)ashow
542 144 gm
0.28182 0. 32 0.02818 0.(Whenever a thread is holding a mutex, it is potentially stopping another thread from)awidthshow
554 126 gm
0.49835 0. 32 0.04983 0.(making progress\321if the other thread blocks on the mutex. If the first thread can use all)awidthshow
566 126 gm
0.64849 0. 32 0.06484 0.(the machine\325s resources, that is probably fine. But if the first thread, while holding the)awidthshow
578 126 gm
0.17837 0. 32 0.01783 0.(mutex, ceases to make progress \(for example by blocking on another mutex, or by taking)awidthshow
590 126 gm
0.12207 0. 32 0.01220 0.(a page fault, or by waiting for an i/o device\), then the total throughput of your program is)awidthshow
602 126 gm
0.32852 0. 32 0.03285 0.(degraded. The problem is worse on a multi-processor, where no single thread can utilize)awidthshow
614 126 gm
1.41876 0. 32 0.14187 0.(the entire machine; here if you cause another thread to block, it might mean that a)awidthshow
626 126 gm
1.22543 0. 32 0.12254 0.(processor goes idle. In general, to get good performance you must arrange that lock)awidthshow
638 126 gm
1.35604 0. 32 0.13560 0.(conflicts are rare events. The best way to reduce lock conflicts is to lock at a finer)awidthshow
650 126 gm
0.35873 0. 32 0.03587 0.(granularity; but this introduces complexity. There is no way out of this dilemma\321it is a)awidthshow
662 126 gm
-0.06236 0.(trade-off inherent in concurrent computation.)ashow
F T cp
%%Page: ? 15
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31211)ashow
118 144 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.26962 0. 32 0.02696 0.(The most typical example where locking granularity is important is in a module that)awidthshow
130 126 gm
0.02868 0. 32 0.00286 0.(manages a set of objects, for example a set of open buffered files. The simplest strategy is)awidthshow
142 126 gm
0.80017 0. 32 0.08001 0.(to use a single mutex for all the operations: open, close, read, write, and so forth. But)awidthshow
154 126 gm
0.64590 0. 32 0.06459 0.(this would prevent multiple writes on separate files proceeding in parallel, for no good)awidthshow
166 126 gm
0.75805 0. 32 0.07580 0.(reason. So a better strategy is to use one lock for operations on the global list of open)awidthshow
178 126 gm
1.38931 0. 32 0.13893 0.(files, and one lock per open file for operations affecting only that file. This can be)awidthshow
190 126 gm
0.70861 0. 32 0.07086 0.(achieved by associating a mutex with the record representing each open file. The code)awidthshow
202 126 gm
0.46417 0. 32 0.04641 0.(might look something like the following.)awidthshow
226 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(TYPE)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( File = )show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(REF)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(RECORD)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.00395 0.( m: Thread.Mutex; .... )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(END)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
238 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11145 0.(VAR )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09661 0.(globalLock: Thread.Mutex;)ashow
250 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.12232 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.34729 0. 32 0.03472 0.( globalTable: ....;)awidthshow
274 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04852 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03454 0.( Open\(name: String\): File;)ashow
286 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
298 198 gm
-0.14137 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09724 0.( globalLock )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30000 0.(DO)ashow
310 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.15487 0. 32 0.01548 0.(.... \(* access globalTable *\))awidthshow
322 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
334 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19375 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16934 0.( Open;)ashow
358 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.03012 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.07339 0. 32 0.00733 0.( Write\(f: File, ....\);)awidthshow
370 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
382 198 gm
-0.28060 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17791 0.( f^.m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.59544 0.(DO)ashow
394 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.10742 0. 32 0.01074 0.(.... \(* access fields of f *\))awidthshow
406 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
418 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20288 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15380 0.( Write;)ashow
442 144 gm
0.81146 0. 32 0.08114 0.(In even more complicated situations, you might protect different parts of a record)awidthshow
454 126 gm
0.81405 0. 32 0.08140 0.(with different mutexes. You might also have some immutable fields in the record that)awidthshow
466 126 gm
0.42465 0. 32 0.04246 0.(need no protection at all. In these situations, though, you must be careful about how the)awidthshow
478 126 gm
0.97869 0. 32 0.09786 0.(record is laid out in memory. If your language allows you to pack fields into records)awidthshow
490 126 gm
0.13992 0. 32 0.01399 0.(sufficiently tightly that they cannot be accessed by atomic operations on your computer\325s)awidthshow
502 126 gm
0.27587 0. 32 0.02758 0.(memory, and if you protect such packed fields with different mutexes, you might get the)awidthshow
514 126 gm
1.49017 0. 32 0.14901 0.(wrong answer. This is because the generated instructions for modifying such fields)awidthshow
526 126 gm
0.10757 0. 32 0.01075 0.(involve reading them, modifying them in a register \(or on-stack\), then writing them back.)awidthshow
538 126 gm
0.70083 0. 32 0.07008 0.(If two threads are doing this concurrently for two fields that occupy the same memory)awidthshow
550 126 gm
1.51931 0. 32 0.15193 0.(word, you might get the wrong result. You need to be especially conscious of this)awidthshow
562 126 gm
0.81253 0. 32 0.08125 0.(potential bug if you over-ride the language\325s default algorithm for laying out fields of)awidthshow
574 126 gm
0.08560 0. 32 0.00856 0.(records. Ideally, your programming language will prevent this bug, but it probably won\325t.)awidthshow
586 144 gm
0.60821 0. 32 0.06082 0.(There is an interaction between mutexes and the thread scheduler that can produce)awidthshow
598 126 gm
1.36077 0. 32 0.13607 0.(particularly insidious performance problems. The scheduler is the part of the thread)awidthshow
610 126 gm
-0.01736 0.(implementation \(often part of the operating system\) that decides which of the non-blocked)ashow
622 126 gm
0.21316 0. 32 0.02131 0.(threads should actually be given a processor to run on. Generally the scheduler makes its)awidthshow
634 126 gm
-0.03237 0.(decision based on a )ashow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.03071 0.(priority)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
-0.03266 0.( associated with each thread. \(Depending on the details of your)ashow
646 126 gm
0.23880 0. 32 0.02388 0.(system the priority might be fixed or dynamic, programmer assigned or computed by the)awidthshow
658 126 gm
1.19613 0. 32 0.11961 0.(scheduler. Often the algorithm for deciding who to run is not specified at all.\) Lock)awidthshow
670 126 gm
0.27465 0. 32 0.02746 0.(conflicts can lead to a situation where some high priority thread never makes progress at)awidthshow
F T cp
%%Page: ? 16
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(12\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.49880 0. 32 0.04988 0.(all, despite the fact that its high priority indicates that it is more urgent than the threads)awidthshow
130 126 gm
0.09384 0. 32 0.00938 0.(actually running.)awidthshow
142 144 gm
-0.00761 0.(This can happen, for example, in the following scenario on a uni-processor. Thread A)ashow
154 126 gm
0.04867 0. 32 0.00486 0.(is high priority, thread B is medium priority and thread C is low priority. The sequence of)awidthshow
166 126 gm
0.26824 0. 32 0.02682 0.(events is:)awidthshow
190 180 gm
-0.04696 0.(C is running \(e.g. because A and B are blocked somewhere\);)ashow
202 180 gm
0.45806 0. 32 0.04580 0.(C locks mutex M;)awidthshow
214 180 gm
-0.04965 0.(B wakes up and pre-empts C)ashow
226 198 gm
0.06927 0. 32 0.00692 0.(\(i.e. B runs instead of C since B has higher priority\);)awidthshow
238 180 gm
0.10482 0. 32 0.01048 0.(B embarks on some very long computation;)awidthshow
250 180 gm
-0.02413 0.(A wakes up and pre-empts B \(since A has higher priority\);)ashow
262 180 gm
0.33432 0. 32 0.03343 0.(A tries to lock M;)awidthshow
274 180 gm
0.08941 0. 32 0.00894 0.(A blocks, and so the processor is given back to B;)awidthshow
286 180 gm
0.23300 0. 32 0.02330 0.(B continues its very long computation.)awidthshow
310 144 gm
0.96481 0. 32 0.09648 0.( The net effect is that a high priority thread \(A\) is unable to make progress even)awidthshow
322 126 gm
0.54351 0. 32 0.05435 0.(though the processor is being used by a medium priority thread \(B\). This state is stable)awidthshow
334 126 gm
0.43548 0. 32 0.04354 0.(until there is processor time available for the low priority thread C to complete its work)awidthshow
346 126 gm
(and unlock M.)show
358 144 gm
-0.00093 0.(The programmer can avoid this problem by arranging for C to raise its priority before)ashow
370 126 gm
1.08200 0. 32 0.10820 0.(locking M. But this can be quite inconvenient, since it involves considering for each)awidthshow
382 126 gm
0.33752 0. 32 0.03375 0.(mutex which other thread priorities might be involved. The real solution of this problem)awidthshow
394 126 gm
0.16067 0. 32 0.01606 0.(lies with the implementer of your threads facility. He must somehow communicate to the)awidthshow
406 126 gm
0.08331 0. 32 0.00833 0.(scheduler that since A is blocked on M, the thread holding M should be viewed as having)awidthshow
418 126 gm
0.06332 0. 32 0.00633 0.(at least as high a priority as A. Unfortunately, your implementer has probably failed to do)awidthshow
430 126 gm
0.31082 0. 32 0.03108 0.(this\321we don\325t do it in the SRC implementation.)awidthshow
458 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.12542 0. 32 0.01254 0.(Releasing the mutex within a )awidthshow
9 fz
bu fc
2 F /|______Times-Italic fnt
bn
0.04931 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Italic fnt
bn
0.14709 0. 32 0.01470 0.( clause)awidthshow
476 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.64270 0. 32 0.06427 0.(There are times when you want to unlock the mutex in some region of program nested)awidthshow
488 126 gm
0.38665 0. 32 0.03866 0.(inside a )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.20603 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.51437 0. 32 0.05143 0.( clause. For example, you might want to unlock the mutex before calling)awidthshow
500 126 gm
0.53298 0. 32 0.05329 0.(down to a lower level abstraction that will block or execute for a long time \(in order to)awidthshow
512 126 gm
0.46325 0. 32 0.04632 0.(avoid provoking delays for other threads that want to lock the mutex\). The SRC system)awidthshow
524 126 gm
-0.03887 0.(provides for this usage by offering the raw operations \322Acquire\(m\)\323 and \322Release\(m\)\323 in a)ashow
536 126 gm
0.03814 0. 32 0.00381 0.(lower-level, less-advertised, interface. You must exercise extra care if you take advantage)awidthshow
548 126 gm
0.79940 0. 32 0.07994 0.(of this. First, you must be sure that the operations are correctly bracketed, even in the)awidthshow
560 126 gm
0.77194 0. 32 0.07719 0.(presence of exceptions. Second, you must be prepared for the fact that the state of the)awidthshow
572 126 gm
0.06683 0. 32 0.00668 0.(monitor\325s data might have changed while you had the mutex unlocked. This can be tricky)awidthshow
584 126 gm
0.48828 0. 32 0.04882 0.(if you called \322Release\323 explicitly \(instead of just ending the )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.20173 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.55435 0. 32 0.05543 0.( clause\) because you)awidthshow
596 126 gm
-0.01776 0.(were imbedded in some flow control construct such as a conditional clause. Your program)ashow
608 126 gm
0.26153 0. 32 0.02615 0.(counter might now depend on the previous state of the monitor\325s data, implicitly making)awidthshow
620 126 gm
0.03890 0. 32 0.00389 0.(a decision that might no longer be valid. So SRC discourages this paradigm, to reduce the)awidthshow
632 126 gm
-0.03591 0.(tendency to introduce quite subtle bugs.)ashow
644 144 gm
0.19195 0. 32 0.01919 0.(One other use of separate calls of \322Acquire\(m\)\323 and \322Release\(m\)\323  sometimes arises)awidthshow
656 126 gm
0.41625 0. 32 0.04162 0.(in the vicinity of forking. You might be executing with a mutex held and want to fork a)awidthshow
668 126 gm
0.13366 0. 32 0.01336 0.(new thread to continue working on the protected data, while the original thread continues)awidthshow
680 126 gm
0.34225 0. 32 0.03422 0.(without further access to the data. In other words, you would like to transfer the holding)awidthshow
F T cp
%%Page: ? 17
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31213)ashow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.25146 0. 32 0.02514 0.(of the mutex to the newly forked thread, atomically. You can achieve this by locking the)awidthshow
130 126 gm
0.40283 0. 32 0.04028 0.(mutex with \322Acquire\(m\)\323 instead of )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.14222 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.36331 0. 32 0.03633 0.(, and later calling \322Release\(m\)\323 in the forked)awidthshow
142 126 gm
0.56182 0. 32 0.05618 0.(thread. This tactic is quite dangerous\321it is difficult to verify the correct functioning of)awidthshow
154 126 gm
0.68740 0. 32 0.06874 0.(the mutex. Additionally, many thread facilities keep track of which thread is holding a)awidthshow
166 126 gm
0.34149 0. 32 0.03414 0.(mutex\321in those systems this tactic probably will not work. I recommend that you don\325t)awidthshow
178 126 gm
0.32592 0. 32 0.03259 0.(do this.)awidthshow
214 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.13601 0.(USING A CONDITION VARIABLE: SCHEDULING SHARED RESOURCES)ashow
232 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.55603 0. 32 0.05560 0.(A condition variable is used when the programmer wants to schedule the way in which)awidthshow
244 126 gm
1.59805 0. 32 0.15980 0.(multiple threads access some shared resource, and the simple one-at-a-time mutual)awidthshow
256 126 gm
0.01007 0. 32 0.00100 0.(exclusion provided by mutexes is not sufficient.)awidthshow
268 144 gm
-0.03129 0.(Consider the following example, where one or more producer threads are passing data)ashow
280 126 gm
-0.02079 0.(to one or more consumers. The data is transferred through an unbounded buffer formed by)ashow
292 126 gm
1.01684 0. 32 0.10168 0.(a linked list whose head is the global variable \322head\323. If the linked list is empty, the)awidthshow
304 126 gm
-0.00173 0.(consumer blocks on the condition variable \322nonEmpty\323 until the producer generates some)ashow
316 126 gm
-0.03076 0.(more data. The list and the condition variable are protected by the mutex \322m\323.)ashow
340 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08406 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06243 0.( m: Thread.Mutex;)ashow
352 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09750 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06297 0.( head: List;)ashow
376 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04988 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03700 0.( Consume\(\): List;)ashow
388 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.05508 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.16967 0. 32 0.01696 0.( topElement: List;)awidthshow
400 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
412 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
424 216 gm
-0.15434 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10656 0.( head = )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13304 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06655 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17300 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11915 0.( Thread.Wait\(m, nonEmpty\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16412 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
436 216 gm
-0.06509 0.(topElement := head;)ashow
448 216 gm
-0.24205 0.(head := head^.next;)ashow
460 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
472 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15180 0.(RETURN )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14231 0.(topElement)ashow
484 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10966 0.(END )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12252 0.(Consume;)ashow
508 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14094 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10534 0.( Produce\(newElement: List\);)ashow
520 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
532 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
544 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14405 0.(newElement^.next := head;)ashow
556 216 gm
-0.11398 0.(head := newElement;)ashow
568 216 gm
-0.06373 0.(Thread.Signal\(nonEmpty\);)ashow
580 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
592 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.27633 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21318 0.( Produce;)ashow
616 144 gm
0.47164 0. 32 0.04716 0.(This is fairly straightforward, but there are still some subtleties. Notice that when a)awidthshow
628 126 gm
0.41351 0. 32 0.04135 0.(consumer returns from the call of \322Wait\323 his first action after re-locking the mutex is to)awidthshow
640 126 gm
0.71701 0. 32 0.07170 0.(check once more whether the linked list is empty. This is an example of the following)awidthshow
652 126 gm
-0.01553 0.(general pattern, which I strongly recommend for all your uses of condition variables.)ashow
676 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18388 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07929 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19554 0.(NOT)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12626 0.( expression )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20611 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13502 0.( Thread.Wait\(m,c\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19554 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
F T cp
%%Page: ? 18
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(14\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 144 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.67108 0. 32 0.06710 0.(You might think that re-testing the expression is redundant: in the example above,)awidthshow
130 126 gm
1.42959 0. 32 0.14295 0.(the producer made the list non-empty before calling \322Signal\323. But the semantics of)awidthshow
142 126 gm
0.24078 0. 32 0.02407 0.(\322Signal\323 do not guarantee that the awoken thread will be the next to lock the mutex. It is)awidthshow
154 126 gm
0.35110 0. 32 0.03511 0.(possible that some other consumer thread will intervene, lock the mutex, remove the list)awidthshow
166 126 gm
0.53482 0. 32 0.05348 0.(element and unlock the mutex, before the newly awoken thread can lock the mutex.)awidthshow
0 -3 rm
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.13427 0.(5)ashow
0 3 rm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.29663 0. 32 0.02966 0.( A)awidthshow
178 126 gm
1.33804 0. 32 0.13380 0.(second reason for re-checking is local to the SRC design: we decided to permit the)awidthshow
190 126 gm
-0.01406 0.(implementation of \322Signal\323 to \(rarely\) awaken more than one thread, because this allowed)ashow
202 126 gm
-0.03907 0.(us to generate more efficient code for the \322Wait\323 and \322Signal\323 primitives.)ashow
214 144 gm
0.15136 0. 32 0.01513 0.(But the main reason for advocating use of this pattern is to make your program more)awidthshow
226 126 gm
1.05926 0. 32 0.10592 0.(obviously, and more robustly, correct. With this style it is immediately clear that the)awidthshow
238 126 gm
0.81222 0. 32 0.08122 0.(\322expression\323 is true before the following statements are executed. Without it, this fact)awidthshow
250 126 gm
1.68029 0. 32 0.16802 0.(could be verified only by looking at all the places that might signal the condition)awidthshow
262 126 gm
0.56228 0. 32 0.05622 0.(variable. In other words, this programming convention allows you to verify correctness)awidthshow
274 126 gm
0.10818 0. 32 0.01081 0.(by local inspection, which is always preferable to global inspection.)awidthshow
286 144 gm
1.04415 0. 32 0.10441 0.(A final advantage of this convention is that it allows for simple programming of)awidthshow
298 126 gm
0.29327 0. 32 0.02932 0.(calls to \322Signal\323 or \322Broadcast\323\321extra wake-ups are benign. Carefully coding to ensure)awidthshow
310 126 gm
1.35147 0. 32 0.13514 0.(that only the correct threads are awoken is now only a performance question, not a)awidthshow
322 126 gm
1.47766 0. 32 0.14776 0.(correctness one \(but of course you must ensure that at least the correct threads are)awidthshow
334 126 gm
-0.13200 0.(awoken\).)ashow
362 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.41299 0.(Using \322Broadcast\323)ashow
380 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.06567 0. 32 0.10656 0.(The \322Signal\323 primitive is useful if you know that at most one thread can usefully be)awidthshow
392 126 gm
0.11764 0. 32 0.01176 0.(awoken. \322Broadcast\323 awakens all threads that have called \322Wait\323. If you always program)awidthshow
404 126 gm
0.11093 0. 32 0.01109 0.(in the recommended style of re-checking an expression after return from \322Wait\323, then the)awidthshow
416 126 gm
0.22628 0. 32 0.02262 0.(correctness of your program will be unaffected if you replace calls of \322Signal\323 with calls)awidthshow
428 126 gm
-0.22752 0.(of \322Broadcast\323.)ashow
440 144 gm
0.62866 0. 32 0.06286 0.(One use of \322Broadcast\323 is when you want to simplify your program by awakening)awidthshow
452 126 gm
0.93017 0. 32 0.09301 0.(multiple threads, even though you know that not all of them can make progress. This)awidthshow
464 126 gm
1.67709 0. 32 0.16770 0.(allows you to be less careful about separating different wait reasons into different)awidthshow
476 126 gm
0.81008 0. 32 0.08100 0.(condition variables. This use trades slightly poorer performance for greater simplicity.)awidthshow
488 126 gm
0.21408 0. 32 0.02140 0.(Another use of \322Broadcast\323 is when you really need to awaken multiple threads, because)awidthshow
500 126 gm
-0.03204 0.(the resource you have just made available can be used by multiple other threads.)ashow
512 144 gm
0.32562 0. 32 0.03256 0.(A simple example where \322Broadcast\323 is useful is in the scheduling policy known as)awidthshow
524 126 gm
0.38192 0. 32 0.03819 0.(shared/exclusive locking \(or readers/writers locking\). Most commonly this is used when)awidthshow
536 126 gm
0.05477 0. 32 0.00547 0.(you have some shared data being read and written by various threads: your algorithm will)awidthshow
548 126 gm
-0.00714 0.(be correct \(and perform better\) if you allow multiple threads to read the data concurrently,)ashow
560 126 gm
-0.03062 0.(but a thread modifying the data must do so when no other thread is accessing the data.)ashow
572 144 gm
0.47393 0. 32 0.04739 0.(The following procedures implement this scheduling policy. Any thread wanting to)awidthshow
584 126 gm
0.77926 0. 32 0.07792 0.(read your data calls \322AcquireShared\323, then reads the data, then calls \322ReleaseShared\323.)awidthshow
596 126 gm
0.23330 0. 32 0.02333 0.(Similarly any thread wanting to modify the data calls \322AcquireExclusive\323, then modifies)awidthshow
608 126 gm
1.01135 0. 32 0.10113 0.(the data, then calls \322ReleaseExclusive\323. When the variable \322i\323 is greater than zero, it)awidthshow
620 126 gm
0.07339 0. 32 0.00733 0.(counts the number of active readers. When it is negative there is an active writer. When it)awidthshow
-4096 -4096 gm
0 gr
-4095 -4095 lin
6 25 lw
638 126 gm
638 269 lin
25 6 lw
1 1 lw
649 126 gm
F 1 setTxMode
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.17578 0.(5)ashow
0 3 rm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.64285 0. 32 0.06428 0.(The condition variables described here are not the same as those originally described by Hoare)awidthshow
662 126 gm
2.32482 0. 32 0.23248 0.([9]. Hoare\325s design would indeed provide a sufficient guarantee to make this re-testing)awidthshow
672 126 gm
0.90087 0. 32 0.09008 0.(redundant. But the design given here appears to be preferable, since it permits a much simpler)awidthshow
682 126 gm
0.96939 0. 32 0.09693 0.(implementation, and the extra check is not usually expensive.)awidthshow
F T cp
%%Page: ? 19
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31215)ashow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.11016 0. 32 0.01101 0.(is zero, no thread is using the data. If a potential reader inside \322AcquireShared\323 finds that)awidthshow
130 126 gm
0.14648 0. 32 0.01464 0.(\322i\323 is less than zero, it must block until the writer calls \322ReleaseExclusive\323.)awidthshow
154 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16252 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06773 0.( i: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14109 0.(INTEGER)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
166 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08406 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06243 0.( m: Thread.Mutex;)ashow
178 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10937 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07411 0.( c: Thread.Condition;)ashow
202 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21968 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16255 0.( AcquireExclusive\(\);)ashow
214 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
226 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
238 216 gm
-0.12983 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07289 0.( i # 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14553 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09535 0.( Thread.Wait\(m,c\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13807 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
250 216 gm
0.25848 0. 32 0.02584 0.(i := -1;)awidthshow
262 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
274 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21990 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16140 0.( AcquireExclusive;)ashow
298 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30331 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22929 0.( AcquireShared\(\);)ashow
310 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
322 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
334 216 gm
-0.11657 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06727 0.( i < 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13067 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08560 0.( Thread.Wait\(m,c\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12396 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
346 216 gm
0.57403 0. 32 0.05740 0.(i := i+1;)awidthshow
358 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
370 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.34866 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.26361 0.( AcquireShared;)ashow
394 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17297 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12628 0.( ReleaseExclusive\(\);)ashow
406 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
418 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
430 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15332 0.(i := 0; Thread.Broadcast\(c\);)ashow
442 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
454 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14993 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10844 0.( ReleaseExclusive;)ashow
478 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25288 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18821 0.( ReleaseShared\(\);)ashow
490 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
502 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
514 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.32836 0. 32 0.03283 0.(i := i-1;)awidthshow
526 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08415 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07038 0.( i = 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12620 0.(THEN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08470 0.( Thread.Signal\(c\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12969 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
538 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
550 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.27050 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20103 0.( ReleaseShared;)ashow
574 144 gm
0.02853 0. 32 0.00285 0.(Using \322Broadcast\323 is convenient in \322ReleaseExclusive\323, because a terminating writer)awidthshow
586 126 gm
0.61355 0. 32 0.06135 0.(does not need to know how many readers are now able to proceed. But notice that you)awidthshow
598 126 gm
0.14114 0. 32 0.01411 0.(could re-code this example using just \322Signal\323, by adding a counter of how many readers)awidthshow
610 126 gm
-0.01419 0.(are waiting, and calling \322Signal\323 that many times in \322ReleaseExclusive\323. The \322Broadcast\323)ashow
622 126 gm
0.82580 0. 32 0.08258 0.(facility is just a convenience, taking advantage of information already available to the)awidthshow
634 126 gm
3.03939 0. 32 0.30393 0.(threads implementation. Notice that there is no reason to use \322Broadcast\323 in)awidthshow
646 126 gm
0.74035 0. 32 0.07403 0.(\322ReleaseShared\323, because we know that at most one blocked writer can usefully make)awidthshow
658 126 gm
-0.04647 0.(progress.)ashow
670 144 gm
1.96380 0. 32 0.19638 0.(This particular encoding of shared/exclusive locking exemplifies many of the)awidthshow
682 126 gm
0.43548 0. 32 0.04354 0.(problems that can occur when using condition variables, as we will see in the following)awidthshow
F T cp
%%Page: ? 20
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(16\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.50415 0. 32 0.05041 0.(sections. As we discuss these problems, I will present revised encodings of this locking)awidthshow
130 126 gm
-0.15765 0.(paradigm.)ashow
158 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.06896 0. 32 0.00689 0.(Spurious wake-ups)awidthshow
176 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.81243 0. 32 0.18124 0.(If you keep your use of condition variables very simple, you might introduce the)awidthshow
188 126 gm
0.83679 0. 32 0.08367 0.(possibility of awakening threads that cannot make useful progress. This can happen if)awidthshow
200 126 gm
-0.00164 0.(you use \322Broadcast\323 when \322Signal\323 would be sufficient, or if you have threads waiting on)ashow
212 126 gm
3.56231 0. 32 0.35623 0.(a single condition variable for multiple different reasons. For example, the)awidthshow
224 126 gm
1.03454 0. 32 0.10345 0.(shared/exclusive locking procedures shown earlier use just one condition variable for)awidthshow
236 126 gm
3.91113 0. 32 0.39111 0.(readers as well as writers. This means that when we call \322Broadcast\323 in)awidthshow
248 126 gm
0.12847 0. 32 0.01284 0.(\322ReleaseExclusive\323, the effect will be to awaken both classes of blocked threads. But if a)awidthshow
260 126 gm
0.73257 0. 32 0.07325 0.(reader is first to lock the mutex, it will increment \322i\323 and prevent an awoken potential)awidthshow
272 126 gm
0.18554 0. 32 0.01855 0.(writer from making progress until the reader later calls \322ReleaseShared\323. The cost of this)awidthshow
284 126 gm
0.22705 0. 32 0.02270 0.(is extra time spent in the thread scheduler, which is typically an expensive place to be. If)awidthshow
296 126 gm
1.08917 0. 32 0.10891 0.(your problem is such that these spurious wake-ups will be common, and unless your)awidthshow
308 126 gm
0.63003 0. 32 0.06300 0.(scheduler is unusually efficient, you should probably separate the blocked threads onto)awidthshow
320 126 gm
0.40161 0. 32 0.04016 0.(two condition variables\321one for readers and one for writers. A terminating reader need)awidthshow
332 126 gm
0.05630 0. 32 0.00563 0.(only signal the writers\325 condition variable; a terminating writer would signal one of them,)awidthshow
344 126 gm
1.01013 0. 32 0.10101 0.(depending on which was non-empty. With this change, the procedures would look as)awidthshow
356 126 gm
0.07246 0.(follows.)ashow
380 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16252 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06773 0.( i: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14109 0.(INTEGER)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
392 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08406 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06243 0.( m: Thread.Mutex;)ashow
404 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06590 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04635 0.( cR, cW: Thread.Condition;)ashow
416 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.29026 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18357 0.( readWaiters: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25201 0.(INTEGER)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
440 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21968 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16255 0.( AcquireExclusive\(\);)ashow
452 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
464 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
476 216 gm
-0.13752 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07720 0.( i # 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15417 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10746 0.( Thread.Wait\(m,cW\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14625 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
488 216 gm
0.25848 0. 32 0.02584 0.(i := -1;)awidthshow
500 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
512 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21990 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16140 0.( AcquireExclusive;)ashow
536 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30331 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22929 0.( AcquireShared\(\);)ashow
548 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
560 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
572 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19364 0.(readWaiters := readWaiters+1;)ashow
584 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10073 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05813 0.( i < 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11293 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07618 0.( Thread.Wait\(m,cR\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10713 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
596 216 gm
-0.21826 0.(readWaiters := readWaiters-1;)ashow
608 216 gm
0.57403 0. 32 0.05740 0.(i := i+1;)awidthshow
620 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
632 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.34866 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.26361 0.( AcquireShared;)ashow
F T cp
%%Page: ? 21
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31217)ashow
118 180 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.17297 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12628 0.( ReleaseExclusive\(\);)ashow
130 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
142 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
154 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.39443 0. 32 0.03944 0.(i := 0;)awidthshow
166 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11575 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11737 0.( readWaiters > 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.23147 0.(THEN)ashow
178 234 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.26675 0.(Thread.Broadcast\(cR\);)ashow
190 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.49867 0.(ELSE)ashow
202 234 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15748 0.(Thread.Signal\(cW\);)ashow
214 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
226 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
238 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14993 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10844 0.( ReleaseExclusive;)ashow
262 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25288 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18821 0.( ReleaseShared\(\);)ashow
274 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
286 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
298 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.32836 0. 32 0.03283 0.(i := i-1;)awidthshow
310 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09019 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07545 0.( i = 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13525 0.(THEN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09721 0.( Thread.Signal\(cW\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13900 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
322 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
334 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.27050 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20103 0.( ReleaseShared;)ashow
362 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.45440 0. 32 0.04544 0.(Spurious lock conflicts)awidthshow
380 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.03631 0. 32 0.00363 0.(The straightforward use of condition variables can lead to excessive scheduling overhead.)awidthshow
392 126 gm
1.05804 0. 32 0.10580 0.(In the reader/writer example, when a terminating reader inside \322ReleaseShared\323 calls)awidthshow
404 126 gm
1.17935 0. 32 0.11793 0.(\322Signal\323, it still has the mutex locked. On a uni-processor this would often not be a)awidthshow
416 126 gm
1.30035 0. 32 0.13003 0.(problem, but on a multi-processor the effect is liable to be that a potential writer is)awidthshow
428 126 gm
0.50796 0. 32 0.05079 0.(awakened inside \322Wait\323, executes a few instructions, and then blocks trying to lock the)awidthshow
440 126 gm
0.43823 0. 32 0.04382 0.(mutex\321because it is still held by the terminating reader, executing concurrently. A few)awidthshow
452 126 gm
1.39602 0. 32 0.13960 0.(microseconds later the terminating reader unlocks the mutex, allowing the writer to)awidthshow
464 126 gm
1.68380 0. 32 0.16838 0.(continue. This has cost us two extra re-schedule operations, which is a significant)awidthshow
476 126 gm
-0.10069 0.(expense.)ashow
488 144 gm
1.39465 0. 32 0.13946 0.(This is a common situation, and it has a simple solution. Since the terminating)awidthshow
500 126 gm
0.37704 0. 32 0.03770 0.(reader does not access the data protected by the mutex after the call of \322Signal\323, we can)awidthshow
512 126 gm
0.33569 0. 32 0.03356 0.(move that call to after the end of the lock clause, as follows. Notice that accessing \322i\323 is)awidthshow
524 126 gm
0.15975 0. 32 0.01597 0.(still protected by the mutex.)awidthshow
548 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.25288 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18821 0.( ReleaseShared\(\);)ashow
560 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18136 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11282 0.( doSignal: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17588 0.(BOOLEAN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
572 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
584 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
596 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.32836 0. 32 0.03283 0.(i := i-1;)awidthshow
608 216 gm
-0.04847 0.(doSignal := \(i=0\);)ashow
620 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
632 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10722 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10871 0.( doSignal )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16079 0.(THEN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11557 0.( Thread.Signal\(cW\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16525 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
644 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.27050 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20103 0.( ReleaseShared;)ashow
668 144 gm
-0.01734 0.(There is a more complicated case of spurious lock conflicts when a terminating writer)ashow
680 126 gm
0.24810 0. 32 0.02481 0.(calls \322Broadcast\323. First, it does so with the mutex held. But also, only one of the waiting)awidthshow
F T cp
%%Page: ? 22
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(18\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.44714 0. 32 0.14471 0.(readers at a time can lock the mutex to re-check and increment \322i\323, so on a multi-)awidthshow
130 126 gm
0.36621 0. 32 0.03662 0.(processor other awoken readers are liable to block trying to lock the mutex \(this is quite)awidthshow
142 126 gm
1.03286 0. 32 0.10328 0.(unlikely on a uni-processor\). If necessary, we can correct this by awakening just one)awidthshow
154 126 gm
-0.06655 0.(reader in \322ReleaseExclusive\323 \(by calling \322Signal\323 instead of \322Broadcast\323\), and having each)ashow
166 126 gm
-0.01535 0.(reader in turn awaken the next, as follows.)ashow
190 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30331 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22929 0.( AcquireShared\(\);)ashow
202 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
214 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
226 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19364 0.(readWaiters := readWaiters+1;)ashow
238 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10073 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05813 0.( i < 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11293 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07618 0.( Thread.Wait\(m,cR\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10713 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
250 216 gm
-0.21826 0.(readWaiters := readWaiters-1;)ashow
262 216 gm
0.57403 0. 32 0.05740 0.(i := i+1;)awidthshow
274 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
286 198 gm
-0.11231 0.(Thread.Signal\(cR\);)ashow
298 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.34866 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.26361 0.( AcquireShared;)ashow
326 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.07360 0.(Starvation)ashow
344 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.19781 0. 32 0.11978 0.(Whenever you have a program that is making scheduling decisions, you must worry)awidthshow
356 126 gm
0.15197 0. 32 0.01519 0.(about how fair these decisions are; in other words, are all threads equal or are some more)awidthshow
368 126 gm
0.93490 0. 32 0.09349 0.(favored? When you are using a mutex, this consideration is dealt with for you by the)awidthshow
380 126 gm
1.50039 0. 32 0.15003 0.(threads implementation\321typically by a first-in-first-out rule for each priority level.)awidthshow
392 126 gm
0.98953 0. 32 0.09895 0.(Mostly, this is also true for condition variables. But sometimes the programmer must)awidthshow
404 126 gm
-0.03042 0.(become involved. The most extreme form of unfairness is \322starvation\323, where some thread)ashow
416 126 gm
(will )show
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
(never)show
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.02105 0. 32 0.00210 0.( make progress. This can arise in our reader-writer locking example \(of course\).)awidthshow
428 126 gm
0.22033 0. 32 0.02203 0.(If the system is heavily loaded, so that there is always at least one thread wanting to be a)awidthshow
440 126 gm
-0.00585 0.(reader, the existing code will starve writers. This would occur with the following pattern.)ashow
464 180 gm
-0.11711 0.(Thread A calls \322AcquireShared\323; i := 1;)ashow
476 180 gm
-0.12895 0.(Thread B calls \322AcquireShared\323; i := 2;)ashow
488 180 gm
-0.08787 0.(Thread A calls \322ReleaseShared\323; i := 1;)ashow
500 180 gm
-0.10266 0.(Thread C calls \322AcquireShared\323; i := 2;)ashow
512 180 gm
-0.09973 0.(Thread B calls \322ReleaseShared\323; i := 1;)ashow
524 180 gm
-0.05177 0.(etc.)ashow
548 144 gm
0.74691 0. 32 0.07469 0.(Since there is always an active reader, there is never a moment when a writer can)awidthshow
560 126 gm
-0.01931 0.(proceed; potential writers will always remain blocked, waiting for \322i\323 to reduce to 0. If the)ashow
572 126 gm
0.03723 0. 32 0.00372 0.(load is such that this is really a problem, we need to make the code yet more complicated.)awidthshow
584 126 gm
0.37246 0. 32 0.03724 0.(For example, we could arrange that a new reader would defer inside \322AcquireShared\323 if)awidthshow
596 126 gm
0.59692 0. 32 0.05969 0.(there was a blocked potential writer. We could do this by adding a counter for blocked)awidthshow
608 126 gm
0.23605 0. 32 0.02360 0.(writers, as follows.)awidthshow
632 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19421 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12147 0.( writeWaiters: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16862 0.(INTEGER)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
656 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30331 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.22929 0.( AcquireShared\(\);)ashow
668 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
F T cp
%%Page: ? 23
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31219)ashow
118 198 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
130 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19364 0.(readWaiters := readWaiters+1;)ashow
142 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04826 0.(IF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04846 0.( writeWaiters > 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09651 0.(THEN)ashow
154 234 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15748 0.(Thread.Signal\(cW\);)ashow
166 234 gm
-0.12158 0.(Thread.Wait\(m,cR\);)ashow
178 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
190 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10073 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05813 0.( i < 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11293 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07618 0.( Thread.Wait\(m,cR\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10713 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
202 216 gm
-0.21826 0.(readWaiters := readWaiters-1;)ashow
214 216 gm
0.57403 0. 32 0.05740 0.(i := i+1;)awidthshow
226 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
238 198 gm
-0.11231 0.(Thread.Signal\(cR\);)ashow
250 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.34866 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.26361 0.( AcquireShared;)ashow
274 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21968 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16255 0.( AcquireExclusive\(\);)ashow
286 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
298 198 gm
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
310 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06994 0.(writeWaiters := writeWaiters+1;)ashow
322 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13752 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07720 0.( i # 0 )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15417 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10746 0.( Thread.Wait\(m,cW\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14625 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
334 216 gm
-0.09288 0.(writeWaiters := writeWaiters-1;)ashow
346 216 gm
0.25848 0. 32 0.02584 0.(i := -1;)awidthshow
358 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
370 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21990 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16140 0.( AcquireExclusive;)ashow
394 144 gm
1.23321 0. 32 0.12332 0.(There is no limit to how complicated this can become, implementing ever more)awidthshow
406 126 gm
0.07827 0. 32 0.00782 0.(elaborate scheduling policies. The programmer must exercise restraint, and only add such)awidthshow
418 126 gm
-0.07212 0.(features if they are really required by the actual load on the resource.)ashow
446 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.27339 0.(Complexity)ashow
464 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.74142 0. 32 0.07414 0.(As you can see, worrying about these spurious wake-ups, lock conflicts and starvation)awidthshow
476 126 gm
0.10162 0. 32 0.01016 0.(makes the program more complicated. The first solution of the reader/writer problem that)awidthshow
488 126 gm
0.10498 0. 32 0.01049 0.(I showed you had 15 lines inside the procedure bodies; the final version had 30 lines, and)awidthshow
500 126 gm
0.67565 0. 32 0.06756 0.(some quite subtle reasoning about its correctness. You need to consider, for each case,)awidthshow
512 126 gm
1.02630 0. 32 0.10263 0.(whether the potential cost of ignoring the problem is enough to merit writing a more)awidthshow
524 126 gm
0.49468 0. 32 0.04946 0.(complex program. This decision will depend on the performance characteristics of your)awidthshow
536 126 gm
0.14144 0. 32 0.01414 0.(threads implementation, on whether you are using a multi-processor, and on the expected)awidthshow
548 126 gm
1.58996 0. 32 0.15899 0.(load on your resource. In particular, if your resource is mostly )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.47270 0.(not)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.22161 0. 32 0.12216 0.( in use then the)awidthshow
560 126 gm
1.00143 0. 32 0.10014 0.(performance effects will not be a problem, and you should adopt the simplest coding)awidthshow
572 126 gm
0.12313 0.(style.)ashow
584 144 gm
0.00411 0. 32 0.00041 0.(Usually, I find that moving the call of \322Signal\323 to beyond the end of the )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(LOCK)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( clause)show
596 126 gm
0.09292 0. 32 0.00929 0.(is easy and worth the trouble, and that the other performance enhancements are not worth)awidthshow
608 126 gm
1.60385 0. 32 0.16038 0.(making. But sometimes they are important, and you should only ignore them after)awidthshow
620 126 gm
-0.04164 0.(explicitly considering whether they are required in your particular situation.)ashow
648 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.33038 0.(Deadlock)ashow
666 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.25070 0. 32 0.02507 0.(You can introduce deadlocks by using condition variables. For example, if you have two)awidthshow
678 126 gm
-0.08065 0.(resources \(call them \(1\) and \(2\)\), the following sequence of actions produces a deadlock.)ashow
F T cp
%%Page: ? 24
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(20\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 180 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17123 0.(Thread A acquires resource \(1\);)ashow
130 180 gm
-0.18620 0.(Thread B acquires resource \(2\);)ashow
142 180 gm
-0.00315 0.(Thread A wants \(2\), so it waits on \(2\)\325s condition variable;)ashow
154 180 gm
-0.00605 0.(Thread B wants \(1\), so it waits on \(1\)\325s condition variable.)ashow
178 144 gm
0.42602 0. 32 0.04260 0.(Deadlocks such as this are not significantly different from the ones we discussed in)awidthshow
190 126 gm
0.04302 0. 32 0.00430 0.(connection with mutexes. You should arrange that there is a partial order on the resources)awidthshow
202 126 gm
1.43142 0. 32 0.14314 0.(managed with condition variables, and that each thread wishing to acquire multiple)awidthshow
214 126 gm
0.56808 0. 32 0.05680 0.(resources does so according to this order. So, for example, you might decide that \(1\) is)awidthshow
226 126 gm
1.05560 0. 32 0.10556 0.(ordered before \(2\). Then thread B would not be permitted to try to acquire \(1\) while)awidthshow
238 126 gm
-0.04301 0.(holding \(2\), so the deadlock would not occur.)ashow
250 144 gm
1.65267 0. 32 0.16526 0.(One interaction between condition variables and mutexes is a subtle source of)awidthshow
262 126 gm
-0.07771 0.(deadlock. Consider the following two procedures.)ashow
286 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05720 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03894 0.( a, b: Thread.Mutex;)ashow
298 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10937 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07411 0.( c: Thread.Condition;)ashow
310 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.31723 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18774 0.( ready: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30763 0.(BOOLEAN)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
334 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21351 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15786 0.( Get\(\);)ashow
346 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
358 198 gm
-0.25163 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12928 0.( a )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.53398 0.(DO)ashow
370 216 gm
-0.19212 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10456 0.( b )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.40766 0.(DO)ashow
382 234 gm
-0.28302 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12207 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30097 0.(NOT)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.18975 0.( ready )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.24812 0.(DO )ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20491 0.(Thread.Wait\(b,c\) )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.30097 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
394 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
406 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
418 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19470 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15567 0.( Get;)ashow
442 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20091 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15145 0.( Give\(\);)ashow
454 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
466 198 gm
-0.25163 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12928 0.( a )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.53398 0.(DO)ashow
478 216 gm
-0.19212 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10456 0.( b )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.40766 0.(DO)ashow
490 234 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13624 0.(ready := )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.20220 0.(TRUE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14442 0.(; Thread.Signal\(c\);)ashow
502 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
514 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
526 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17211 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13801 0.( Give;)ashow
550 144 gm
0.33294 0. 32 0.03329 0.(If \322ready\323 is )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.15525 0.(FALSE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.36651 0. 32 0.03665 0.( and thread A calls \322Get\323, it will block on a call of \322Wait\(b,c\)\323.)awidthshow
562 126 gm
0.19515 0. 32 0.01951 0.(This unlocks \322b\323, but leaves \322a\323 locked. So if thread B calls \322Give\323, intending to cause a)awidthshow
574 126 gm
0.60089 0. 32 0.06008 0.(call of \322Signal\(c\)\323, it will instead block trying to lock \322a\323, and your program will have)awidthshow
586 126 gm
-0.03201 0.(deadlocked. Clearly, this example is trivial, since mutex \322a\323 does not protect any data \(and)ashow
598 126 gm
-0.04562 0.(the potential for deadlock is quite apparent anyway\), but the overall pattern does occur.)ashow
610 144 gm
0.70526 0. 32 0.07052 0.(Most often this problem occurs when you lock a mutex at one abstraction level of)awidthshow
622 126 gm
1.30599 0. 32 0.13059 0.(your program then call down to a lower level, which \(unknown to the higher level\))awidthshow
634 126 gm
0.29296 0. 32 0.02929 0.(blocks. If this block can be freed only by a thread that is holding the higher level mutex,)awidthshow
646 126 gm
0.09674 0. 32 0.00967 0.(you will deadlock. It is generally risky to call into a lower level abstraction while holding)awidthshow
658 126 gm
1.09771 0. 32 0.10977 0.(one of your mutexes, unless you understand fully the circumstances under which the)awidthshow
670 126 gm
0.33843 0. 32 0.03384 0.(called procedure might block. One solution here is to explicitly unlock the mutex before)awidthshow
682 126 gm
1.15112 0. 32 0.11511 0.(calling the lower level abstraction, as we discussed earlier; but as we discussed, this)awidthshow
F T cp
%%Page: ? 25
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31221)ashow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.03683 0. 32 0.10368 0.(solution has its own dangers. A better solution is to arrange to end the )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.47982 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.34582 0. 32 0.13458 0.( clause)awidthshow
130 126 gm
1.11892 0. 32 0.11189 0.(before calling down. You can find further discussions of this problem, known as the)awidthshow
142 126 gm
-0.00297 0.(\322nested monitor problem\323, in the literature [8].)ashow
178 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.15963 0.(USING FORK: WORKING IN PARALLEL)ashow
196 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.00416 0.(As we discussed earlier, there are several classes of situations where you will want to fork)ashow
208 126 gm
0.36605 0. 32 0.03660 0.(a thread: to utilize a multi-processor; to do useful work while waiting for a slow device;)awidthshow
220 126 gm
0.22613 0. 32 0.02261 0.(to satisfy human users by working on several actions at once; to provide network service)awidthshow
232 126 gm
0.21636 0. 32 0.02163 0.(to multiple clients simultaneously; and to defer work until a less busy time.)awidthshow
244 144 gm
-0.02725 0.(It is quite common to find straightforward application programs using several threads.)ashow
256 126 gm
0.46371 0. 32 0.04637 0.(For example, you might have one thread doing your main computation, a second thread)awidthshow
268 126 gm
0.12039 0. 32 0.01203 0.(writing some output to a file, a third thread waiting for \(or responding to\) interactive user)awidthshow
280 126 gm
0.88256 0. 32 0.08825 0.(input, and a fourth thread running in background to clean up your data structures \(for)awidthshow
292 126 gm
0.78491 0. 32 0.07849 0.(example, re-balancing a tree\). In the programs we build at SRC, several of our library)awidthshow
304 126 gm
-0.07777 0.(packages fork threads internally.)ashow
316 144 gm
0.82992 0. 32 0.08299 0.(When you are programming with threads, you usually drive slow devices through)awidthshow
328 126 gm
-0.01387 0.(synchronous library calls that suspend the calling thread until the device action completes,)ashow
340 126 gm
0.55786 0. 32 0.05578 0.(but allow other threads in your address space to continue. You will find no need to use)awidthshow
352 126 gm
1.32186 0. 32 0.13218 0.(older schemes for asynchronous operation \(such as interrupts, Unix signals or VMS)awidthshow
364 126 gm
0.90225 0. 32 0.09022 0.(AST\325s\). If you don\325t want to wait for the result of a device interaction, invoke it in a)awidthshow
376 126 gm
0.13275 0. 32 0.01327 0.(separate thread. If you want to have multiple device requests outstanding simultaneously,)awidthshow
388 126 gm
2.93167 0. 32 0.29316 0.(invoke them in multiple threads. If your operating system still delivers some)awidthshow
400 126 gm
1.17584 0. 32 0.11758 0.(asynchronous events through these older mechanisms, the runtime library supporting)awidthshow
412 126 gm
0.94238 0. 32 0.09423 0.(your threads facility should convert them into more appropriate mechanisms. See, for)awidthshow
424 126 gm
1.78695 0. 32 0.17869 0.(example, the design of the Topaz system calls [11] or the exception and trapping)awidthshow
436 126 gm
-0.00807 0.(machinery included with Sun\325s lightweight process library [14,15].)ashow
448 144 gm
1.13479 0. 32 0.11347 0.(If your program is interacting with a human user, you will usually want it to be)awidthshow
460 126 gm
0.13916 0. 32 0.01391 0.(responsive even while it is working on some request. This is particularly true of window-)awidthshow
472 126 gm
0.35446 0. 32 0.03544 0.(oriented interfaces. It is particularly infuriating to the user if the interactive display goes)awidthshow
484 126 gm
2.61993 0. 32 0.26199 0.(dumb just because the database query is taking a long time. You can achieve)awidthshow
496 126 gm
0.65917 0. 32 0.06591 0.(responsiveness by using extra threads. Often, the designer of your window system will)awidthshow
508 126 gm
0.07324 0. 32 0.00732 0.(have already done this for you, and will always call your program in a separate thread. At)awidthshow
520 126 gm
0.41824 0. 32 0.04182 0.(other times, the window system will call your program in a single thread synchronously)awidthshow
532 126 gm
0.01754 0. 32 0.00175 0.(with the user input event. In this latter case, you must decide whether the requested action)awidthshow
544 126 gm
1.75445 0. 32 0.17544 0.(is short enough to do it synchronously, or whether you should fork a thread. The)awidthshow
556 126 gm
0.48614 0. 32 0.04861 0.(complexity introduced by using forked threads here is that you need to exercise a lot of)awidthshow
568 126 gm
0.11779 0. 32 0.01177 0.(care in accessing data from the interactive interface \(for example, the value of the current)awidthshow
580 126 gm
0.09124 0. 32 0.00912 0.(selection, or the contents of editable text areas\) since these values might change once you)awidthshow
592 126 gm
0.30044 0. 32 0.03004 0.(start executing asynchronously. This is a difficult design issue, and each window system)awidthshow
604 126 gm
-0.00218 0.(tackles it differently. I have not yet seen a totally satisfactory design.)ashow
616 144 gm
0.16799 0. 32 0.01679 0.(Network servers are usually required to service multiple clients concurrently. If your)awidthshow
628 126 gm
0.21514 0. 32 0.02151 0.(network communication is based on RPC [3], this will happen without any work on your)awidthshow
640 126 gm
0.18936 0. 32 0.01893 0.(part, since the server side of your RPC system will invoke each concurrent incoming call)awidthshow
652 126 gm
2.73040 0. 32 0.27304 0.(in a separate thread, by forking a suitable number of threads internally to its)awidthshow
664 126 gm
1.77825 0. 32 0.17782 0.(implementation. But you can use multiple threads even with other communication)awidthshow
676 126 gm
-0.02569 0.(paradigms. For example, in a traditional connection-oriented protocol \(such as file transfer)ashow
F T cp
%%Page: ? 26
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(22\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
2.02789 0. 32 0.20278 0.(layered on top of TCP\), you should probably fork one thread for each incoming)awidthshow
130 126 gm
0.57312 0. 32 0.05731 0.(connection. Conversely, if you are writing a client program and you don\325t want to wait)awidthshow
142 126 gm
-0.04455 0.(for the reply from a network server, invoke the server from a separate thread.)ashow
154 144 gm
0.53527 0. 32 0.05352 0.(The technique of adding threads in order to defer work is quite valuable. There are)awidthshow
166 126 gm
0.52398 0. 32 0.05239 0.(several variants of the scheme. The simplest is that as soon as your procedure has done)awidthshow
178 126 gm
0.05874 0. 32 0.00587 0.(enough work to compute its result, you fork a thread to do the remainder of the work, and)awidthshow
190 126 gm
-0.01625 0.(then return to your caller in the original thread. This reduces the latency of your procedure)ashow
202 126 gm
-0.03170 0.(\(the elapsed time from being called to returning\), in the hope that the deferred work can be)ashow
214 126 gm
-0.02626 0.(done more cheaply later \(for example, because a processor goes idle\). The disadvantage of)ashow
226 126 gm
0.54000 0. 32 0.05400 0.(this simplest approach is that it might create large numbers of threads, and it incurs the)awidthshow
238 126 gm
0.84228 0. 32 0.08422 0.(cost of calling \322Fork\323 each time. Often, it is preferable to keep a single housekeeping)awidthshow
250 126 gm
0.87768 0. 32 0.08776 0.(thread and feed requests to it. It\325s even better when the housekeeper doesn't need any)awidthshow
262 126 gm
0.87188 0. 32 0.08718 0.(information from the main threads, beyond the fact that there is work to be done. For)awidthshow
274 126 gm
0.91461 0. 32 0.09146 0.(example, this will be true when the housekeeper is responsible for maintaining a data)awidthshow
286 126 gm
0.57846 0. 32 0.05784 0.(structure in an optimal form, although the main threads will still get the correct answer)awidthshow
298 126 gm
0.80734 0. 32 0.08073 0.(without this optimization. An additional technique here is to program the housekeeper)awidthshow
310 126 gm
0.59173 0. 32 0.05917 0.(either to merge similar requests into a single action, or to restrict itself to run not more)awidthshow
322 126 gm
-0.03424 0.(often than a chosen periodic interval.)ashow
334 144 gm
0.20126 0. 32 0.02012 0.(On a multi-processor you will want to use \322Fork\323 in order to utilize as many of your)awidthshow
346 126 gm
1.10015 0. 32 0.11001 0.(processors as you can. There isn\325t much general advice I can give here\321mostly, the)awidthshow
358 126 gm
0.05828 0. 32 0.00582 0.(decisions about when and what to fork are too problem-specific. One general technique is)awidthshow
370 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.06051 0.(pipelining)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.20172 0. 32 0.02017 0.(, which I discuss in the next section.)awidthshow
398 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.03778 0.(Pipelining)ashow
416 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.08193 0. 32 0.00819 0.(On a multi-processor, there is one specialized use of additional threads that is particularly)awidthshow
428 126 gm
0.06927 0. 32 0.00692 0.(valuable. You can build a chain of producer-consumer relationships, known as a )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.01713 0.(pipeline)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
(.)show
440 126 gm
-0.01042 0.(For example, when thread A initiates an action, all it does is enqueue a request in a buffer.)ashow
452 126 gm
-0.00746 0.(Thread B takes the action from the buffer, performs part of the work, then enqueues it in a)ashow
464 126 gm
0.53787 0. 32 0.05378 0.(second buffer. Thread C takes it from there and does the rest of the work. This forms a)awidthshow
476 126 gm
-0.01335 0.(three-stage pipeline. The three threads operate in parallel except when they synchronize to)ashow
488 126 gm
0.73471 0. 32 0.07347 0.(access the buffers, so this pipeline is capable of utilizing up to three processors. At its)awidthshow
500 126 gm
-0.01058 0.(best, pipelining can achieve almost linear speed-up and can fully utilize a multi-processor.)ashow
512 126 gm
0.27572 0. 32 0.02757 0.(A pipeline can also be useful on a uni-processor if each thread will encounter some real-)awidthshow
524 126 gm
-0.02806 0.(time delays \(such as page faults, device handling or network communication\).)ashow
536 144 gm
1.57455 0. 32 0.15745 0.(For example, the following program fragment implements a simple three stage)awidthshow
548 126 gm
0.54031 0. 32 0.05403 0.(pipeline. An action is initiated by calling \322PaintChar\323. One auxiliary thread executes in)awidthshow
560 126 gm
-0.05317 0.(\322Rasterize\323 and another in \322Painter\323. The pipeline stages communicate through unbounded)ashow
572 126 gm
0.31707 0. 32 0.03170 0.(buffers implemented as linked lists whose last elements are \322rasterTail\323 and \322paintTail\323.)awidthshow
584 126 gm
0.14648 0. 32 0.01464 0.(The initial values of the tails are dummy elements, to make the program simpler.)awidthshow
608 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04411 0.(TYPE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03038 0.( RasterList = )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04315 0.(REF)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04771 0.(RECORD)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02700 0.( ch: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04902 0.(CHAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02946 0.(; next: RasterList )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04833 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
620 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(TYPE)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.02456 0. 32 0.00245 0.( PaintList = )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(REF)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.01309 0.(RECORD)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.02944 0. 32 0.00294 0.( r: Bitmap; next: PaintList )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(END)show
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
632 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05546 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03425 0.( rasterTail: RasterList;)ashow
644 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.07710 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.24581 0. 32 0.02458 0.( paintTail: PaintList;)awidthshow
656 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08406 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06243 0.( m: Thread.Mutex;)ashow
668 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06367 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04232 0.( c1, c2: Thread.Condition;)ashow
F T cp
%%Page: ? 27
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31223)ashow
118 180 gm
bu fc
2 F /|______Times-Roman fnt
bn
-0.13887 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09324 0.( PaintChar\(arg: )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14601 0.(CHAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.14263 0.(\);)ashow
130 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.06724 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.18966 0. 32 0.01896 0.( this: RasterList;)awidthshow
142 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
154 198 gm
-0.21072 0.(NEW)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12278 0.(\(this\);)ashow
166 198 gm
-0.04402 0.(this^.ch := arg; this^.next := )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05938 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
178 198 gm
-0.06188 0.(\(* Enqueue request for Rasterize thread .... *\))ashow
190 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
202 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01811 0.(rasterTail^.next := this; rasterTail := this;)ashow
214 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
226 198 gm
-0.13168 0.(Thread.Signal\(c1\);)ashow
238 198 gm
0.21438 0. 32 0.02143 0.(\(* Now return to our caller .... *\))awidthshow
250 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.07354 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05401 0.( PaintChar;)ashow
274 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08561 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.05598 0.( Rasterize\(init: RasterList\);)ashow
286 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.03488 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.09750 0. 32 0.00975 0.( last: RasterList;)awidthshow
298 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.14958 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.40100 0. 32 0.04010 0.( this: PaintList;)awidthshow
310 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
322 198 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.49514 0. 32 0.04951 0.(last := init;)awidthshow
334 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.49844 0.(LOOP)ashow
346 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02926 0.(\(* Wait for RasterList request and dequeue it .... *\))ashow
358 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
370 234 gm
-0.16044 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10168 0.( last^.next = )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13830 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06919 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17984 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11453 0.( Thread.Wait\(m, c1\); )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17062 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
382 234 gm
-0.02062 0.(last := last^.next;)ashow
394 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
406 216 gm
0.20126 0. 32 0.02012 0.(\(* Convert character to bitmap .... *\))awidthshow
418 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.21072 0.(NEW)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12278 0.(\(this\);)ashow
430 216 gm
-0.02706 0.(this^.bitmap := Font.Map\(last^.ch\); this^.next := )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03437 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
442 216 gm
-0.05482 0.(\(* Enqueue request for painter thread .... *\))ashow
454 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
466 234 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.17532 0. 32 0.01753 0.(paintTail^.next := this; paintTail := this;)awidthshow
478 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
490 216 gm
-0.13168 0.(Thread.Signal\(c2\);)ashow
502 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
514 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.19892 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13708 0.( Rasterize;)ashow
538 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01895 0.(PROCEDURE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01211 0.( Painter\(init: PaintList\);)ashow
550 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.11566 0.(VAR)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.30715 0. 32 0.03071 0.( last: PaintList;)awidthshow
562 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.37248 0.(BEGIN)ashow
574 198 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.49514 0. 32 0.04951 0.(last := init;)awidthshow
586 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.49844 0.(LOOP)ashow
598 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01051 0.(\(* Wait for PaintList request and dequeue it .... *\))ashow
610 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15446 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10743 0.( m )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.32775 0.(DO)ashow
622 234 gm
-0.16044 0.(WHILE)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10168 0.( last^.next = )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.13830 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06919 0.( )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17984 0.(DO)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11453 0.( Thread.Wait\(m, c2\); )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.17062 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
634 234 gm
-0.02062 0.(last := last^.next;)ashow
646 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
F T cp
%%Page: ? 28
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(24\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 216 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.56594 0. 32 0.05659 0.(\(* Paint the bitmap .... *\))awidthshow
130 216 gm
-0.02676 0.(Display.PaintBitmap\(last^.bitmap\);)ashow
142 198 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.36822 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
154 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12904 0.(END)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.08792 0.( Painter;)ashow
178 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.16789 0.(NEW)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.09063 0.(\(rasterTail\); rasterTail.next := )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.12281 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
190 180 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.06690 0.(NEW)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.03706 0.(\(paintTail\); paintTail.next := )ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.04895 0.(NIL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
(;)show
202 180 gm
-0.10684 0.(Thread.Fork\(Rasterize, rasterTail\);)ashow
214 180 gm
-0.05004 0.(Thread.Fork\(Painter, paintTail\);)ashow
238 144 gm
1.04965 0. 32 0.10496 0.(There are two problems with pipelining. First, you need to be careful about how)awidthshow
250 126 gm
0.26214 0. 32 0.02621 0.(much of the work gets done in each stage. The ideal is that the stages are equal: this will)awidthshow
262 126 gm
0.21575 0. 32 0.02157 0.(provide maximum throughput, by utilizing all your processors fully. Achieving this ideal)awidthshow
274 126 gm
0.00625 0. 32 0.00062 0.(requires hand tuning, and re-tuning as the program changes. Second, the number of stages)awidthshow
286 126 gm
0.16098 0. 32 0.01609 0.(in your pipeline determines statically the amount of concurrency. If you know how many)awidthshow
298 126 gm
0.38452 0. 32 0.03845 0.(processors you have, and exactly where the real-time delays occur, this will be fine. For)awidthshow
310 126 gm
1.16180 0. 32 0.11618 0.(more flexible or portable environments it can be a problem. Despite these problems,)awidthshow
322 126 gm
0.00961 0. 32 0.00096 0.(pipelining is a powerful technique that has wide applicability.)awidthshow
350 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.24658 0. 32 0.02465 0.(The impact of your environment)awidthshow
368 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.24963 0. 32 0.02496 0.(The design of your operating system and runtime libraries will affect the extent to which)awidthshow
380 126 gm
0.80337 0. 32 0.08033 0.(it is desirable or useful to fork threads. Your operating system should not suspend the)awidthshow
392 126 gm
0.56747 0. 32 0.05674 0.(entire address space just because one thread is blocked for an i/o request \(or for a page)awidthshow
404 126 gm
0.42236 0. 32 0.04223 0.(fault\). Your operating system and your libraries must permit calls from multiple threads)awidthshow
416 126 gm
1.34033 0. 32 0.13403 0.(in parallel. Generally, in a well-designed environment for supporting multi-threaded)awidthshow
428 126 gm
1.39495 0. 32 0.13949 0.(programs you will find that the facilities of your operating system and libraries are)awidthshow
440 126 gm
0.00946 0. 32 0.00094 0.(available as synchronous calls that block only the calling thread [11].)awidthshow
452 144 gm
2.03170 0. 32 0.20317 0.(You will need to know some of the performance parameters of your threads)awidthshow
464 126 gm
1.07894 0. 32 0.10789 0.(implementation. What is the cost of creating a thread? What is the cost of keeping a)awidthshow
476 126 gm
0.49209 0. 32 0.04920 0.(blocked thread in existence? What is the cost of a context switch? What is the cost of a)awidthshow
488 126 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.04373 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.09872 0. 32 0.00987 0.( clause when the mutex is not locked? Knowing these, you will be able to decide to)awidthshow
500 126 gm
-0.01362 0.(what extent it is feasible or useful to add extra threads to your program.)ashow
528 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.10470 0.(Potential problems with adding threads)ashow
546 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.62408 0. 32 0.06240 0.(You need to exercise a little care in adding threads, or you will find that your program)awidthshow
558 126 gm
-0.04206 0.(runs slower instead of faster.)ashow
570 144 gm
-0.01052 0.(If you have significantly more threads ready to run than there are processors, you will)ashow
582 126 gm
-0.03254 0.(usually find that your performance degrades. This is partly because most thread schedulers)ashow
594 126 gm
1.14425 0. 32 0.11442 0.(are quite slow at making general re-scheduling decisions. If there is a processor idle)awidthshow
606 126 gm
0.24856 0. 32 0.02485 0.(waiting for your thread, the scheduler can probably get it there quite quickly. But if your)awidthshow
618 126 gm
0.05706 0. 32 0.00570 0.(thread has to be put on a queue, and later swapped into a processor in place of some other)awidthshow
630 126 gm
1.13937 0. 32 0.11393 0.(thread, it will be more expensive. A second effect is that if you have lots of threads)awidthshow
642 126 gm
0.42633 0. 32 0.04263 0.(running they are more likely to conflict over mutexes or over the resources managed by)awidthshow
654 126 gm
-0.02877 0.(your condition variables.)ashow
666 144 gm
0.11932 0. 32 0.01193 0.(Mostly, when you add threads just to improve your program\325s structure \(for example)awidthshow
678 126 gm
0.76675 0. 32 0.07667 0.(driving slow devices, or responding to mouse clicks speedily, or for RPC invocations\))awidthshow
F T cp
%%Page: ? 29
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31225)ashow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.17395 0. 32 0.01739 0.(you will not encounter this problem; but when you add threads for performance purposes)awidthshow
130 126 gm
0.91873 0. 32 0.09187 0.(\(such as performing multiple actions in parallel, or deferring work, or utilizing multi-)awidthshow
142 126 gm
-0.01718 0.(processors\), you will need to worry whether you are overloading the system.)ashow
154 144 gm
0.52825 0. 32 0.05282 0.(But let me stress that this warning applies only to the threads that are ready to run.)awidthshow
166 126 gm
0.33950 0. 32 0.03395 0.(The expense of having threads blocked on condition variables is usually less significant,)awidthshow
178 126 gm
1.48117 0. 32 0.14811 0.(being just the memory used for scheduler data structures and the thread stack. The)awidthshow
190 126 gm
1.96380 0. 32 0.19638 0.(programs at SRC often have quite a large number of blocked threads. \(50 is not)awidthshow
202 126 gm
1.78497 0. 32 0.17849 0.(uncommon in application programs; there are usually hundreds blocked inside the)awidthshow
214 126 gm
-0.00447 0.(operating system\321even on personal workstations.\))ashow
226 144 gm
0.83892 0. 32 0.08389 0.(In most systems the thread creation and termination facilities are not cheap. Your)awidthshow
238 126 gm
-0.03837 0.(threads implementation will probably take care to cache a few terminated thread carcasses,)ashow
250 126 gm
0.66986 0. 32 0.06698 0.(so that you don\325t pay for stack creation on each fork, but nevertheless a call of \322Fork\323)awidthshow
262 126 gm
0.95550 0. 32 0.09555 0.(will probably incur a total cost of about two or three re-scheduling decisions. So you)awidthshow
274 126 gm
0.63583 0. 32 0.06358 0.(shouldn\325t fork too small a computation into a separate thread. One useful measure of a)awidthshow
286 126 gm
0.54428 0. 32 0.05442 0.(threads implementation on a multi-processor is the smallest computation for which it is)awidthshow
298 126 gm
-0.04525 0.(profitable to fork a thread.)ashow
310 144 gm
0.34484 0. 32 0.03448 0.(Despite these cautions, be aware that our experience at SRC running multi-threaded)awidthshow
322 126 gm
0.08010 0. 32 0.00801 0.(applications on a 5-way multi-processor has been that programmers are as likely to err by)awidthshow
334 126 gm
-0.01789 0.(creating too few threads as by creating too many.)ashow
370 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.18119 0.(USING ALERT: DIVERTING THE FLOW OF CONTROL)ashow
388 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.72586 0. 32 0.07258 0.(The purpose of alerts is to cause termination of a long running computation or a long-)awidthshow
400 126 gm
1.98501 0. 32 0.19850 0.(term wait. For example, on a multi-processor it might be useful to fork multiple)awidthshow
412 126 gm
0.55282 0. 32 0.05528 0.(competing algorithms to solve the same problem, and when the first of them completes)awidthshow
424 126 gm
0.06393 0. 32 0.00639 0.(you abort the others. Or you might embark on a long computation \(e.g. a database query\),)awidthshow
436 126 gm
0.10375 0. 32 0.01037 0.(but abort it if the user clicks a )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.05831 0.(CANCEL)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.17471 0. 32 0.01747 0.( button.)awidthshow
448 144 gm
1.51245 0. 32 0.15124 0.(The programming convention we use at SRC is that any procedure in a public)awidthshow
460 126 gm
0.35934 0. 32 0.03593 0.(interface that might incur a long computation or a long-term wait should be alertable. In)awidthshow
472 126 gm
0.00671 0. 32 0.00067 0.(other words, a long computation should occasionally call \322TestAlert\323 and long-term waits)awidthshow
484 126 gm
1.23779 0. 32 0.12377 0.(should be calls of \322AlertWait\323 instead of \322Wait\323. In this context \322long\323 means long)awidthshow
496 126 gm
0.55786 0. 32 0.05578 0.(enough to upset a human user. The attraction of this convention is that you can be sure)awidthshow
508 126 gm
0.59844 0. 32 0.05984 0.(that the user can always regain control of the application program. The disadvantage is)awidthshow
520 126 gm
0.60440 0. 32 0.06044 0.(that programs calling these procedures must be prepared for the \322Alerted\323 exception to)awidthshow
532 126 gm
0.63354 0. 32 0.06335 0.(come out of them. This convention is less rigorously applied when a single entry point)awidthshow
544 126 gm
-0.00244 0.(occasionally \(but not always\) causes a long-term wait.)ashow
556 144 gm
0.61935 0. 32 0.06193 0.(Another programming convention we have is that you should only alert a thread if)awidthshow
568 126 gm
1.14791 0. 32 0.11479 0.(you forked the thread. For example, a package should not alert a caller\325s thread that)awidthshow
580 126 gm
0.31265 0. 32 0.03126 0.(happens to be executing inside the package. This convention allows you to view an alert)awidthshow
592 126 gm
-0.02172 0.(as an indication that the thread should terminate completely.)ashow
604 144 gm
0.76354 0. 32 0.07635 0.(The problem with alerts \(or any other form of asynchronous interrupt mechanism,)awidthshow
616 126 gm
0.69381 0. 32 0.06938 0.(such as Apollo\325s \322task_$signal\323\) is that they are, by their very nature, intrusive. Using)awidthshow
628 126 gm
-0.00170 0.(them will tend to make your program less well structured. A straightforward-looking flow)ashow
640 126 gm
-0.00140 0.(of control in one thread can suddenly be diverted because of an action initiated by another)ashow
652 126 gm
0.21484 0. 32 0.02148 0.(thread. This is another example of a facility that makes it harder to verify the correctness)awidthshow
664 126 gm
0.15670 0. 32 0.01567 0.(of a piece of program by local inspection. Unless alerts are used with great restraint, they)awidthshow
676 126 gm
-0.04823 0.(will make your program unreadable, unmaintainable, and perhaps incorrect.)ashow
F T cp
%%Page: ? 30
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(26\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 144 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.30822 0. 32 0.03082 0.(There are alternatives to using alerts. If you know which condition variable a thread)awidthshow
130 126 gm
0.57922 0. 32 0.05792 0.(is blocked on, you can more simply prod it by setting a boolean flag and signalling the)awidthshow
142 126 gm
0.39642 0. 32 0.03964 0.(condition variable. A package could provide additional entry points whose purpose is to)awidthshow
154 126 gm
-0.06402 0.(prod a thread blocked inside the package on a long-term wait.)ashow
166 144 gm
0.27221 0. 32 0.02722 0.(Alerts are most useful when you don\325t know exactly what is going on. For example,)awidthshow
178 126 gm
0.21652 0. 32 0.02165 0.(the target thread might be blocked in any of several packages, or within a single package)awidthshow
190 126 gm
1.33514 0. 32 0.13351 0.(it might be blocked on any of several condition variables. In these cases an alert is)awidthshow
202 126 gm
0.22216 0. 32 0.02221 0.(certainly the best solution. Even when other alternatives are available, it might be best to)awidthshow
214 126 gm
-0.02197 0.(use alerts just because they are a single unified scheme for provoking thread termination.)ashow
226 144 gm
1.18347 0. 32 0.11834 0.(There is no consensus yet among the designers of thread facilities about how to)awidthshow
238 126 gm
0.41305 0. 32 0.04130 0.(tackle this problem. Each designer has his own solution, and each solution so far has its)awidthshow
250 126 gm
0.25848 0. 32 0.02584 0.(own problems.)awidthshow
286 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.11651 0.(ADDITIONAL TECHNIQUES)ashow
304 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.73181 0. 32 0.07318 0.(Most of the programming paradigms for using threads are quite simple. I\325ve described)awidthshow
316 126 gm
0.40710 0. 32 0.04071 0.(several of them earlier; you will discover many others as you gain experience. A few of)awidthshow
328 126 gm
0.75515 0. 32 0.07551 0.(the useful techniques are much less obvious. This section describes some of these less)awidthshow
340 126 gm
0.45654 0. 32 0.04565 0.(obvious ones.)awidthshow
368 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.20445 0.(Up-calls)ashow
386 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.19842 0. 32 0.11984 0.(Most of the time most programmers build their programs using layered abstractions.)awidthshow
398 126 gm
0.13916 0. 32 0.01391 0.(Higher level abstractions call only lower level ones, and abstractions at the same level do)awidthshow
410 126 gm
0.09902 0. 32 0.00990 0.(not call each other. All actions are initiated at the top level.)awidthshow
422 144 gm
1.19949 0. 32 0.11994 0.(This methodology carries over quite well to a world with concurrency. You can)awidthshow
434 126 gm
0.09292 0. 32 0.00929 0.(arrange that each thread will honor the abstraction boundaries. Permanent d\276mon threads)awidthshow
446 126 gm
2.16674 0. 32 0.21667 0.(within an abstraction initiate calls to lower levels, but not to higher levels. The)awidthshow
458 126 gm
0.60836 0. 32 0.06083 0.(abstraction layering has the added benefit that it forms a partial order, and this order is)awidthshow
470 126 gm
0.43411 0. 32 0.04341 0.(sufficient to prevent deadlocks when locking mutexes, without any additional care from)awidthshow
482 126 gm
-0.04524 0.(the programmer.)ashow
494 144 gm
0.32470 0. 32 0.03247 0.(This purely top-down layering is not satisfactory when actions that affect high-level)awidthshow
506 126 gm
0.64987 0. 32 0.06498 0.(abstractions can be initiated at a low layer in your system. One frequently encountered)awidthshow
518 126 gm
0.29052 0. 32 0.02905 0.(example of this is on the receiving side of network communications. Other examples are)awidthshow
530 126 gm
-0.02980 0.(user input, and spontaneous state changes in peripheral devices such as disks and tapes.)ashow
542 144 gm
0.46463 0. 32 0.04646 0.(Consider the example of a communications package dealing with incoming packets)awidthshow
554 126 gm
-0.03800 0.(from a network. Here there are typically three or more layers of dispatch \(corresponding to)ashow
566 126 gm
0.43685 0. 32 0.04368 0.(the data link, network and transport layers in OSI terminology\). If you try to maintain a)awidthshow
578 126 gm
0.19134 0. 32 0.01913 0.(top-down calling hierarchy, you will find that you incur a context switch in each of these)awidthshow
590 126 gm
-0.01947 0.(layers. The thread that wishes to receive data from its transport layer connection cannot be)ashow
602 126 gm
0.66787 0. 32 0.06678 0.(the thread that dispatches an incoming ethernet packet, since the ethernet packet might)awidthshow
614 126 gm
0.87310 0. 32 0.08731 0.(belong to a different connection, or a different protocol \(for example, UDP instead of)awidthshow
626 126 gm
1.19781 0. 32 0.11978 0.(TCP\), or a different protocol family altogether \(for example, DECnet instead of IP\).)awidthshow
638 126 gm
1.03286 0. 32 0.10328 0.(Many implementers have tried to maintain this layering for packet reception, and the)awidthshow
650 126 gm
-0.05567 0.(effect has been uniformly bad performance\321dominated by the cost of context switches.)ashow
662 144 gm
1.49429 0. 32 0.14942 0.(The alternative technique is known as \322up-calls\323 [5]. In this methodology, you)awidthshow
674 126 gm
1.15646 0. 32 0.11564 0.(maintain a pool of threads willing to receive incoming data link layer \(e.g. ethernet\))awidthshow
F T cp
%%Page: ? 31
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31227)ashow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.96618 0. 32 0.09661 0.(packets. The receiving thread dispatches on ethernet protocol type and calls )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.29632 0.(up)ashow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.56976 0. 32 0.05697 0.( to the)awidthshow
130 126 gm
0.21545 0. 32 0.02154 0.(network layer \(e.g. DECnet or IP\), where it dispatches again and calls up to the transport)awidthshow
142 126 gm
0.64315 0. 32 0.06431 0.(layer \(e.g. TCP\), where there is a final dispatch to the appropriate connection. In some)awidthshow
154 126 gm
0.75683 0. 32 0.07568 0.(systems, this up-call paradigm extends into the application. The attraction here is high)awidthshow
166 126 gm
0.29479 0. 32 0.02947 0.(performance: there are no unnecessary context switches. All the top-performing network)awidthshow
178 126 gm
-0.01124 0.(implementations are structured this way.)ashow
190 144 gm
0.73394 0. 32 0.07339 0.(You do pay for this performance. As usual, the programmer\325s task has been made)awidthshow
202 126 gm
-0.01034 0.(more complicated. Partly this is because each layer now has an up-call interface as well as)ashow
214 126 gm
-0.03620 0.(the traditional down-call interface. But also the synchronization problem has become more)ashow
226 126 gm
0.32852 0. 32 0.03285 0.(delicate. In a purely top-down system it is fine to hold one layer\325s mutex while calling a)awidthshow
238 126 gm
0.11093 0. 32 0.01109 0.(lower layer \(unless the lower layer might block on a condition variable and cause the sort)awidthshow
250 126 gm
0.18859 0. 32 0.01885 0.(of nested monitor deadlock we discussed earlier\). But in the presence of up-calls this can)awidthshow
262 126 gm
0.43899 0. 32 0.04389 0.(easily provoke a deadlock involving just the mutexes\321if an up-calling thread holding a)awidthshow
274 126 gm
0.25253 0. 32 0.02525 0.(lower level mutex needs to lock the higher level one. In other words, the presence of up-)awidthshow
286 126 gm
0.21270 0. 32 0.02127 0.(calls makes it more likely that you will violate the partial order rule for locking mutexes.)awidthshow
298 126 gm
0.36178 0. 32 0.03617 0.(To avoid this, you should generally avoid holding a mutex while making an up-call \(but)awidthshow
310 126 gm
-0.01708 0.(this is easier said than done\).)ashow
338 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.26992 0. 32 0.02699 0.(Version stamps)awidthshow
356 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.59570 0. 32 0.05957 0.(Sometimes concurrency can make it more difficult to use cached information. This can)awidthshow
368 126 gm
0.05569 0. 32 0.00556 0.(happen when a separate thread executing at a lower level in your system invalidates some)awidthshow
380 126 gm
1.70104 0. 32 0.17010 0.(information known to a thread currently executing at a higher level. For example,)awidthshow
392 126 gm
0.25314 0. 32 0.02531 0.(information about a disk volume might change\321either because of hardware problems or)awidthshow
404 126 gm
0.58120 0. 32 0.05812 0.(because the volume has been removed and replaced. You can use up-calls to invalidate)awidthshow
416 126 gm
0.91186 0. 32 0.09118 0.(cache structures at the higher level, but this will not invalidate state held locally by a)awidthshow
428 126 gm
0.01907 0. 32 0.00190 0.(thread. In the most extreme example, a thread might obtain information from a cache, and)awidthshow
440 126 gm
0.31051 0. 32 0.03105 0.(be about to call an operation at the lower level. Between the time the information comes)awidthshow
452 126 gm
1.01074 0. 32 0.10107 0.(from the cache and the time that the call actually occurs, the information might have)awidthshow
464 126 gm
-0.06195 0.(become invalid.)ashow
476 144 gm
1.93847 0. 32 0.19384 0.(A technique known as \322version stamps\323 can be useful here. In the low level)awidthshow
488 126 gm
1.28646 0. 32 0.12864 0.(abstraction you maintain a counter associated with the true data. Whenever the data)awidthshow
500 126 gm
1.59820 0. 32 0.15982 0.(changes, you increment the counter. \(Assume the counter is large enough to never)awidthshow
512 126 gm
1.78787 0. 32 0.17878 0.(overflow.\) Whenever a copy of some of the data is issued to a higher level, it is)awidthshow
524 126 gm
-0.03433 0.(accompanied by the current value of the counter. If higher level code is caching the data, it)ashow
536 126 gm
0.92468 0. 32 0.09246 0.(caches the associated counter value too. Whenever you make a call back down to the)awidthshow
548 126 gm
-0.01698 0.(lower level, and the call or its parameters depend on previously obtained data, you include)ashow
560 126 gm
0.32226 0. 32 0.03222 0.(the associated value of the counter. When the low level receives such a call, it compares)awidthshow
572 126 gm
0.96771 0. 32 0.09677 0.(the incoming value of the counter with the current truth value. If they are different it)awidthshow
584 126 gm
1.74850 0. 32 0.17485 0.(returns an exception to the higher level, which then knows to re-consider its call.)awidthshow
596 126 gm
2.00469 0. 32 0.20046 0.(\(Sometimes, you can provide the new data with the exception\). Incidentally, this)awidthshow
608 126 gm
-0.04785 0.(technique is also useful when maintaining cached data across a distributed system.)ashow
636 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.05337 0.(Work crews)ashow
654 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.50765 0. 32 0.05076 0.(There are situations that are best described as \322an embarrassment of parallelism\323, when)awidthshow
666 126 gm
0.43426 0. 32 0.04342 0.(you can structure your program to have vastly more concurrency than can be efficiently)awidthshow
678 126 gm
-0.04568 0.(accommodated on your machine. For example, a compiler implemented using concurrency)ashow
F T cp
%%Page: ? 32
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(28\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.55990 0. 32 0.15599 0.(might be willing to use a separate thread to compile each procedure, or even each)awidthshow
130 126 gm
0.81466 0. 32 0.08146 0.(statement. In such situations, if you fork one thread for each action you will create so)awidthshow
142 126 gm
1.13311 0. 32 0.11331 0.(many threads that the scheduler becomes quite inefficient, or so many that you have)awidthshow
154 126 gm
0.20416 0. 32 0.02041 0.(numerous lock conflicts, or so many that you run out of memory for the stacks.)awidthshow
166 144 gm
1.63589 0. 32 0.16358 0.(Your choice here is either to be more restrained in your forking, or to use an)awidthshow
178 126 gm
1.00845 0. 32 0.10084 0.(abstraction that will control your forking for you. Such an abstraction is described in)awidthshow
190 126 gm
2.08023 0. 32 0.20802 0.(Vandevoorde and Roberts\325 paper [17]. The basic idea is to enqueue requests for)awidthshow
202 126 gm
0.88928 0. 32 0.08892 0.(asynchronous activity and have a fixed pool of threads that perform the requests. The)awidthshow
214 126 gm
1.70120 0. 32 0.17012 0.(complexity comes in managing the requests, synchronizing between them, and co-)awidthshow
226 126 gm
-0.00305 0.(ordinating the results. See the paper for a full description.)ashow
238 144 gm
0.29647 0. 32 0.02964 0.(An alternative proposal, which SRC has not yet explored, is to implement \322Fork\323 in)awidthshow
250 126 gm
1.39572 0. 32 0.13957 0.(such a way that it defers actually creating the new thread until there is a processor)awidthshow
262 126 gm
0.49789 0. 32 0.04978 0.(available to run it. We call this proposal \322lazy forking\323, but we have not pursued it any)awidthshow
274 126 gm
-0.09996 0.(further.)ashow
310 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.26640 0.(BUILDING YOUR PROGRAM)ashow
328 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.18630 0. 32 0.01863 0.(A successful program must be useful, correct, live \(as defined below\) and efficient. Your)awidthshow
340 126 gm
-0.05049 0.(use of concurrency can impact each of these. I have discussed quite a few techniques in the)ashow
352 126 gm
0.21682 0. 32 0.02168 0.(previous sections that will help you. But how will you know if you have succeeded? The)awidthshow
364 126 gm
0.14678 0. 32 0.01467 0.(answer is not clear, but this section might help you towards discovering it.)awidthshow
376 144 gm
-0.01969 0.(The place where concurrency can affect usefulness is in the design of the interfaces to)ashow
388 126 gm
0.45120 0. 32 0.04512 0.(library packages. You must design your interfaces with the assumption that your callers)awidthshow
400 126 gm
0.42373 0. 32 0.04237 0.(will be using multiple threads. This means that you must ensure that all the entry points)awidthshow
412 126 gm
0.36132 0. 32 0.03613 0.(are thread re-entrant \(i.e. they can be called by multiple threads simultaneously\), even if)awidthshow
424 126 gm
0.49942 0. 32 0.04994 0.(this means that each procedure immediately locks a central mutex. You must not return)awidthshow
436 126 gm
0.85708 0. 32 0.08570 0.(results in shared global variables, nor in global statically allocated storage. Your calls)awidthshow
448 126 gm
0.01953 0. 32 0.00195 0.(should be synchronous, not returning until their results are available\321if your caller wants)awidthshow
460 126 gm
0.68511 0. 32 0.06851 0.(to do other work meanwhile, he can do it in other threads. Even if you don\325t presently)awidthshow
472 126 gm
0.69808 0. 32 0.06980 0.(have any multi-threaded clients of the interface, I strongly recommend that you follow)awidthshow
484 126 gm
0.13092 0. 32 0.01309 0.(these guidelines so that you will avoid problems in the future.)awidthshow
496 144 gm
0.53741 0. 32 0.05374 0.(By \322correct\323 I mean that if your program eventually produces an answer, it will be)awidthshow
508 126 gm
1.58416 0. 32 0.15841 0.(the one defined by its specification. Your programming environment is unlikely to)awidthshow
520 126 gm
0.06027 0. 32 0.00602 0.(provide much help here beyond what it already provides for sequential programs. Mostly,)awidthshow
532 126 gm
1.15661 0. 32 0.11566 0.(you must be fastidious about associating each piece of data with one \(and only one\))awidthshow
544 126 gm
0.43869 0. 32 0.04386 0.(mutex. If you don\325t pay constant attention to this, your task will be hopeless. If you use)awidthshow
556 126 gm
0.20965 0. 32 0.02096 0.(mutexes correctly, and you always use condition variables in the recommended style \(re-)awidthshow
568 126 gm
0.49301 0. 32 0.04930 0.(testing the boolean expression after returning from \322Wait\323\), then you are unlikely to go)awidthshow
580 126 gm
(wrong.)show
592 144 gm
1.89483 0. 32 0.18948 0.(By \322live\323, I mean that your program will eventually produce an answer. The)awidthshow
604 126 gm
0.46279 0. 32 0.04627 0.(alternatives are infinite loops or deadlock. I can\325t help you with infinite loops. I believe)awidthshow
616 126 gm
0.48339 0. 32 0.04833 0.(that the hints of the preceding sections will help you to avoid deadlocks. But if you fail)awidthshow
628 126 gm
0.18463 0. 32 0.01846 0.(and produce a deadlock, it should be quite easy to detect. Your major help in analyzing a)awidthshow
640 126 gm
1.42303 0. 32 0.14230 0.(deadlock will come from a symbolic debugger. The debugger must provide at least)awidthshow
652 126 gm
1.55822 0. 32 0.15582 0.(minimal support for threads\321enumerating the existing threads and looking at each)awidthshow
664 126 gm
0.76156 0. 32 0.07615 0.(thread\325s stack. Hopefully, your debugger will also provide some filtering in the thread)awidthshow
676 126 gm
1.36413 0. 32 0.13641 0.(enumeration, for example finding all threads that have a stack frame in a particular)awidthshow
F T cp
%%Page: ? 33
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31229)ashow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01065 0.(module, or finding all threads that are blocked on a particular mutex or condition variable.)ashow
130 126 gm
0.36865 0. 32 0.03686 0.(A very nice feature would be a facility to determine which thread is holding a particular)awidthshow
142 126 gm
0.10093 0.(mutex.)ashow
154 144 gm
1.64871 0. 32 0.16487 0.(By \322efficient\323, I mean that your program will make good use of the available)awidthshow
166 126 gm
0.10818 0. 32 0.01081 0.(computer resources, and therefore will produce its answer quickly. Again, the hints in the)awidthshow
178 126 gm
-0.02999 0.(previous sections should help you to avoid the problem of concurrency adversely affecting)ashow
190 126 gm
0.66772 0. 32 0.06677 0.(your performance. And again, your programming environment needs to give you some)awidthshow
202 126 gm
0.90866 0. 32 0.09086 0.(help. Performance bugs are the most insidious of problems, since you might not even)awidthshow
214 126 gm
0.38223 0. 32 0.03822 0.(notice that you have them. The sort of information you need to obtain includes statistics)awidthshow
226 126 gm
0.56045 0. 32 0.05604 0.(on lock conflicts \(for example, how often threads have had to block on this mutex, and)awidthshow
238 126 gm
0.62591 0. 32 0.06259 0.(how long they then had to wait\) and on concurrency levels \(for example, what was the)awidthshow
250 126 gm
0.51666 0. 32 0.05166 0.(average number of threads ready to execute in your program, or what percentage of the)awidthshow
262 126 gm
-0.14208 0.(time were \322n\323 threads ready\).)ashow
274 144 gm
0.89553 0. 32 0.08955 0.(One final warning: don\325t emphasize efficiency at the expense of correctness. It is)awidthshow
286 126 gm
0.28503 0. 32 0.02850 0.(much easier to start with a correct program and work on making it efficient, than to start)awidthshow
298 126 gm
-0.01231 0.(with an efficient program and work on making it correct.)ashow
334 126 gm
bu fc
2 F /|______Helvetica fnt
bn
-0.14311 0.(CONCLUDING REMARKS)ashow
352 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.13885 0. 32 0.01388 0.(Writing concurrent programs has a reputation for being exotic and difficult. I believe it is)awidthshow
364 126 gm
0.24703 0. 32 0.02470 0.(neither. You need a system that provides you with good primitives and suitable libraries,)awidthshow
376 126 gm
0.45120 0. 32 0.04512 0.(you need a basic caution and carefulness, you need an armory of useful techniques, and)awidthshow
388 126 gm
0.37826 0. 32 0.03782 0.(you need to know of the common pitfalls. I hope that this paper has helped you towards)awidthshow
400 126 gm
0.14221 0. 32 0.01422 0.(sharing my belief.)awidthshow
412 144 gm
0.53298 0. 32 0.05329 0.(Butler Lampson, Mike Schroeder, Bob Stewart and Bob Taylor caused me to write)awidthshow
424 126 gm
0.21148 0. 32 0.02114 0.(this paper. If you found it useful, thank them.)awidthshow
460 126 gm
bu fc
2 F /|______Helvetica fnt
bn
0.07391 0.(REFERENCES)ashow
478 126 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.24996 0.(1.)ashow
478 144 gm
-0.13800 0.(A)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.11563 0.(CCETTA)ashow
478 178 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.26550 0. 32 0.02655 0.(, M. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.40985 0. 32 0.04098 0.(et al)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.51055 0. 32 0.05105 0.(.  Mach: a new kernel foundation for UNIX development. In )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.17564 0.(Proceedings)ashow
490 144 gm
0.85266 0. 32 0.08526 0.(of the Summer 1986 USENIX Conference)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.74447 0. 32 0.07444 0.( \(July 1986\), 93-112.)awidthshow
502 126 gm
1.24996 0.(2.)ashow
502 144 gm
1.29104 0. 32 0.12910 0.(Apollo Computer Inc.  )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
2.08358 0. 32 0.20835 0.(Concurrent Programming Support \(CPS\) Reference)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.30584 0. 32 0.13058 0.(. Order No.)awidthshow
514 144 gm
1.75827 0. 32 0.17582 0.(010233, June 1987.)awidthshow
526 126 gm
1.24996 0.(3.)ashow
526 144 gm
0.05084 0.(B)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.03457 0.(IRRELL)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.05783 0. 32 0.00578 0.(, A., )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.10223 0. 32 0.01022 0.(AND )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.05502 0.(N)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.04774 0.(ELSON)ashow
526 240 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.99899 0. 32 0.09989 0.(, B. Implementing remote procedure calls. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
1.38427 0. 32 0.13842 0.(ACM Trans. Comput.)awidthshow
538 144 gm
1.44042 0. 32 0.14404 0.(Syst. 2,)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.29989 0. 32 0.12998 0.( 1 \(Feb. 1984\), 39-59.)awidthshow
550 126 gm
1.24996 0.(4.)ashow
550 144 gm
0.56671 0.(B)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.38540 0.(IRRELL)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.84777 0. 32 0.08477 0.(, A., G)awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.44770 0.(UTTAG)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.74295 0. 32 0.07429 0.(, J., H)awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.42816 0.(ORNING)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.47210 0. 32 0.04721 0.(, J. )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.14028 0. 32 0.11402 0.(AND )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.51899 0.(L)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.39443 0.(EVIN)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.30386 0. 32 0.13038 0.(, R.  Synchronization primitives for a)awidthshow
562 144 gm
2.83447 0. 32 0.28344 0.(multiprocessor: a formal specification. In )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
2.69607 0. 32 0.26960 0.(Proceedings of the 11)awidthshow
0 -3 rm
0.61132 0.(th)ashow
0 3 rm
2.97393 0. 32 0.29739 0.( Symposium on)awidthshow
574 144 gm
1.45782 0. 32 0.14578 0.(Operating System Principles)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.03942 0. 32 0.10394 0.( \(Nov. 1987\), 94-102.)awidthshow
586 126 gm
1.24996 0.(5.)ashow
586 144 gm
1.05255 0.(C)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.83512 0.(LARK)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
2.07870 0. 32 0.20787 0.(, D.  The structuring of systems using up-calls. In )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
2.70675 0. 32 0.27067 0.(Proceedings of the 10)awidthshow
0 -3 rm
1.22746 0.(th)ashow
598 144 gm
1.32232 0. 32 0.13223 0.(Symposium on Operating System Principles)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.07635 0. 32 0.10763 0.( \(Dec. 1985\), 171-180.)awidthshow
610 126 gm
1.24996 0.(6.)ashow
610 144 gm
0.28111 0.(C)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.21487 0.(OOPER)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.27160 0. 32 0.02716 0.(, E. )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.56564 0. 32 0.05656 0.(AND )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.30426 0.(D)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.26860 0.(RAVES)ashow
610 239 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.00082 0. 32 0.10008 0.(, R.  C Threads. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
2.36465 0. 32 0.23646 0.(Technical report CMU-CS-88-154, )awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
2.19345 0. 32 0.21934 0.( Carnegie)awidthshow
622 144 gm
0.94650 0. 32 0.09465 0.(Mellon University. Computer Science Department, Pittsburgh, PA \(June 1988\).)awidthshow
634 126 gm
1.24996 0.(7.)ashow
634 144 gm
0.10023 0.(G)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.07316 0.(UTTAG)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.12145 0. 32 0.01214 0.(, J., H)awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.06996 0.(ORNING)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.07720 0. 32 0.00772 0.(, J. )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.18630 0. 32 0.01863 0.(AND )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.13104 0.(W)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.09593 0.(ING)ashow
634 276 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.83694 0. 32 0.08369 0.(, J.  The Larch family of specification languages. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.42968 0.(IEEE)ashow
646 144 gm
0.73791 0. 32 0.07379 0.(Software 2,)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.27984 0. 32 0.02798 0.( 5, \(S)awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.30868 0.(EP)ashow
646 216 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.69433 0. 32 0.16943 0.(. 1985\), 24-36.)awidthshow
658 126 gm
1.24996 0.(8.)ashow
658 144 gm
0.35641 0.(H)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.27720 0.(ADDON)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.59982 0. 32 0.05998 0.(, B.  Nested monitor calls. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
1.03530 0. 32 0.10353 0.(Operating Systems Review 11,)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.70343 0. 32 0.07034 0.( 4 \(Oct. 1977\), 18-23.)awidthshow
670 126 gm
1.24996 0.(9.)ashow
670 144 gm
0.50155 0.(H)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.36767 0.(OARE)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.13723 0. 32 0.11372 0.(, C.A.R.  Monitors: An operating system structuring concept. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
1.57775 0. 32 0.15777 0.(Commun. ACM 17,)awidthshow
682 144 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.85073 0. 32 0.18507 0.(10 \(Oct.1974\), 549-557.)awidthshow
F T cp
%%Page: ? 34
op
31 30 761 582 fr
0 0 xl
1 1 pen
0 0 gm
(nc 31 30 761 582 6 rc)kp
64 gr
0 0 1 1 4 rc
psb
0 setgray

1 -1 scale

288 -318 translate

/wp$xorig 288 def

/wp$yorig 474 def

/wp$y 18 def

/wp$x 36 def

/wp$page 30 def

/wp$fpage (30) def

/wp$date (2/11/93) def

/wp$time (10:30 AM) def

/wp$box { newpath 0 0 moveto wp$x 0 rlineto 0 wp$y rlineto wp$x neg 0 rlineto closepath } def

wp$box clip newpath

% Transformations into word's painting rectangle

% These are derived from the bounding box specified in Adobe's comments below

/xmin 54 def

/ymin 365 def

/xmax 335 def

/ymax 499 def

wp$x xmax xmin sub div wp$y ymax ymin sub div scale

xmin neg ymin neg translate

%

%!PS-Adobe-2.0 EPSF-1.2

%%Creator: Adobe Illustrator 88(TM) 1.6

%%For: (Systems Research Center) (Digital Equipment Corporation)

%%Title: (knot horizontal)

%%CreationDate: (11/17/88) (17:12)

%%DocumentProcSets: Adobe_packedarray 0 0

%%DocumentSuppliedProcSets: Adobe_packedarray 0 0

%%DocumentProcSets: Adobe_cmykcolor 0 0

%%DocumentSuppliedProcSets: Adobe_cmykcolor 0 0

%%DocumentProcSets: Adobe_cshow 0 0

%%DocumentSuppliedProcSets: Adobe_cshow 0 0

%%DocumentProcSets: Adobe_customcolor 0 0

%%DocumentSuppliedProcSets: Adobe_customcolor 0 0

%%DocumentProcSets: Adobe_Illustrator_881 0 0

%%DocumentSuppliedProcSets: Adobe_Illustrator_881 0 0

%%ColorUsage: Black&White

%%DocumentProcessColors: Black

%%BoundingBox:54 365 335 499

%%TemplateBox:288 360 288 360

%%TileBox:-552 730 0 1460

%%EndComments

%%BeginProcSet: Adobe_packedarray 0 0

% packedarray Operators

% Version 1.0 5/9/1988

% Copyright (C) 1987, 1988

% Adobe Systems Incorporated

% All Rights Reserved

userdict /Adobe_packedarray 5 dict dup begin put

/initialize			% - initialize -

{

/packedarray where

	{

	pop

	}

	{

	Adobe_packedarray begin

	Adobe_packedarray

		{

		dup xcheck

			{

			bind

			} if

		userdict 3 1 roll put

		} forall

	end

	} ifelse

} def

/terminate			% - terminate -

{

} def

/packedarray		% arguments count packedarray array

{

array astore readonly

} def

/setpacking			% boolean setpacking -

{

pop

} def

/currentpacking		% - setpacking boolean

{

false

} def

currentdict readonly pop end

%%EndProcSet

Adobe_packedarray /initialize get exec

%%BeginProcSet:Adobe_cmykcolor 0 0

% cmykcolor Operators

% Version 1.0 5/9/1988

% Copyright (C) 1987, 1988

% Adobe Systems Incorporated

% All Rights Reserved

currentpacking true setpacking

userdict /Adobe_cmykcolor 4 dict dup begin put

/initialize			% - initialize -

{

/setcmykcolor where

	{

	pop

	}

	{

	userdict /Adobe_cmykcolor_vars 2 dict dup begin put

	/_setrgbcolor

		/setrgbcolor load def

	/_currentrgbcolor

		/currentrgbcolor load def

	Adobe_cmykcolor begin

	Adobe_cmykcolor

		{

		dup xcheck

			{

			bind

			} if

		pop pop

		} forall

	end

	end

	Adobe_cmykcolor begin

	} ifelse

} def

/terminate			% - terminate -

{

currentdict Adobe_cmykcolor eq

	{

	end

	} if

} def

/setcmykcolor		% cyan magenta yellow black setcmykcolor -

{

1 sub 4 1 roll

3

	{

	3 index add neg dup 0 lt

		{

		pop 0

		} if

	3 1 roll

	} repeat

Adobe_cmykcolor_vars /_setrgbcolor get exec

pop

} def 

/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black

{

Adobe_cmykcolor_vars /_currentrgbcolor get exec

3

	{

	1 sub neg 3 1 roll

	} repeat

0

} def

currentdict readonly pop end

setpacking

%%EndProcSet

%%BeginProcSet: Adobe_cshow 0 0

% cshow Operator

% Version 1.0 5/9/1988

% Copyright (C) 1987, 1988

% Adobe Systems Incorporated

% All Rights Reserved

currentpacking true setpacking

userdict /Adobe_cshow 3 dict dup begin put

/initialize			% - initialize -

{

/cshow where

	{

	pop

	}

	{

	userdict /Adobe_cshow_vars 1 dict dup begin put

	/_cshow		% - _cshow proc

		{} def

	Adobe_cshow begin

	Adobe_cshow

		{

		dup xcheck

			{

			bind

			} if

		userdict 3 1 roll put

		} forall

	end

	end

	} ifelse

} def

/terminate			% - terminate -

{

} def

/cshow				% string proc cshow -

{

Adobe_cshow_vars

	exch /_cshow

	exch put

	{

	0 0 Adobe_cshow_vars /_cshow get exec

	} forall

} def

currentdict readonly pop end

setpacking

%%EndProcSet

%%BeginProcSet: Adobe_customcolor 0 0

% Custom Color Operators

% Version 1.0 5/9/1988

% Copyright (C) 1987, 1988

% Adobe Systems Incorporated

% All Rights Reserved

currentpacking true setpacking

userdict /Adobe_customcolor 5 dict dup begin put

/initialize			% - initialize -

{

/setcustomcolor where

	{

	pop

	}

	{

	Adobe_customcolor begin

	Adobe_customcolor

		{

		dup xcheck

			{

			bind

			} if

		pop pop

		} forall

	end

	Adobe_customcolor begin

	} ifelse

} def

/terminate			% - terminate -

{

currentdict Adobe_customcolor eq

	{

	end

	} if

} def

/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object

{

5 packedarray

}  def

/setcustomcolor		% object tint setcustomcolor -

{

exch

aload pop pop

4

	{

	4 index mul 4 1 roll

	} repeat

5 -1 roll pop

setcmykcolor

} def

/setoverprint		% boolean setoverprint -

{

pop

} def

currentdict readonly pop end

setpacking

%%EndProcSet

%%BeginProcSet: Adobe_Illustrator881 0 0

% Adobe Illustrator (TM) Prolog

% Version 1.0 5/9/1988

% Copyright (C) 1987, 1988

% Adobe Systems Incorporated

% All Rights Reserved

currentpacking true setpacking

userdict /Adobe_Illustrator881 72 dict dup begin put

% initialization

/initialize				% - initialize -

{

userdict /Adobe_Illustrator881_vars 29 dict dup begin put

% paint operands

/_lp /none def

/_pf {} def

/_ps {} def

/_psf {} def

/_pss {} def

% text operands

/_a null def

/_as null def

/_tt 2 array def

/_tl 2 array def

/_tm matrix def

/t {} def

% color operands

/_gf null def

/_cf 4 array def

/_if null def

/_of false def

/_fc {} def

/_gs null def

/_cs 4 array def

/_is null def

/_os false def

/_sc {} def

/_i null def

Adobe_Illustrator881 begin

Adobe_Illustrator881

	{

	dup xcheck

		{

		bind

		} if

	pop pop

	} forall

end

end

Adobe_Illustrator881 begin

Adobe_Illustrator881_vars begin

newpath

} def

/terminate				% - terminate -

{

end

end

} def

% definition operators

/_					% - _ null

null def

/ddef				% key value ddef -

{

Adobe_Illustrator881_vars 3 1 roll put

} def

/xput				% key value literal xput -

{

dup load dup length exch maxlength eq

	{

	dup dup load dup

	length 2 mul dict copy def

	} if

load begin def end

} def

/npop				% integer npop -

{

	{

	pop

	} repeat

} def

% marking operators

/sw					% ax ay length string sw x y

{

stringwidth

exch 5 -1 roll 3 index 1 sub mul add

4 1 roll 3 1 roll 1 sub mul add

} def

/ss					% ax ay length string matrix ss -

{

3 -1 roll pop

4 1 roll

	{

	2 npop (0) exch

	2 copy 0 exch put pop

	gsave

	false charpath

	currentpoint

	4 index setmatrix

	stroke

	grestore

	moveto

	2 copy rmoveto

	} cshow

3 npop

} def

% path operators

/sp					% ax ay length string sp -

{

exch pop

	{

	2 npop (0) exch

	2 copy 0 exch put pop

	false charpath

	2 copy rmoveto

	} cshow

2 npop

} def

% path construction operators

/pl					% x y pl x y

{

transform

0.25 sub round 0.25 add exch

0.25 sub round 0.25 add exch

itransform

} def

/setstrokeadjust where

{

pop true setstrokeadjust

/c				% x1 y1 x2 y2 x3 y3 c -

{

curveto

} def

/C

/c load def

/v				% x2 y2 x3 y3 v -

{

currentpoint 6 2 roll curveto

} def

/V

/v load def

/y				% x1 y1 x2 y2 y -

{

2 copy curveto

} def

/Y

/y load def

/l				% x y l -

{

lineto

} def

/L

/l load def

/m				% x y m -

{

moveto

} def

}

{

/c

{

pl curveto

} def

/C

/c load def

/v

{

currentpoint 6 2 roll pl curveto

} def

/V

/v load def

/y

{

pl 2 copy curveto

} def

/Y

/y load def

/l

{

pl lineto

} def

/L

/l load def

/m

{

pl moveto

} def

} ifelse

% graphic state operators

/d					% array phase d -

{

setdash

} def

/cf					% - cf flatness

currentflat def

/i					% flatness i -

{

dup 0 eq

	{

	pop cf

	} if

setflat

} def

/j					% linejoin j -

{

setlinejoin

} def

/J					% linecap J -

{

setlinecap

} def

/M					% miterlimit M -

{

setmiterlimit

} def

/w					% linewidth w -

{

setlinewidth

} def

% path painting operators

/H					% - H -

{} def

/h					% - h -

{

closepath

} def

/N					% - N -

{

newpath

} def

/n					% - n -

/N load def

/F					% - F -

{

_pf

} def

/f					% - f -

{

closepath

F

} def

/S					% - S -

{

_ps

} def

/s					% - s -

{

closepath

S

} def

/B					% - B -

{

gsave F grestore

S

} def

/b					% - b -

{

closepath

B

} def

/W					% - W -

{

clip

} def

% text painting operators

/ta					% length string ta ax ay length string

{

_as moveto

_tt aload pop 4 -2 roll

} def

/tl					% - tl -

{

_tl aload pop translate

} def

/as					% - as array

{

{

0 0

}

{

2 copy _tt aload pop 4 -2 roll sw

exch neg 2 div exch neg 2 div

}

{

2 copy _tt aload pop 4 -2 roll sw

exch neg exch neg

}

{

0 0

}

} cvlit def

/z					% literal size leading tracking align z -

{

/_a exch ddef

/_as as _a get ddef

_a 2 le

	{

	0 _tt astore pop

	0 exch neg _tl astore pop

	}

	{

	0 exch neg _tt astore pop

	neg 0 _tl astore pop

	} ifelse

exch findfont exch scalefont setfont

} def

/tm					% matrix tm -

{

_tm currentmatrix pop

concat

} def

/I					% matrix I -

{

tm

/t

	{

	ta sp

	tl

	} ddef

} def

/o					% matrix o -

{

tm

/t

	{

	ta 4 npop

	tl

	newpath

	} ddef

} def

/e					% matrix e -

{

tm

/t

	{

	ta _psf

	tl

	newpath

	} ddef

} def

/r					% matrix r -

{

tm

/t

	{

	ta _tm _pss

	tl

	newpath

	} ddef

} def

/a					% matrix a -

{

tm

/t

	{

	2 copy

	ta _psf

	newpath

	ta _tm _pss

	tl

	newpath

	} ddef

} def

/T					% - T -

{

_tm setmatrix

} def

% font operators

/Z					% array literal literal direction Z -

{

pop

findfont begin

currentdict dup length 1 add dict begin

	{

	1 index /FID ne

		{

		def

		}

		{

		2 npop

		} ifelse

	} forall

/FontName exch def dup length 0 ne

	{

	/Encoding Encoding 256 array copy def

	0 exch

		{

		dup type /nametype eq

			{

			Encoding 2 index 2 index put pop

			1 add

			}

			{

			exch pop

			} ifelse

		} forall

	} if pop

currentdict dup end end

/FontName get exch definefont pop

} def

% group operators

/u					% - u -

{} def

/U					% - U -

{} def

/q					% - q -

{

gsave

} def

/Q					% - Q -

{

grestore

} def

% place operators

/`					% matrix llx lly urx ury string ` -

{

/_i save ddef

6 1 roll 4 npop

concat

userdict begin

/showpage {} def

false setoverprint

pop

} def

/~					% - ~ -

{

end

_i restore

} def

% color operators

/O					% flag O -

{

0 ne

/_of exch ddef

/_lp /none ddef

} def

/R					% flag R -

{

0 ne

/_os exch ddef

/_lp /none ddef

} def

/g					% gray g -

{

/_gf exch ddef

/_fc

{

_lp /fill ne

	{

	_of setoverprint

	_gf setgray

	/_lp /fill ddef

	} if

} ddef

/_pf

{

_fc

fill

} ddef

/_psf

{

_fc

exch pop

ashow

} ddef

/_lp /none ddef

} def

/G					% gray G -

{

/_gs exch ddef

/_sc

{

_lp /stroke ne

	{

	_os setoverprint

	_gs setgray

	/_lp /stroke ddef

	} if

} ddef

/_ps

{

_sc

stroke

} ddef

/_pss

{

_sc

ss

} ddef

/_lp /none ddef

} def

/k					% cyan magenta yellow black k -

{

_cf astore pop

/_fc

{

_lp /fill ne

	{

	_of setoverprint

	_cf aload pop setcmykcolor

	/_lp /fill ddef

	} if

} ddef

/_pf

{

_fc

fill

} ddef

/_psf

{

_fc

exch pop

ashow

} ddef

/_lp /none ddef

} def

/K					% cyan magenta yellow black K -

{

_cs astore pop

/_sc

{

_lp /stroke ne

	{

	_os setoverprint

	_cs aload pop setcmykcolor

	/_lp /stroke ddef

	} if

} ddef

/_ps

{

_sc

stroke

} ddef

/_pss

{

_sc

ss

} ddef

/_lp /none ddef

} def

/x					% cyan magenta yellow black name gray x -

{

/_gf exch ddef

findcmykcustomcolor

/_if exch ddef

/_fc

{

_lp /fill ne

	{

	_of setoverprint

	_if _gf 1 exch sub setcustomcolor

	/_lp /fill ddef

	} if

} ddef

/_pf

{

_fc

fill

} ddef

/_psf

{

_fc

exch pop

ashow

} ddef

/_lp /none ddef

} def

/X					% cyan magenta yellow black name gray X -

{

/_gs exch ddef

findcmykcustomcolor

/_is exch ddef

/_sc

{

_lp /stroke ne

	{

	_os setoverprint

	_is _gs 1 exch sub setcustomcolor

	/_lp /stroke ddef

	} if

} ddef

/_ps

{

_sc

stroke

} ddef

/_pss

{

_sc

ss

} ddef

/_lp /none ddef

} def

% locked object operators

/A					% value A -

{

pop

} def

currentdict readonly pop end

setpacking

%%EndProcSet

%%EndProlog

%%BeginSetup

Adobe_cmykcolor /initialize get exec

Adobe_cshow /initialize get exec

Adobe_customcolor /initialize get exec

Adobe_Illustrator881 /initialize get exec

%%EndSetup

0 A

u

0 O

0 g

0 R

0 G

0 i 0 J 0 j 2 w 4 M []0 d

%%Note:

148.025 423.9502 m

139.975 440.0498 L

59.4768 399.8 L

67.5268 383.7004 L

148.025 423.9502 L

f

103.7509 411.8751 m

F

U

1 G

139.975 440.0498 m

59.4768 399.8 L

67.5268 383.7004 L

148.025 423.9502 L

S

u

0 G

256.6979 427.9758 m

248.6479 444.0755 L

160.0999 399.8007 L

168.1499 383.7011 L

256.6979 427.9758 L

f

208.3989 413.8883 m

F

U

u

1 G

256.6979 427.9758 m

168.1499 383.7011 L

S

160.0999 399.8007 m

248.6479 444.0755 L

S

U

0 G

192.2989 456.1499 m

178.9619 482.8234 146.5236 493.6359 119.8501 480.2989 C

127.9001 464.1993 L

145.683 473.0909 167.3077 465.8829 176.1993 448.0999 c

188.2742 423.9505 l

204.3739 432.0004 l

192.2989 456.1499 l

f

u

1 G

127.9001 464.1993 m

145.683 473.0909 167.3077 465.8829 176.1993 448.0999 c

188.2742 423.9505 l

S

204.3739 432.0004 m

192.2989 456.1499 l

178.9619 482.8234 146.5236 493.6359 119.8501 480.2989 C

S

U

0 G

260.723 399.8014 m

278.5059 408.693 285.714 430.3177 276.8224 448.1006 c

267.9308 465.8835 246.3061 473.0916 228.5232 464.2 c

220.4732 480.2996 l

247.1467 493.6366 279.585 482.8241 292.922 456.1506 c

306.2595 429.4761 295.4465 397.0388 268.773 383.7018 C

260.723 399.8014 L

f

u

1 G

220.4732 480.2996 m

247.1467 493.6366 279.585 482.8241 292.922 456.1506 c

306.2595 429.4761 295.4465 397.0388 268.773 383.7018 C

S

260.723 399.8014 m

278.5059 408.693 285.714 430.3177 276.8224 448.1006 c

267.9308 465.8835 246.3061 473.0916 228.5232 464.2 c

S

U

u

0 G

139.9752 419.9252 m

131.9252 436.0248 L

220.4732 480.2996 L

228.5232 464.2 L

139.9752 419.9252 L

f

180.2242 450.1124 m

F

U

u

329.1463 464.2006 m

321.0963 480.3003 L

240.5981 440.0505 L

248.6481 423.9509 L

329.1463 464.2006 L

f

284.8722 452.1256 m

F

U

144 432 m

F

119.8501 480.2989 m

93.1757 466.9615 82.3641 434.5236 95.7011 407.8501 c

109.0385 381.1757 141.4754 370.3636 168.1499 383.7011 c

160.0999 399.8007 l

142.317 390.9091 120.6923 398.1171 111.8007 415.9001 c

102.9091 433.683 110.1171 455.3076 127.9001 464.1993 C

119.8501 480.2989 L

f

144 432 m

244.6231 432.0007 l

N

244.6231 432.0007 m

F

260.723 399.8014 m

242.9401 390.9098 221.3154 398.1178 212.4238 415.9008 c

200.3489 440.0502 l

184.2492 432.0003 l

196.3242 407.8508 l

209.6616 381.1764 242.0985 370.3643 268.773 383.7018 C

260.723 399.8014 L

f

1 G

248.6481 423.9509 m

329.1463 464.2006 L

321.0963 480.3003 L

240.5981 440.0505 L

S

u

184.2492 432.0003 m

196.3242 407.8508 l

209.6616 381.1764 242.0985 370.3643 268.773 383.7018 C

S

260.723 399.8014 m

242.9401 390.9098 221.3154 398.1178 212.4238 415.9008 c

200.3489 440.0502 l

S

U

u

139.9752 419.9252 m

228.5232 464.2 L

S

220.4732 480.2996 m

131.9252 436.0248 L

S

U

u

119.8501 480.2989 m

93.1757 466.9615 82.3641 434.5236 95.7011 407.8501 c

109.0385 381.1757 141.4754 370.3636 168.1499 383.7011 c

S

160.0999 399.8007 m

142.317 390.9091 120.6923 398.1171 111.8007 415.9001 c

102.9091 433.683 110.1171 455.3076 127.9001 464.1993 C

S

U

%%Trailer

Adobe_Illustrator881 /terminate get exec

Adobe_customcolor /terminate get exec

Adobe_cshow /terminate get exec

Adobe_cmykcolor /terminate get exec

pse
94 126 gm
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(30\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
0.87496 0.(10.)ashow
118 144 gm
-0.26373 0.(L)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.27983 0.(AMPSON)ashow
118 178 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.33355 0. 32 0.03335 0.(, B )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.75820 0. 32 0.07582 0.(AND )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.37683 0.(R)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.27818 0.(EDELL)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.80780 0. 32 0.08078 0.(, D.  Experience with processes and monitors in Mesa. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.36354 0.(Commun.)ashow
130 144 gm
1.62368 0. 32 0.16236 0.(ACM 23,)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
1.39648 0. 32 0.13964 0.( 2 \(Feb.1980\), 105-117.)awidthshow
142 126 gm
0.87496 0.(11.)ashow
142 144 gm
-0.42262 0.(M)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
(C)show
142 157 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(J)show
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
(ONES)show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(, P )show
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
(AND )show
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(S)show
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
(WART)show
142 234 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.58105 0. 32 0.05810 0.(, G.  Evolving the UNIX system interface to support multi-threaded)awidthshow
154 144 gm
0.65582 0. 32 0.06558 0.(programs. In )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.79544 0. 32 0.07954 0.(Proceedings of the Winter 1989 USENIX Conference)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.65200 0. 32 0.06520 0.( \(Feb. 1989\).)awidthshow
166 126 gm
0.87496 0.(12.)ashow
166 144 gm
0.48271 0.(R)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.38768 0.(OVNER)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.08352 0. 32 0.10835 0.(, P.  Extending Modula-2 to build large, integrated systems. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
1.40136 0. 32 0.14013 0.(IEEE Software 3,)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.49346 0. 32 0.04934 0.( 6)awidthshow
178 144 gm
1.64962 0. 32 0.16496 0.(\(Nov. 1986\), 46-57.)awidthshow
190 126 gm
0.87496 0.(13.)ashow
190 144 gm
(S)show
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.02882 0.(ALTZER)ashow
190 177 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.58081 0. 32 0.15808 0.(, J. Traffic control in a multiplexed computer system. Th., MAC-TR-30, MIT,)awidthshow
202 144 gm
1.27471 0. 32 0.12747 0.(Cambridge, Mass., July 1966.)awidthshow
214 126 gm
0.87496 0.(14.)ashow
214 144 gm
0.63980 0. 32 0.06398 0.(Sun Microsystems Inc.  )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.74966 0. 32 0.07496 0.(Sun OS 4.0 Reference Manual)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.63796 0. 32 0.06379 0.(, Nov. 1987, section 3L.)awidthshow
226 126 gm
0.87496 0.(15.)ashow
226 144 gm
0.82305 0. 32 0.08230 0.(Sun Microsystems Inc.  )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
1.26937 0. 32 0.12693 0.(System Services Overview)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.79162 0. 32 0.07916 0.(, May 1988, chapter 6.)awidthshow
238 126 gm
0.87496 0.(16.)ashow
238 144 gm
1.08171 0.(T)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.89590 0.(EVANIAN)ashow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.21978 0. 32 0.12197 0.(, A. )awidthshow
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
2.06542 0. 32 0.20654 0.(et al)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
2.36068 0. 32 0.23606 0.(  Mach threads and the Unix kernel: the battle for control. In)awidthshow
250 144 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.77346 0. 32 0.07734 0.(Proceedings of the Summer 1987 USENIX Conference)awidthshow
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.68145 0. 32 0.06814 0.( \(June 1987\), 185-197.)awidthshow
262 126 gm
0.87496 0.(17.)ashow
262 144 gm
-0.12878 0.(V)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.10702 0.(ANDEVOORDE)ashow
262 199 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.24816 0. 32 0.12481 0.(, M. )awidthshow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
2.21710 0. 32 0.22171 0.(AND )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
1.10182 0.(R)ashow
7 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.98507 0.(OBERTS)ashow
262 279 gm
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
3.47625 0. 32 0.34762 0.(, E.  Workcrews: an abstraction for controlling)awidthshow
274 144 gm
0.82534 0. 32 0.08253 0.(parallelism. \(Submitted for publication; copies available from Eric Roberts at SRC\).)awidthshow
F T cp
%%Page: ? 35
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31231)ashow
118 126 gm
10 fz
bu fc
2 F /|______Helvetica fnt
bn
-0.13050 0.(APPENDIX: OTHER THREAD DESIGNS)ashow
136 126 gm
bu fc
2 F /|______Times-Roman fnt
bn
1.20376 0. 32 0.12037 0.(In the main body of the paper we were talking entirely in terms of the SRC threads)awidthshow
148 126 gm
0.48721 0. 32 0.04872 0.(design. That design is quite similar to several other, more publicly available designs. In)awidthshow
160 126 gm
1.43905 0. 32 0.14390 0.(this appendix, I compare some other designs with SRC\325s. Where the corresponding)awidthshow
172 126 gm
0.13397 0. 32 0.01339 0.(features of the other designs differ from SRC\325s, I try to give you some hints on when and)awidthshow
184 126 gm
-0.05259 0.(how those differences will be useful or dangerous.)ashow
196 144 gm
1.36962 0. 32 0.13696 0.(The descriptions here assume that you are reasonably familiar with the original)awidthshow
208 126 gm
0.37857 0. 32 0.03785 0.(documentation for each of these systems. Please read the documentation yourself before)awidthshow
220 126 gm
0.33035 0. 32 0.03303 0.(relying on any of the material in this appendix, and please accept my apologies if I have)awidthshow
232 126 gm
-0.05665 0.(mis-represented your favorite system.)ashow
244 144 gm
0.32775 0. 32 0.03277 0.(Each design \(including SRC\325s\) includes mechanisms that I haven\325t discussed in this)awidthshow
256 126 gm
1.25366 0. 32 0.12536 0.(paper. For example, each design has facilities for affecting scheduling decisions \(by)awidthshow
268 126 gm
0.73043 0. 32 0.07304 0.(adjusting priorities, or giving hints on when a pre-emption would be useful\); SRC and)awidthshow
280 126 gm
1.19506 0. 32 0.11950 0.(Sun provide facilities for associating context information with a thread; each system)awidthshow
292 126 gm
0.08255 0. 32 0.00825 0.(provides a \322conditional lock\323 operation on a mutex. Limits on time and patience preclude)awidthshow
304 126 gm
-0.02856 0.(exploring these here.)ashow
316 144 gm
0.22949 0. 32 0.02294 0.(You should bear in mind that each of these systems \(including SRC\325s\) is equivalent,)awidthshow
328 126 gm
0.39779 0. 32 0.03977 0.(in the sense that you can \(at least\) reproduce one system\325s facilities by programming on)awidthshow
340 126 gm
0.62744 0. 32 0.06274 0.(top of another system\325s. You can solve any concurrent programming problem by using)awidthshow
352 126 gm
2.21084 0. 32 0.22108 0.(any of these systems. The effect of the differences is just that they make some)awidthshow
364 126 gm
-0.08033 0.(programming paradigms \(good ones or bad ones\) easier, and some harder.)ashow
376 144 gm
1.15661 0. 32 0.11566 0.(The following table summarizes the approximate equivalence between the major)awidthshow
388 126 gm
0.31478 0. 32 0.03147 0.(SRC facilities and those of Apollo [2], Sun [14,15] and MACH [1,6,16]. The absence of)awidthshow
400 126 gm
0.49606 0. 32 0.04960 0.(an entry means that I cannot see a reasonably equivalent facility in the documentation I)awidthshow
412 126 gm
1.30691 0. 32 0.13069 0.(have read. The following sections discuss ways in which these facilities differ from)awidthshow
424 126 gm
0.27682 0.(SRC\325s.)ashow
449 126 gm
0.55050 0.(SRC)ashow
449 189 gm
0.61721 0. 32 0.06172 0.(Apollo Domain CPS)awidthshow
449 301 gm
0.05645 0. 32 0.00564 0.(Sun release 4.0)awidthshow
449 387 gm
-0.04147 0.(MACH C threads)ashow
438 123 gm
0 gr
438 123 lin
438 123 lin
438 124 gm
438 487 lin
438 488 gm
438 488 lin
438 488 lin
439 123 gm
450 123 lin
439 488 gm
450 488 lin
450 180 gm
438 180 lin
450 292 gm
438 292 lin
450 378 gm
438 378 lin
462 126 gm
F 1 setTxMode
0.03775 0.(Fork)ashow
462 189 gm
-0.17868 0.(task_$create)ashow
462 301 gm
-0.20642 0.(lwp_create)ashow
462 387 gm
-0.27972 0.(cthread_fork)ashow
451 123 gm
0 gr
451 123 lin
451 124 gm
451 487 lin
451 488 gm
451 488 lin
452 123 gm
463 123 lin
452 488 gm
463 488 lin
463 180 gm
451 180 lin
463 292 gm
451 292 lin
463 378 gm
451 378 lin
474 126 gm
F 1 setTxMode
0.11079 0.(Join)ashow
474 189 gm
-0.15455 0.(task_$release)ashow
474 387 gm
-0.17984 0.(cthread_join)ashow
464 123 gm
0 gr
475 123 lin
464 488 gm
475 488 lin
475 180 gm
463 180 lin
475 292 gm
463 292 lin
475 378 gm
463 378 lin
486 126 gm
F 1 setTxMode
-0.02648 0.(Mutex)ashow
486 189 gm
-0.11845 0.(task_$handle_t)ashow
486 301 gm
0.11085 0.(mon_t)ashow
486 387 gm
0.03775 0.(mutex_t)ashow
476 123 gm
0 gr
487 123 lin
476 488 gm
487 488 lin
487 180 gm
475 180 lin
487 292 gm
475 292 lin
487 378 gm
475 378 lin
498 126 gm
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.49835 0.(LOCK)ashow
498 189 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.02119 0.(mutex_$lock)ashow
498 301 gm
-0.09518 0.(mon_enter)ashow
498 387 gm
-0.02352 0.(mutex_lock)ashow
488 123 gm
0 gr
499 123 lin
488 488 gm
499 488 lin
499 180 gm
487 180 lin
499 292 gm
487 292 lin
499 378 gm
487 378 lin
510 126 gm
F 1 setTxMode
0.22460 0. 32 0.02246 0.(    ... )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.60243 0.(END)ashow
510 189 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.01763 0.(mutex_$unlock)ashow
510 301 gm
0.03236 0.(mon_exit)ashow
510 387 gm
-0.01928 0.(mutex_unlock)ashow
500 123 gm
0 gr
511 123 lin
500 488 gm
511 488 lin
511 180 gm
499 180 lin
511 292 gm
499 292 lin
511 378 gm
499 378 lin
522 126 gm
F 1 setTxMode
(Condition)show
522 189 gm
-0.09544 0.(ec2_$eventcount_t)ashow
522 301 gm
-0.07225 0.(cv_t)ashow
522 387 gm
-0.05519 0.(condition_t)ashow
512 123 gm
0 gr
523 123 lin
512 488 gm
523 488 lin
523 180 gm
511 180 lin
523 292 gm
511 292 lin
523 378 gm
511 378 lin
534 126 gm
F 1 setTxMode
-0.14451 0.(Wait)ashow
534 189 gm
-0.13645 0.(ec2_$wait)ashow
534 301 gm
-0.10884 0.(cv_wait)ashow
534 387 gm
-0.07597 0.(condition_wait)ashow
524 123 gm
0 gr
535 123 lin
524 488 gm
535 488 lin
535 180 gm
523 180 lin
535 292 gm
523 292 lin
535 378 gm
523 378 lin
546 126 gm
F 1 setTxMode
-0.37258 0.(Broadcast)ashow
546 189 gm
-0.33009 0.(ec2_$advance)ashow
546 301 gm
-0.24987 0.(cv_broadcast)ashow
546 387 gm
-0.17135 0.(condition_broadcast)ashow
536 123 gm
0 gr
547 123 lin
536 488 gm
547 488 lin
547 180 gm
535 180 lin
547 292 gm
535 292 lin
547 378 gm
535 378 lin
558 126 gm
F 1 setTxMode
0.08914 0.(Signal)ashow
558 301 gm
-0.04034 0.(cv_notify)ashow
558 387 gm
-0.04386 0.(condition_signal)ashow
548 123 gm
0 gr
559 123 lin
548 488 gm
559 488 lin
559 180 gm
547 180 lin
559 292 gm
547 292 lin
559 378 gm
547 378 lin
570 126 gm
F 1 setTxMode
-0.13548 0.(Alert)ashow
570 189 gm
(task_$signal)show
572 123 gm
0 gr
572 123 lin
572 123 lin
572 124 gm
572 487 lin
572 488 gm
572 488 lin
572 488 lin
560 123 gm
571 123 lin
560 488 gm
571 488 lin
571 180 gm
559 180 lin
571 292 gm
559 292 lin
571 378 gm
559 378 lin
599 126 gm
F 1 setTxMode
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
0.13244 0. 32 0.01324 0.(Apollo Domain Concurrent Programming Support \(CPS\))awidthshow
617 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.69015 0. 32 0.06901 0.(Apollo allows you to specify a timeout with calls of \322mutex_$lock\323. There seem to be)awidthshow
629 126 gm
1.56478 0. 32 0.15647 0.(two reasons why you might want to do this. First, your program might have some)awidthshow
641 126 gm
0.52841 0. 32 0.05284 0.(alternative algorithm it could use if the required mutex is being held too long. This is a)awidthshow
653 126 gm
1.30462 0. 32 0.13046 0.(technique that would be useful if lock conflicts are common. Generally, you should)awidthshow
665 126 gm
1.46057 0. 32 0.14605 0.(arrange that lock conflicts are quite rare and of short duration. You can do this by)awidthshow
677 126 gm
0.33737 0. 32 0.03373 0.(arranging your locking to be fine enough grain, each mutex protecting only the data you)awidthshow
F T cp
%%Page: ? 36
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 126 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
0.37466 0.(32\312\312\312\312\312)ashow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
2.32467 0. 32 0.23246 0.(\312\312\312\312\312An Introduction to Programming with Threads)awidthshow
118 126 gm
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.38833 0. 32 0.03883 0.(actually intend to touch. But if you cannot achieve this, then you might find the timeout)awidthshow
130 126 gm
0.93826 0. 32 0.09382 0.(parameter useful. Second, you can use this timeout parameter for detecting \(and even)awidthshow
142 126 gm
0.82107 0. 32 0.08210 0.(recovering from\) deadlocks. This I discourage\321I view deadlocks as bugs; you should)awidthshow
154 126 gm
-0.06573 0.(detect them with a debugger and re-program to avoid them.)ashow
166 144 gm
0.57876 0. 32 0.05787 0.(Apollo\325s level 2 eventcounts serve the same purpose as SRC\325s condition variables.)awidthshow
178 126 gm
0.15899 0. 32 0.01589 0.(The simplest usage of \322ec2_$advance\323 is for a thread to lock a mutex, inspect some data,)awidthshow
190 126 gm
0.05569 0. 32 0.00556 0.(and decide that it needs to block until the data is changed by some other thread. It does so)awidthshow
202 126 gm
0.04486 0. 32 0.00448 0.(by reading the value of the eventcount \(with \322ec2_$read\323\), unlocking the mutex, and then)awidthshow
214 126 gm
-0.01071 0.(calling  \322ec2_$wait\323 to block until the eventcount is advanced. This has the same effect as)ashow
226 126 gm
0.92788 0. 32 0.09278 0.(SRC\325s use of \322Wait\323 and \322Broadcast\323. Reading the value of the eventcount while the)awidthshow
238 126 gm
0.50933 0. 32 0.05093 0.(mutex is still locked achieves the same atomicity as SRC guarantees in the \322Wait\323 call.)awidthshow
250 126 gm
0.22277 0. 32 0.02227 0.(\(Indeed, this is how SRC implements that atomicity.\) Apollo has no equivalent of SRC\325s)awidthshow
262 126 gm
-0.01066 0.(\322Signal\323 operation.)ashow
274 144 gm
0.10848 0. 32 0.01084 0.(Apollo\325s eventcounts provide additional freedom, since they are not explicitly tied to)awidthshow
286 126 gm
1.76773 0. 32 0.17677 0.(a mutex or its associated data. This allows threads to block and wake up without)awidthshow
298 126 gm
0.51147 0. 32 0.05114 0.(synchronizing over shared data. This is rarely what you want to do. Almost always, the)awidthshow
310 126 gm
0.11749 0. 32 0.01174 0.(reason you know that it is profitable to awaken a thread is because you have just changed)awidthshow
322 126 gm
0.43212 0. 32 0.04321 0.(some data that thread is interested in. If you take advantage of this extra flexibility, you)awidthshow
334 126 gm
-0.01667 0.(must be careful to prevent errors such as the following sequence of actions.)ashow
358 126 gm
(1\321)show
358 180 gm
-0.08476 0.(Thread A looks at the data and decides to block;)ashow
370 126 gm
(2\321)show
370 180 gm
-0.02415 0.(Thread A unlocks the mutex;)ashow
382 126 gm
(3\321)show
382 180 gm
-0.07984 0.(Thread B locks the mutex and changes the data;)ashow
394 126 gm
(4\321)show
394 180 gm
-0.21008 0.(Thread B calls \322ec2_$advance\323;)ashow
406 126 gm
(5\321)show
406 180 gm
-0.18202 0.(Thread A calls \322ec2_$read";)ashow
418 126 gm
(6\321)show
418 180 gm
-0.10861 0.(Thread A calls \322ec2_$wait\323.)ashow
442 144 gm
0.11444 0. 32 0.01144 0.(With this sequence thread A will not be awoken, even although the data it is wanting)awidthshow
454 126 gm
0.37719 0. 32 0.03771 0.(has changed. The intended sequence was that step \(5\) should happen before step \(4\). To)awidthshow
466 126 gm
-0.04478 0.(guarantee this, thread A must execute \(5\) before \(2\).)ashow
478 144 gm
0.28503 0. 32 0.02850 0.(Apollo allows you to wait on multiple eventcounts when you call \322ec2_$wait\323. This)awidthshow
490 126 gm
1.32675 0. 32 0.13267 0.(is occasionally convenient. Without this feature, you must have one thread for each)awidthshow
502 126 gm
0.67718 0. 32 0.06771 0.(condition for which you are waiting. The extra functionality of the Apollo design does)awidthshow
514 126 gm
0.55191 0. 32 0.05519 0.(not seem to introduce any new problems. The only down-side is additional complexity,)awidthshow
526 126 gm
-0.03854 0.(and scope for performance penalties, in the threads implementation.)ashow
538 144 gm
1.71493 0. 32 0.17149 0.(Apollo\325s asynchronous fault facility provided by \322task_$signal\323 substitutes for)awidthshow
550 126 gm
0.07476 0. 32 0.00747 0.(SRC\325s facility for alerting a thread. The SRC design provides only for the target thread to)awidthshow
562 126 gm
0.14648 0. 32 0.01464 0.(poll for alerts \(by calling \322AlertWait\323 or \322TestAlert\323\); the Apollo design produces a fault)awidthshow
574 126 gm
0.11383 0. 32 0.01138 0.(at an arbitrary point in the target thread\325s execution, provided the thread has not inhibited)awidthshow
586 126 gm
0.28106 0. 32 0.02810 0.(faults. It is important that you don\325t interrupt a thread while is is executing with a mutex)awidthshow
598 126 gm
0.35125 0. 32 0.03512 0.(locked, since that would leave the shared data in an unpredictable state. Apollo enforces)awidthshow
610 126 gm
0.40100 0. 32 0.04010 0.(this restriction by inhibiting faults while a mutex is locked. The attraction of the polling)awidthshow
622 126 gm
0.64605 0. 32 0.06460 0.(model is that the flow of control of your program is more clearly visible in the source.)awidthshow
634 126 gm
0.46615 0. 32 0.04661 0.(The attraction of interrupting at an arbitrary point \(outside of )awidthshow
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.19146 0.(LOCK)ashow
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
0.34118 0. 32 0.03411 0.( clauses\) is that it is)awidthshow
646 126 gm
0.61004 0. 32 0.06100 0.(easier to be sure that computations can be terminated\321there is less likelihood that you)awidthshow
658 126 gm
-0.01048 0.(will introduce a bug by forgetting to call \322TestAlert\323. These attractions are both valid, and)ashow
670 126 gm
-0.02436 0.(the ideal design would allow for both.)ashow
F T cp
%%Page: ? 37
op
31 30 761 582 fr
0 0 xl
1 1 pen
94 242 gm
(nc 31 30 761 582 6 rc)kp
F 1 setTxMode
0 fs
9 fz
bu fc
2 F /|______Helvetica fnt
bn
2.30087 0. 32 0.23008 0.(An Introduction to Programming with Threads\312\312\312\312\312)awidthshow
0 -3 rm
1 fs
bu fc
2 F /|______Helvetica-Bold fnt
bn
0.29135 0.(.)ashow
0 3 rm
0 fs
bu fc
2 F /|______Helvetica fnt
bn
0.43710 0.(\312\312\312\312\31233)ashow
118 126 gm
2 fs
10 fz
bu fc
2 F /|______Times-Italic fnt
bn
(Sun\325s lightweight process library)show
136 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
0.51696 0. 32 0.05169 0.(Sun\325s version 4.0 offers \322lightweight processes\323 as a library [14,15]. These are not true)awidthshow
148 126 gm
0.01937 0. 32 0.00193 0.(threads\321within an address space only one lightweight processes is executing at any time.)awidthshow
160 126 gm
0.27511 0. 32 0.02751 0.(But the creation and synchronization facilities are the same as you would expect them to)awidthshow
172 126 gm
-0.10256 0.(be for real threads.)ashow
184 144 gm
0.77743 0. 32 0.07774 0.(Sun allows a thread to lock a mutex recursively. In other words, while a thread is)awidthshow
196 126 gm
0.12298 0. 32 0.01229 0.(holding a mutex it can call a procedure \(perhaps by recursion\) that locks the same mutex.)awidthshow
208 126 gm
0.64971 0. 32 0.06497 0.(In the SRC design this would deadlock. Which is preferable depends on your intent. If)awidthshow
220 126 gm
0.42846 0. 32 0.04284 0.(you were careful to restore the monitor invariant before making the call that recursively)awidthshow
232 126 gm
0.61096 0. 32 0.06109 0.(locks the mutex, all will be fine. But if this is really a bug, because you forgot that the)awidthshow
244 126 gm
0.28732 0. 32 0.02873 0.(called procedure uses the same data, you will get the wrong answer. Additionally, if you)awidthshow
256 126 gm
0.39352 0. 32 0.03935 0.(take advantage of this feature remember that you can introduce a deadlock if you split a)awidthshow
268 126 gm
0.33050 0. 32 0.03305 0.(computation into multiple threads\321what used to be a recursive acquisition of the mutex)awidthshow
280 126 gm
-0.05273 0.(might become an acquisition by a different thread.)ashow
292 144 gm
0.06134 0. 32 0.00613 0.(Sun does not provide any mechanism for alerting a thread. However, they do provide)awidthshow
304 126 gm
0.23620 0. 32 0.02362 0.(a mechanism for threads to deal with asynchronous Unix signals by calling \322agt_create\323.)awidthshow
316 126 gm
0.06195 0. 32 0.00619 0.(Some of these signals serve the same purpose as SRC\325s alerts, and so these cases are easy)awidthshow
328 126 gm
0.28839 0. 32 0.02883 0.(to deal with. But remember that alerts are not really a fundamental part of threads\321they)awidthshow
340 126 gm
-0.15299 0.(are just an added convenience.)ashow
352 144 gm
1.35437 0. 32 0.13543 0.(The library also includes a facility for passing messages between threads. Most)awidthshow
364 126 gm
0.14801 0. 32 0.01480 0.(designers have adopted the view that message passing is an alternative to shared memory)awidthshow
376 126 gm
0.14572 0. 32 0.01457 0.(synchronization, not an adjunct to it. I don\325t recommend using both mechanisms within a)awidthshow
388 126 gm
0.12191 0. 32 0.01219 0.(single program, except to the extent that you need to use Sun\325s message system to handle)awidthshow
400 126 gm
0.16555 0. 32 0.01655 0.(asynchronous Unix signals.)awidthshow
428 126 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
-0.16575 0.(Threads in Mach)ashow
446 126 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
-0.02049 0.(The procedures I listed in the table come from Eric Cooper\325s C library interface to MACH)ashow
458 126 gm
0.27175 0. 32 0.02717 0.(threads [6]. That interface is quite similar to SRC\325s. The only noticeable omission is any)awidthshow
470 126 gm
-0.06393 0.(facility for alerting a thread. There are no substantive differences.)ashow
F T cp
%%Trailer
cd
end
%%Pages: 37 0
%%EOF
